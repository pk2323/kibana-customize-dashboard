{"version":3,"file":"sense-tests.bundle.js","sources":["C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\optimize\\bundles\\sense-tests.entry.js","C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\src\\core_plugins\\console\\public\\tests\\index.js","C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\src\\core_plugins\\console\\public\\tests\\tests.js","C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\src\\core_plugins\\console\\public\\tests\\index.html","C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\src\\core_plugins\\console\\public\\tests\\webpackShims\\qunit-1.10.0.js","C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\src\\core_plugins\\console\\public\\tests\\webpackShims\\qunit-1.10.0.css","C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\src\\core_plugins\\console\\public\\tests\\src\\content_type.js","C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\src\\core_plugins\\console\\public\\tests\\src\\utils_tests.js","C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\src\\core_plugins\\console\\public\\tests\\src\\utils_string_collapsing.txt","C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\src\\core_plugins\\console\\public\\tests\\src\\utils_string_expanding.txt","C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\src\\core_plugins\\console\\public\\tests\\src\\url_autocomplete_tests.js","C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\src\\core_plugins\\console\\public\\tests\\src\\url_params_tests.js","C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\src\\core_plugins\\console\\public\\tests\\src\\curl_parsing_tests.js","C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\src\\core_plugins\\console\\public\\tests\\src\\curl_parsing_tests.txt","C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\src\\core_plugins\\console\\public\\tests\\src\\kb_tests.js","C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\src\\core_plugins\\console\\public\\tests\\src\\mapping_tests.js","C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\src\\core_plugins\\console\\public\\tests\\src\\editor_tests.js","C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\src\\core_plugins\\console\\public\\tests\\src\\editor_input1.txt","C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\src\\core_plugins\\console\\public\\tests\\src\\input_tokenization_tests.js","C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\src\\core_plugins\\console\\public\\tests\\src\\output_tokenization_tests.js","C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\src\\core_plugins\\console\\public\\tests\\src\\integration_tests.js"],"sourcesContent":["'use strict';\n\n/**\n * Test entry file\n *\n * This is programatically created and updated, do not modify\n *\n * context: {\n  \"env\": \"development\",\n  \"sourceMaps\": \"#cheap-source-map\",\n  \"kbnVersion\": \"6.2.4\",\n  \"buildNum\": 8467,\n  \"plugins\": [\n    \"console\",\n    \"dev_mode\",\n    \"elasticsearch\",\n    \"input_control_vis\",\n    \"kbn_doc_views\",\n    \"kbn_vislib_vis_types\",\n    \"kibana\",\n    \"markdown_vis\",\n    \"metric_vis\",\n    \"metrics\",\n    \"region_map\",\n    \"spy_modes\",\n    \"state_session_storage_redirect\",\n    \"status_page\",\n    \"table_vis\",\n    \"tagcloud\",\n    \"testbed\",\n    \"tests_bundle\",\n    \"tile_map\",\n    \"timelion\",\n    \"vega\"\n  ]\n}\n */\n\nrequire('ui/chrome');\nrequire('plugins/console/tests');\nrequire('plugins/console/hacks/register');\nrequire('plugins/kibana/dev_tools/hacks/hide_empty_tools');\nrequire('plugins/testbed');\nrequire('plugins/timelion/lib/panel_registry');\nrequire('plugins/timelion/panels/timechart/timechart');\nrequire('ui/chrome').bootstrap();\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./optimize/bundles/sense-tests.entry.js\n// module id = 3142\n// module chunks = 2","'use strict';\n\nrequire('./tests');\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/core_plugins/console/public/tests/index.js\n// module id = 3143\n// module chunks = 2","'use strict';\n\nrequire('ace');\n\nvar _module = require('ui/modules').get('app/sense');\n\n// mock the resize checker\n_module.run(function () {\n  _module.setupResizeCheckerForRootEditors = function () {};\n});\n\nrequire('ui/chrome').setRootTemplate(require('./index.html')).setRootController(function () {\n  window.QUnit = require('qunit-1.10.0');\n\n  require('qunit-1.10.0.css');\n  require('ace');\n  /* global QUnit */\n  QUnit.config.autostart = false;\n  QUnit.init();\n\n  require('./src/content_type.js');\n  require('./src/utils_tests.js');\n  require('./src/url_autocomplete_tests.js');\n  require('./src/url_params_tests.js');\n  require('./src/curl_parsing_tests.js');\n  require('./src/kb_tests.js');\n  require('./src/mapping_tests.js');\n  require('./src/editor_tests.js');\n  require('./src/input_tokenization_tests.js');\n  require('./src/output_tokenization_tests.js');\n  require('./src/integration_tests.js');\n\n  console.log('all tests loaded');\n  QUnit.start();\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/core_plugins/console/public/tests/tests.js\n// module id = 3144\n// module chunks = 2","module.exports = \"  <style type=\\\"text/css\\\">\\n    #editor_container {\\n      display: none;\\n      position: absolute;\\n      top: 20px;\\n      bottom: 20px;\\n      left: 20px;\\n      right: 20px;\\n      z-index: 200;\\n      border: 1px solid #333;\\n    }\\n\\n    #output_container {\\n      display: none;\\n      position: absolute;\\n      height: 250px;\\n      width: 350px;\\n      bottom: 20px;\\n      right: 20px;\\n      z-index: 201;\\n      border: 1px solid #333;\\n    }\\n\\n    #editor, #output {\\n      height: 100%;\\n      width: 100%;\\n      position: relative;\\n    }\\n  </style>\\n<div id=\\\"qunit\\\"></div>\\n<div id=\\\"editor_container\\\">\\n  <div id=\\\"editor\\\"></div>\\n</div>\\n<div id=\\\"output_container\\\">\\n  <div id=\\\"output\\\"></div>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/core_plugins/console/public/tests/index.html\n// module id = 3146\n// module chunks = 2","/**\n * QUnit v1.10.0 - A JavaScript Unit Testing Framework\n *\n * http://qunitjs.com\n *\n * Copyright 2012 jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n */\n\n(function () {\n\n  var QUnit,\n      config,\n      onErrorFnPrev,\n      testId = 0,\n      fileName = (sourceFromStacktrace(0) || \"\" ).replace(/(:\\d+)+\\)?/, \"\").replace(/.+\\//, \"\"),\n      toString = Object.prototype.toString,\n      hasOwn = Object.prototype.hasOwnProperty,\n  // Keep a local reference to Date (GH-283)\n      Date = window.Date,\n      defined = {\n        setTimeout: typeof window.setTimeout !== \"undefined\",\n        sessionStorage: (function () {\n          var x = \"qunit-test-string\";\n          try {\n            sessionStorage.setItem(x, x);\n            sessionStorage.removeItem(x);\n            return true;\n          } catch (e) {\n            return false;\n          }\n        }())\n      };\n\n  function Test(settings) {\n    extend(this, settings);\n    this.assertions = [];\n    this.testNumber = ++Test.count;\n  }\n\n  Test.count = 0;\n\n  Test.prototype = {\n    init: function () {\n      var a, b, li,\n          tests = id(\"qunit-tests\");\n\n      if (tests) {\n        b = document.createElement(\"strong\");\n        b.innerHTML = this.name;\n\n        // `a` initialized at top of scope\n        a = document.createElement(\"a\");\n        a.innerHTML = \"Rerun\";\n        a.href = QUnit.url({ testNumber: this.testNumber });\n\n        li = document.createElement(\"li\");\n        li.appendChild(b);\n        li.appendChild(a);\n        li.className = \"running\";\n        li.id = this.id = \"qunit-test-output\" + testId++;\n\n        tests.appendChild(li);\n      }\n    },\n    setup: function () {\n      if (this.module !== config.previousModule) {\n        if (config.previousModule) {\n          runLoggingCallbacks(\"moduleDone\", QUnit, {\n            name: config.previousModule,\n            failed: config.moduleStats.bad,\n            passed: config.moduleStats.all - config.moduleStats.bad,\n            total: config.moduleStats.all\n          });\n        }\n        config.previousModule = this.module;\n        config.moduleStats = { all: 0, bad: 0 };\n        runLoggingCallbacks(\"moduleStart\", QUnit, {\n          name: this.module\n        });\n      } else if (config.autorun) {\n        runLoggingCallbacks(\"moduleStart\", QUnit, {\n          name: this.module\n        });\n      }\n\n      config.current = this;\n\n      this.testEnvironment = extend({\n        setup: function () {\n        },\n        teardown: function () {\n        }\n      }, this.moduleTestEnvironment);\n\n      runLoggingCallbacks(\"testStart\", QUnit, {\n        name: this.testName,\n        module: this.module\n      });\n\n      // allow utility functions to access the current test environment\n      // TODO why??\n      QUnit.current_testEnvironment = this.testEnvironment;\n\n      if (!config.pollution) {\n        saveGlobal();\n      }\n      if (config.notrycatch) {\n        this.testEnvironment.setup.call(this.testEnvironment);\n        return;\n      }\n      try {\n        this.testEnvironment.setup.call(this.testEnvironment);\n      } catch (e) {\n        QUnit.pushFailure(\"Setup failed on \" + this.testName + \": \" + e.message, extractStacktrace(e, 1));\n      }\n    },\n    run: function () {\n      config.current = this;\n\n      var running = id(\"qunit-testresult\");\n\n      if (running) {\n        running.innerHTML = \"Running: <br/>\" + this.name;\n      }\n\n      if (this.async) {\n        QUnit.stop();\n      }\n\n      if (config.notrycatch) {\n        this.callback.call(this.testEnvironment, QUnit.assert);\n        return;\n      }\n\n      try {\n        this.callback.call(this.testEnvironment, QUnit.assert);\n      } catch (e) {\n        QUnit.pushFailure(\"Died on test #\" + (this.assertions.length + 1) + \" \" + this.stack + \": \" + e.message, extractStacktrace(e, 0));\n        // else next test will carry the responsibility\n        saveGlobal();\n\n        // Restart the tests if they're blocking\n        if (config.blocking) {\n          QUnit.start();\n        }\n      }\n    },\n    teardown: function () {\n      config.current = this;\n      if (config.notrycatch) {\n        this.testEnvironment.teardown.call(this.testEnvironment);\n        return;\n      } else {\n        try {\n          this.testEnvironment.teardown.call(this.testEnvironment);\n        } catch (e) {\n          QUnit.pushFailure(\"Teardown failed on \" + this.testName + \": \" + e.message, extractStacktrace(e, 1));\n        }\n      }\n      checkPollution();\n    },\n    finish: function () {\n      config.current = this;\n      if (config.requireExpects && this.expected == null) {\n        QUnit.pushFailure(\"Expected number of assertions to be defined, but expect() was not called.\", this.stack);\n      } else if (this.expected != null && this.expected != this.assertions.length) {\n        QUnit.pushFailure(\"Expected \" + this.expected + \" assertions, but \" + this.assertions.length + \" were run\", this.stack);\n      } else if (this.expected == null && !this.assertions.length) {\n        QUnit.pushFailure(\"Expected at least one assertion, but none were run - call expect(0) to accept zero assertions.\", this.stack);\n      }\n\n      var assertion, a, b, i, li, ol,\n          test = this,\n          good = 0,\n          bad = 0,\n          tests = id(\"qunit-tests\");\n\n      config.stats.all += this.assertions.length;\n      config.moduleStats.all += this.assertions.length;\n\n      if (tests) {\n        ol = document.createElement(\"ol\");\n\n        for (i = 0; i < this.assertions.length; i++) {\n          assertion = this.assertions[i];\n\n          li = document.createElement(\"li\");\n          li.className = assertion.result ? \"pass\" : \"fail\";\n          li.innerHTML = assertion.message || ( assertion.result ? \"okay\" : \"failed\" );\n          ol.appendChild(li);\n\n          if (assertion.result) {\n            good++;\n          } else {\n            bad++;\n            config.stats.bad++;\n            config.moduleStats.bad++;\n          }\n        }\n\n        // store result when possible\n        if (QUnit.config.reorder && defined.sessionStorage) {\n          if (bad) {\n            sessionStorage.setItem(\"qunit-test-\" + this.module + \"-\" + this.testName, bad);\n          } else {\n            sessionStorage.removeItem(\"qunit-test-\" + this.module + \"-\" + this.testName);\n          }\n        }\n\n        if (bad === 0) {\n          ol.style.display = \"none\";\n        }\n\n        // `b` initialized at top of scope\n        b = document.createElement(\"strong\");\n        b.innerHTML = this.name + \" <b class='counts'>(<b class='failed'>\" + bad + \"</b>, <b class='passed'>\" + good + \"</b>, \" + this.assertions.length + \")</b>\";\n\n        addEvent(b, \"click\", function () {\n          var next = b.nextSibling.nextSibling,\n              display = next.style.display;\n          next.style.display = display === \"none\" ? \"block\" : \"none\";\n        });\n\n        addEvent(b, \"dblclick\", function (e) {\n          var target = e && e.target ? e.target : window.event.srcElement;\n          if (target.nodeName.toLowerCase() == \"span\" || target.nodeName.toLowerCase() == \"b\") {\n            target = target.parentNode;\n          }\n          if (window.location && target.nodeName.toLowerCase() === \"strong\") {\n            window.location = QUnit.url({ testNumber: test.testNumber });\n          }\n        });\n\n        // `li` initialized at top of scope\n        li = id(this.id);\n        li.className = bad ? \"fail\" : \"pass\";\n        li.removeChild(li.firstChild);\n        a = li.firstChild;\n        li.appendChild(b);\n        li.appendChild(a);\n        li.appendChild(ol);\n\n      } else {\n        for (i = 0; i < this.assertions.length; i++) {\n          if (!this.assertions[i].result) {\n            bad++;\n            config.stats.bad++;\n            config.moduleStats.bad++;\n          }\n        }\n      }\n\n      runLoggingCallbacks(\"testDone\", QUnit, {\n        name: this.testName,\n        module: this.module,\n        failed: bad,\n        passed: this.assertions.length - bad,\n        total: this.assertions.length\n      });\n\n      QUnit.reset();\n\n      config.current = undefined;\n    },\n\n    queue: function () {\n      var bad,\n          test = this;\n\n      synchronize(function () {\n        test.init();\n      });\n      function run() {\n        // each of these can by async\n        synchronize(function () {\n          test.setup();\n        });\n        synchronize(function () {\n          test.run();\n        });\n        synchronize(function () {\n          test.teardown();\n        });\n        synchronize(function () {\n          test.finish();\n        });\n      }\n\n      // `bad` initialized at top of scope\n      // defer when previous test run passed, if storage is available\n      bad = QUnit.config.reorder && defined.sessionStorage && +sessionStorage.getItem(\"qunit-test-\" + this.module + \"-\" + this.testName);\n\n      if (bad) {\n        run();\n      } else {\n        synchronize(run, true);\n      }\n    }\n  };\n\n// Root QUnit object.\n// `QUnit` initialized at top of scope\n  QUnit = {\n\n    // call on start of module test to prepend name to all tests\n    module: function (name, testEnvironment) {\n      config.currentModule = name;\n      config.currentModuleTestEnvironment = testEnvironment;\n      config.modules[name] = true;\n    },\n\n    asyncTest: function (testName, expected, callback) {\n      if (arguments.length === 2) {\n        callback = expected;\n        expected = null;\n      }\n\n      QUnit.test(testName, expected, callback, true);\n    },\n\n    test: function (testName, expected, callback, async) {\n      var test,\n          name = \"<span class='test-name'>\" + escapeInnerText(testName) + \"</span>\";\n\n      if (arguments.length === 2) {\n        callback = expected;\n        expected = null;\n      }\n\n      if (config.currentModule) {\n        name = \"<span class='module-name'>\" + config.currentModule + \"</span>: \" + name;\n      }\n\n      test = new Test({\n        name: name,\n        testName: testName,\n        expected: expected,\n        async: async,\n        callback: callback,\n        module: config.currentModule,\n        moduleTestEnvironment: config.currentModuleTestEnvironment,\n        stack: sourceFromStacktrace(2)\n      });\n\n      if (!validTest(test)) {\n        return;\n      }\n\n      test.queue();\n    },\n\n    // Specify the number of expected assertions to gurantee that failed test (no assertions are run at all) don't slip through.\n    expect: function (asserts) {\n      if (arguments.length === 1) {\n        config.current.expected = asserts;\n      } else {\n        return config.current.expected;\n      }\n    },\n\n    start: function (count) {\n      config.semaphore -= count || 1;\n      // don't start until equal number of stop-calls\n      if (config.semaphore > 0) {\n        return;\n      }\n      // ignore if start is called more often then stop\n      if (config.semaphore < 0) {\n        config.semaphore = 0;\n      }\n      // A slight delay, to avoid any current callbacks\n      if (defined.setTimeout) {\n        window.setTimeout(function () {\n          if (config.semaphore > 0) {\n            return;\n          }\n          if (config.timeout) {\n            clearTimeout(config.timeout);\n          }\n\n          config.blocking = false;\n          process(true);\n        }, 13);\n      } else {\n        config.blocking = false;\n        process(true);\n      }\n    },\n\n    stop: function (count) {\n      config.semaphore += count || 1;\n      config.blocking = true;\n\n      if (config.testTimeout && defined.setTimeout) {\n        clearTimeout(config.timeout);\n        config.timeout = window.setTimeout(function () {\n          QUnit.ok(false, \"Test timed out\");\n          config.semaphore = 1;\n          QUnit.start();\n        }, config.testTimeout);\n      }\n    }\n  };\n\n// Asssert helpers\n// All of these must call either QUnit.push() or manually do:\n// - runLoggingCallbacks( \"log\", .. );\n// - config.current.assertions.push({ .. });\n  QUnit.assert = {\n    /**\n     * Asserts rough true-ish result.\n     * @name ok\n     * @function\n     * @example ok( \"asdfasdf\".length > 5, \"There must be at least 5 chars\" );\n     */\n    ok: function (result, msg) {\n      if (!config.current) {\n        throw new Error(\"ok() assertion outside test context, was \" + sourceFromStacktrace(2));\n      }\n      result = !!result;\n\n      var source,\n          details = {\n            module: config.current.module,\n            name: config.current.testName,\n            result: result,\n            message: msg\n          };\n\n      msg = escapeInnerText(msg || (result ? \"okay\" : \"failed\" ));\n      msg = \"<span class='test-message'>\" + msg + \"</span>\";\n\n      if (!result) {\n        source = sourceFromStacktrace(2);\n        if (source) {\n          details.source = source;\n          msg += \"<table><tr class='test-source'><th>Source: </th><td><pre>\" + escapeInnerText(source) + \"</pre></td></tr></table>\";\n        }\n      }\n      runLoggingCallbacks(\"log\", QUnit, details);\n      config.current.assertions.push({\n        result: result,\n        message: msg\n      });\n    },\n\n    /**\n     * Assert that the first two arguments are equal, with an optional message.\n     * Prints out both actual and expected values.\n     * @name equal\n     * @function\n     * @example equal( format( \"Received {0} bytes.\", 2), \"Received 2 bytes.\", \"format() replaces {0} with next argument\" );\n     */\n    equal: function (actual, expected, message) {\n      QUnit.push(expected == actual, actual, expected, message);\n    },\n\n    /**\n     * @name notEqual\n     * @function\n     */\n    notEqual: function (actual, expected, message) {\n      QUnit.push(expected != actual, actual, expected, message);\n    },\n\n    /**\n     * @name deepEqual\n     * @function\n     */\n    deepEqual: function (actual, expected, message) {\n      QUnit.push(QUnit.equiv(actual, expected), actual, expected, message);\n    },\n\n    /**\n     * @name notDeepEqual\n     * @function\n     */\n    notDeepEqual: function (actual, expected, message) {\n      QUnit.push(!QUnit.equiv(actual, expected), actual, expected, message);\n    },\n\n    /**\n     * @name strictEqual\n     * @function\n     */\n    strictEqual: function (actual, expected, message) {\n      QUnit.push(expected === actual, actual, expected, message);\n    },\n\n    /**\n     * @name notStrictEqual\n     * @function\n     */\n    notStrictEqual: function (actual, expected, message) {\n      QUnit.push(expected !== actual, actual, expected, message);\n    },\n\n    throws: function (block, expected, message) {\n      var actual,\n          ok = false;\n\n      // 'expected' is optional\n      if (typeof expected === \"string\") {\n        message = expected;\n        expected = null;\n      }\n\n      config.current.ignoreGlobalErrors = true;\n      try {\n        block.call(config.current.testEnvironment);\n      } catch (e) {\n        actual = e;\n      }\n      config.current.ignoreGlobalErrors = false;\n\n      if (actual) {\n        // we don't want to validate thrown error\n        if (!expected) {\n          ok = true;\n          // expected is a regexp\n        } else if (QUnit.objectType(expected) === \"regexp\") {\n          ok = expected.test(actual);\n          // expected is a constructor\n        } else if (actual instanceof expected) {\n          ok = true;\n          // expected is a validation function which returns true is validation passed\n        } else if (expected.call({}, actual) === true) {\n          ok = true;\n        }\n\n        QUnit.push(ok, actual, null, message);\n      } else {\n        QUnit.pushFailure(message, null, 'No exception was thrown.');\n      }\n    }\n  };\n\n  /**\n   * @deprecate since 1.8.0\n   * Kept assertion helpers in root for backwards compatibility\n   */\n  extend(QUnit, QUnit.assert);\n\n  /**\n   * @deprecated since 1.9.0\n   * Kept global \"raises()\" for backwards compatibility\n   */\n  QUnit.raises = QUnit.assert.throws;\n\n  /**\n   * @deprecated since 1.0.0, replaced with error pushes since 1.3.0\n   * Kept to avoid TypeErrors for undefined methods.\n   */\n  QUnit.equals = function () {\n    QUnit.push(false, false, false, \"QUnit.equals has been deprecated since 2009 (e88049a0), use QUnit.equal instead\");\n  };\n  QUnit.same = function () {\n    QUnit.push(false, false, false, \"QUnit.same has been deprecated since 2009 (e88049a0), use QUnit.deepEqual instead\");\n  };\n\n// We want access to the constructor's prototype\n  (function () {\n    function F() {\n    }\n\n    F.prototype = QUnit;\n    QUnit = new F();\n    // Make F QUnit's constructor so that we can add to the prototype later\n    QUnit.constructor = F;\n  }());\n\n  /**\n   * Config object: Maintain internal state\n   * Later exposed as QUnit.config\n   * `config` initialized at top of scope\n   */\n  config = {\n    // The queue of tests to run\n    queue: [],\n\n    // block until document ready\n    blocking: true,\n\n    // when enabled, show only failing tests\n    // gets persisted through sessionStorage and can be changed in UI via checkbox\n    hidepassed: false,\n\n    // by default, run previously failed tests first\n    // very useful in combination with \"Hide passed tests\" checked\n    reorder: true,\n\n    // by default, modify document.title when suite is done\n    altertitle: true,\n\n    // when enabled, all tests must call expect()\n    requireExpects: false,\n\n    // add checkboxes that are persisted in the query-string\n    // when enabled, the id is set to `true` as a `QUnit.config` property\n    urlConfig: [\n      {\n        id: \"noglobals\",\n        label: \"Check for Globals\",\n        tooltip: \"Enabling this will test if any test introduces new properties on the `window` object. Stored as query-strings.\"\n      },\n      {\n        id: \"notrycatch\",\n        label: \"No try-catch\",\n        tooltip: \"Enabling this will run tests outside of a try-catch block. Makes debugging exceptions in IE reasonable. Stored as query-strings.\"\n      }\n    ],\n\n    // Set of all modules.\n    modules: {},\n\n    // logging callback queues\n    begin: [],\n    done: [],\n    log: [],\n    testStart: [],\n    testDone: [],\n    moduleStart: [],\n    moduleDone: []\n  };\n\n// Initialize more QUnit.config and QUnit.urlParams\n  (function () {\n    var i,\n        location = window.location || { search: \"\", protocol: \"file:\" },\n        params = location.search.slice(1).split(\"&\"),\n        length = params.length,\n        urlParams = {},\n        current;\n\n    if (params[ 0 ]) {\n      for (i = 0; i < length; i++) {\n        current = params[ i ].split(\"=\");\n        current[ 0 ] = decodeURIComponent(current[ 0 ]);\n        // allow just a key to turn on a flag, e.g., test.html?noglobals\n        current[ 1 ] = current[ 1 ] ? decodeURIComponent(current[ 1 ]) : true;\n        urlParams[ current[ 0 ] ] = current[ 1 ];\n      }\n    }\n\n    QUnit.urlParams = urlParams;\n\n    // String search anywhere in moduleName+testName\n    config.filter = urlParams.filter;\n\n    // Exact match of the module name\n    config.module = urlParams.module;\n\n    config.testNumber = parseInt(urlParams.testNumber, 10) || null;\n\n    // Figure out if we're running the tests from a server or not\n    QUnit.isLocal = location.protocol === \"file:\";\n  }());\n\n// Export global variables, unless an 'exports' object exists,\n// in that case we assume we're in CommonJS (dealt with on the bottom of the script)\n  if (typeof exports === \"undefined\") {\n    extend(window, QUnit);\n\n    // Expose QUnit object\n    window.QUnit = QUnit;\n  }\n\n// Extend QUnit object,\n// these after set here because they should not be exposed as global functions\n  extend(QUnit, {\n    config: config,\n\n    // Initialize the configuration options\n    init: function () {\n      extend(config, {\n        stats: { all: 0, bad: 0 },\n        moduleStats: { all: 0, bad: 0 },\n        started: +new Date(),\n        updateRate: 1000,\n        blocking: false,\n        autostart: true,\n        autorun: false,\n        filter: \"\",\n        queue: [],\n        semaphore: 0\n      });\n\n      var tests, banner, result,\n          qunit = id(\"qunit\");\n\n      if (qunit) {\n        qunit.innerHTML =\n            \"<h1 id='qunit-header'>\" + escapeInnerText(document.title) + \"</h1>\" +\n                \"<h2 id='qunit-banner'></h2>\" +\n                \"<div id='qunit-testrunner-toolbar'></div>\" +\n                \"<h2 id='qunit-userAgent'></h2>\" +\n                \"<ol id='qunit-tests'></ol>\";\n      }\n\n      tests = id(\"qunit-tests\");\n      banner = id(\"qunit-banner\");\n      result = id(\"qunit-testresult\");\n\n      if (tests) {\n        tests.innerHTML = \"\";\n      }\n\n      if (banner) {\n        banner.className = \"\";\n      }\n\n      if (result) {\n        result.parentNode.removeChild(result);\n      }\n\n      if (tests) {\n        result = document.createElement(\"p\");\n        result.id = \"qunit-testresult\";\n        result.className = \"result\";\n        tests.parentNode.insertBefore(result, tests);\n        result.innerHTML = \"Running...<br/>&nbsp;\";\n      }\n    },\n\n    // Resets the test setup. Useful for tests that modify the DOM.\n    reset: function () {\n      var fixture = id(\"qunit-fixture\");\n      if (fixture) {\n        fixture.innerHTML = config.fixture;\n      }\n    },\n\n    // Trigger an event on an element.\n    // @example triggerEvent( document.body, \"click\" );\n    triggerEvent: function (elem, type, event) {\n      if (document.createEvent) {\n        event = document.createEvent(\"MouseEvents\");\n        event.initMouseEvent(type, true, true, elem.ownerDocument.defaultView,\n            0, 0, 0, 0, 0, false, false, false, false, 0, null);\n\n        elem.dispatchEvent(event);\n      } else if (elem.fireEvent) {\n        elem.fireEvent(\"on\" + type);\n      }\n    },\n\n    // Safe object type checking\n    is: function (type, obj) {\n      return QUnit.objectType(obj) == type;\n    },\n\n    objectType: function (obj) {\n      if (typeof obj === \"undefined\") {\n        return \"undefined\";\n        // consider: typeof null === object\n      }\n      if (obj === null) {\n        return \"null\";\n      }\n\n      var type = toString.call(obj).match(/^\\[object\\s(.*)\\]$/)[1] || \"\";\n\n      switch (type) {\n        case \"Number\":\n          if (isNaN(obj)) {\n            return \"nan\";\n          }\n          return \"number\";\n        case \"String\":\n        case \"Boolean\":\n        case \"Array\":\n        case \"Date\":\n        case \"RegExp\":\n        case \"Function\":\n          return type.toLowerCase();\n      }\n      if (typeof obj === \"object\") {\n        return \"object\";\n      }\n      return undefined;\n    },\n\n    push: function (result, actual, expected, message) {\n      if (!config.current) {\n        throw new Error(\"assertion outside test context, was \" + sourceFromStacktrace());\n      }\n\n      var output, source,\n          details = {\n            module: config.current.module,\n            name: config.current.testName,\n            result: result,\n            message: message,\n            actual: actual,\n            expected: expected\n          };\n\n      message = escapeInnerText(message) || ( result ? \"okay\" : \"failed\" );\n      message = \"<span class='test-message'>\" + message + \"</span>\";\n      output = message;\n\n      if (!result) {\n        expected = escapeInnerText(QUnit.jsDump.parse(expected));\n        actual = escapeInnerText(QUnit.jsDump.parse(actual));\n        output += \"<table><tr class='test-expected'><th>Expected: </th><td><pre>\" + expected + \"</pre></td></tr>\";\n\n        if (actual != expected) {\n          output += \"<tr class='test-actual'><th>Result: </th><td><pre>\" + actual + \"</pre></td></tr>\";\n          output += \"<tr class='test-diff'><th>Diff: </th><td><pre>\" + QUnit.diff(expected, actual) + \"</pre></td></tr>\";\n        }\n\n        source = sourceFromStacktrace();\n\n        if (source) {\n          details.source = source;\n          output += \"<tr class='test-source'><th>Source: </th><td><pre>\" + escapeInnerText(source) + \"</pre></td></tr>\";\n        }\n\n        output += \"</table>\";\n      }\n\n      runLoggingCallbacks(\"log\", QUnit, details);\n\n      config.current.assertions.push({\n        result: !!result,\n        message: output\n      });\n    },\n\n    pushFailure: function (message, source, actual) {\n      if (!config.current) {\n        throw new Error(\"pushFailure() assertion outside test context, was \" + sourceFromStacktrace(2));\n      }\n\n      var output,\n          details = {\n            module: config.current.module,\n            name: config.current.testName,\n            result: false,\n            message: message\n          };\n\n      message = escapeInnerText(message) || \"error\";\n      message = \"<span class='test-message'>\" + message + \"</span>\";\n      output = message;\n\n      output += \"<table>\";\n\n      if (actual) {\n        output += \"<tr class='test-actual'><th>Result: </th><td><pre>\" + escapeInnerText(actual) + \"</pre></td></tr>\";\n      }\n\n      if (source) {\n        details.source = source;\n        output += \"<tr class='test-source'><th>Source: </th><td><pre>\" + escapeInnerText(source) + \"</pre></td></tr>\";\n      }\n\n      output += \"</table>\";\n\n      runLoggingCallbacks(\"log\", QUnit, details);\n\n      config.current.assertions.push({\n        result: false,\n        message: output\n      });\n    },\n\n    url: function (params) {\n      params = extend(extend({}, QUnit.urlParams), params);\n      var key,\n          querystring = \"?\";\n\n      for (key in params) {\n        if (!hasOwn.call(params, key)) {\n          continue;\n        }\n        querystring += encodeURIComponent(key) + \"=\" +\n            encodeURIComponent(params[ key ]) + \"&\";\n      }\n      return window.location.pathname + querystring.slice(0, -1);\n    },\n\n    extend: extend,\n    id: id,\n    addEvent: addEvent\n    // load, equiv, jsDump, diff: Attached later\n  });\n\n  /**\n   * @deprecated: Created for backwards compatibility with test runner that set the hook function\n   * into QUnit.{hook}, instead of invoking it and passing the hook function.\n   * QUnit.constructor is set to the empty F() above so that we can add to it's prototype here.\n   * Doing this allows us to tell if the following methods have been overwritten on the actual\n   * QUnit object.\n   */\n  extend(QUnit.constructor.prototype, {\n\n    // Logging callbacks; all receive a single argument with the listed properties\n    // run test/logs.html for any related changes\n    begin: registerLoggingCallback(\"begin\"),\n\n    // done: { failed, passed, total, runtime }\n    done: registerLoggingCallback(\"done\"),\n\n    // log: { result, actual, expected, message }\n    log: registerLoggingCallback(\"log\"),\n\n    // testStart: { name }\n    testStart: registerLoggingCallback(\"testStart\"),\n\n    // testDone: { name, failed, passed, total }\n    testDone: registerLoggingCallback(\"testDone\"),\n\n    // moduleStart: { name }\n    moduleStart: registerLoggingCallback(\"moduleStart\"),\n\n    // moduleDone: { name, failed, passed, total }\n    moduleDone: registerLoggingCallback(\"moduleDone\")\n  });\n\n  if (typeof document === \"undefined\" || document.readyState === \"complete\") {\n    config.autorun = true;\n  }\n\n  QUnit.load = function () {\n    runLoggingCallbacks(\"begin\", QUnit, {});\n\n    // Initialize the config, saving the execution queue\n    var banner, filter, i, label, len, main, ol, toolbar, userAgent, val, urlConfigCheckboxes, moduleFilter,\n        numModules = 0,\n        moduleFilterHtml = \"\",\n        urlConfigHtml = \"\",\n        oldconfig = extend({}, config);\n\n    QUnit.init();\n    extend(config, oldconfig);\n\n    config.blocking = false;\n\n    len = config.urlConfig.length;\n\n    for (i = 0; i < len; i++) {\n      val = config.urlConfig[i];\n      if (typeof val === \"string\") {\n        val = {\n          id: val,\n          label: val,\n          tooltip: \"[no tooltip available]\"\n        };\n      }\n      config[ val.id ] = QUnit.urlParams[ val.id ];\n      urlConfigHtml += \"<input id='qunit-urlconfig-\" + val.id + \"' name='\" + val.id + \"' type='checkbox'\" + ( config[ val.id ] ? \" checked='checked'\" : \"\" ) + \" title='\" + val.tooltip + \"'><label for='qunit-urlconfig-\" + val.id + \"' title='\" + val.tooltip + \"'>\" + val.label + \"</label>\";\n    }\n\n    moduleFilterHtml += \"<label for='qunit-modulefilter'>Module: </label><select id='qunit-modulefilter' name='modulefilter'><option value='' \" + ( config.module === undefined ? \"selected\" : \"\" ) + \">< All Modules ></option>\";\n    for (i in config.modules) {\n      if (config.modules.hasOwnProperty(i)) {\n        numModules += 1;\n        moduleFilterHtml += \"<option value='\" + encodeURIComponent(i) + \"' \" + ( config.module === i ? \"selected\" : \"\" ) + \">\" + i + \"</option>\";\n      }\n    }\n    moduleFilterHtml += \"</select>\";\n\n    // `userAgent` initialized at top of scope\n    userAgent = id(\"qunit-userAgent\");\n    if (userAgent) {\n      userAgent.innerHTML = navigator.userAgent;\n    }\n\n    // `banner` initialized at top of scope\n    banner = id(\"qunit-header\");\n    if (banner) {\n      banner.innerHTML = \"<a href='\" + QUnit.url({ filter: undefined, module: undefined, testNumber: undefined }) + \"'>\" + banner.innerHTML + \"</a> \";\n    }\n\n    // `toolbar` initialized at top of scope\n    toolbar = id(\"qunit-testrunner-toolbar\");\n    if (toolbar) {\n      // `filter` initialized at top of scope\n      filter = document.createElement(\"input\");\n      filter.type = \"checkbox\";\n      filter.id = \"qunit-filter-pass\";\n\n      addEvent(filter, \"click\", function () {\n        var tmp,\n            ol = document.getElementById(\"qunit-tests\");\n\n        if (filter.checked) {\n          ol.className = ol.className + \" hidepass\";\n        } else {\n          tmp = \" \" + ol.className.replace(/[\\n\\t\\r]/g, \" \") + \" \";\n          ol.className = tmp.replace(/ hidepass /, \" \");\n        }\n        if (defined.sessionStorage) {\n          if (filter.checked) {\n            sessionStorage.setItem(\"qunit-filter-passed-tests\", \"true\");\n          } else {\n            sessionStorage.removeItem(\"qunit-filter-passed-tests\");\n          }\n        }\n      });\n\n      if (config.hidepassed || defined.sessionStorage && sessionStorage.getItem(\"qunit-filter-passed-tests\")) {\n        filter.checked = true;\n        // `ol` initialized at top of scope\n        ol = document.getElementById(\"qunit-tests\");\n        ol.className = ol.className + \" hidepass\";\n      }\n      toolbar.appendChild(filter);\n\n      // `label` initialized at top of scope\n      label = document.createElement(\"label\");\n      label.setAttribute(\"for\", \"qunit-filter-pass\");\n      label.setAttribute(\"title\", \"Only show tests and assertons that fail. Stored in sessionStorage.\");\n      label.innerHTML = \"Hide passed tests\";\n      toolbar.appendChild(label);\n\n      urlConfigCheckboxes = document.createElement('span');\n      urlConfigCheckboxes.innerHTML = urlConfigHtml;\n      addEvent(urlConfigCheckboxes, \"change\", function (event) {\n        var params = {};\n        params[ event.target.name ] = event.target.checked ? true : undefined;\n        window.location = QUnit.url(params);\n      });\n      toolbar.appendChild(urlConfigCheckboxes);\n\n      if (numModules > 1) {\n        moduleFilter = document.createElement('span');\n        moduleFilter.setAttribute('id', 'qunit-modulefilter-container');\n        moduleFilter.innerHTML = moduleFilterHtml;\n        addEvent(moduleFilter, \"change\", function () {\n          var selectBox = moduleFilter.getElementsByTagName(\"select\")[0],\n              selectedModule = decodeURIComponent(selectBox.options[selectBox.selectedIndex].value);\n\n          window.location = QUnit.url({ module: ( selectedModule === \"\" ) ? undefined : selectedModule });\n        });\n        toolbar.appendChild(moduleFilter);\n      }\n    }\n\n    // `main` initialized at top of scope\n    main = id(\"qunit-fixture\");\n    if (main) {\n      config.fixture = main.innerHTML;\n    }\n\n    if (config.autostart) {\n      QUnit.start();\n    }\n  };\n\n  addEvent(window, \"load\", QUnit.load);\n\n// `onErrorFnPrev` initialized at top of scope\n// Preserve other handlers\n  onErrorFnPrev = window.onerror;\n\n// Cover uncaught exceptions\n// Returning true will surpress the default browser handler,\n// returning false will let it run.\n  window.onerror = function (error, filePath, linerNr) {\n    var ret = false;\n    if (onErrorFnPrev) {\n      ret = onErrorFnPrev(error, filePath, linerNr);\n    }\n\n    // Treat return value as window.onerror itself does,\n    // Only do our handling if not surpressed.\n    if (ret !== true) {\n      if (QUnit.config.current) {\n        if (QUnit.config.current.ignoreGlobalErrors) {\n          return true;\n        }\n        QUnit.pushFailure(error, filePath + \":\" + linerNr);\n      } else {\n        QUnit.test(\"global failure\", extend(function () {\n          QUnit.pushFailure(error, filePath + \":\" + linerNr);\n        }, { validTest: validTest }));\n      }\n      return false;\n    }\n\n    return ret;\n  };\n\n  function done() {\n    config.autorun = true;\n\n    // Log the last module results\n    if (config.currentModule) {\n      runLoggingCallbacks(\"moduleDone\", QUnit, {\n        name: config.currentModule,\n        failed: config.moduleStats.bad,\n        passed: config.moduleStats.all - config.moduleStats.bad,\n        total: config.moduleStats.all\n      });\n    }\n\n    var i, key,\n        banner = id(\"qunit-banner\"),\n        tests = id(\"qunit-tests\"),\n        runtime = +new Date() - config.started,\n        passed = config.stats.all - config.stats.bad,\n        html = [\n          \"Tests completed in \",\n          runtime,\n          \" milliseconds.<br/>\",\n          \"<span class='passed'>\",\n          passed,\n          \"</span> tests of <span class='total'>\",\n          config.stats.all,\n          \"</span> passed, <span class='failed'>\",\n          config.stats.bad,\n          \"</span> failed.\"\n        ].join(\"\");\n\n    if (banner) {\n      banner.className = ( config.stats.bad ? \"qunit-fail\" : \"qunit-pass\" );\n    }\n\n    if (tests) {\n      id(\"qunit-testresult\").innerHTML = html;\n    }\n\n    if (config.altertitle && typeof document !== \"undefined\" && document.title) {\n      // show ✖ for good, ✔ for bad suite result in title\n      // use escape sequences in case file gets loaded with non-utf-8-charset\n      document.title = [\n        ( config.stats.bad ? \"\\u2716\" : \"\\u2714\" ),\n        document.title.replace(/^[\\u2714\\u2716] /i, \"\")\n      ].join(\" \");\n    }\n\n    // clear own sessionStorage items if all tests passed\n    if (config.reorder && defined.sessionStorage && config.stats.bad === 0) {\n      // `key` & `i` initialized at top of scope\n      for (i = 0; i < sessionStorage.length; i++) {\n        key = sessionStorage.key(i++);\n        if (key.indexOf(\"qunit-test-\") === 0) {\n          sessionStorage.removeItem(key);\n        }\n      }\n    }\n\n    // scroll back to top to show results\n    if (window.scrollTo) {\n      window.scrollTo(0, 0);\n    }\n\n    runLoggingCallbacks(\"done\", QUnit, {\n      failed: config.stats.bad,\n      passed: passed,\n      total: config.stats.all,\n      runtime: runtime\n    });\n  }\n\n  /** @return Boolean: true if this test should be ran */\n  function validTest(test) {\n    var include,\n        filter = config.filter && config.filter.toLowerCase(),\n        module = config.module && config.module.toLowerCase(),\n        fullName = (test.module + \": \" + test.testName).toLowerCase();\n\n    // Internally-generated tests are always valid\n    if (test.callback && test.callback.validTest === validTest) {\n      delete test.callback.validTest;\n      return true;\n    }\n\n    if (config.testNumber) {\n      return test.testNumber === config.testNumber;\n    }\n\n    if (module && ( !test.module || test.module.toLowerCase() !== module )) {\n      return false;\n    }\n\n    if (!filter) {\n      return true;\n    }\n\n    include = filter.charAt(0) !== \"!\";\n    if (!include) {\n      filter = filter.slice(1);\n    }\n\n    // If the filter matches, we need to honour include\n    if (fullName.indexOf(filter) !== -1) {\n      return include;\n    }\n\n    // Otherwise, do the opposite\n    return !include;\n  }\n\n// so far supports only Firefox, Chrome and Opera (buggy), Safari (for real exceptions)\n// Later Safari and IE10 are supposed to support error.stack as well\n// See also https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error/Stack\n  function extractStacktrace(e, offset) {\n    offset = offset === undefined ? 3 : offset;\n\n    var stack, include, i, regex;\n\n    if (e.stacktrace) {\n      // Opera\n      return e.stacktrace.split(\"\\n\")[ offset + 3 ];\n    } else if (e.stack) {\n      // Firefox, Chrome\n      stack = e.stack.split(\"\\n\");\n      if (/^error$/i.test(stack[0])) {\n        stack.shift();\n      }\n      if (fileName) {\n        include = [];\n        for (i = offset; i < stack.length; i++) {\n          if (stack[ i ].indexOf(fileName) != -1) {\n            break;\n          }\n          include.push(stack[ i ]);\n        }\n        if (include.length) {\n          return include.join(\"\\n\");\n        }\n      }\n      return stack[ offset ];\n    } else if (e.sourceURL) {\n      // Safari, PhantomJS\n      // hopefully one day Safari provides actual stacktraces\n      // exclude useless self-reference for generated Error objects\n      if (/qunit.js$/.test(e.sourceURL)) {\n        return;\n      }\n      // for actual exceptions, this is useful\n      return e.sourceURL + \":\" + e.line;\n    }\n  }\n\n  function sourceFromStacktrace(offset) {\n    try {\n      throw new Error();\n    } catch (e) {\n      return extractStacktrace(e, offset);\n    }\n  }\n\n  function escapeInnerText(s) {\n    if (!s) {\n      return \"\";\n    }\n    s = s + \"\";\n    return s.replace(/[\\&<>]/g, function (s) {\n      switch (s) {\n        case \"&\":\n          return \"&amp;\";\n        case \"<\":\n          return \"&lt;\";\n        case \">\":\n          return \"&gt;\";\n        default:\n          return s;\n      }\n    });\n  }\n\n  function synchronize(callback, last) {\n    config.queue.push(callback);\n\n    if (config.autorun && !config.blocking) {\n      process(last);\n    }\n  }\n\n  function process(last) {\n    function next() {\n      process(last);\n    }\n\n    var start = new Date().getTime();\n    config.depth = config.depth ? config.depth + 1 : 1;\n\n    while (config.queue.length && !config.blocking) {\n      if (!defined.setTimeout || config.updateRate <= 0 || ( ( new Date().getTime() - start ) < config.updateRate )) {\n        config.queue.shift()();\n      } else {\n        window.setTimeout(next, 13);\n        break;\n      }\n    }\n    config.depth--;\n    if (last && !config.blocking && !config.queue.length && config.depth === 0) {\n      done();\n    }\n  }\n\n  function saveGlobal() {\n    config.pollution = [];\n\n    if (config.noglobals) {\n      for (var key in window) {\n        // in Opera sometimes DOM element ids show up here, ignore them\n        if (!hasOwn.call(window, key) || /^qunit-test-output/.test(key)) {\n          continue;\n        }\n        config.pollution.push(key);\n      }\n    }\n  }\n\n  function checkPollution(name) {\n    var newGlobals,\n        deletedGlobals,\n        old = config.pollution;\n\n    saveGlobal();\n\n    newGlobals = diff(config.pollution, old);\n    if (newGlobals.length > 0) {\n      QUnit.pushFailure(\"Introduced global variable(s): \" + newGlobals.join(\", \"));\n    }\n\n    deletedGlobals = diff(old, config.pollution);\n    if (deletedGlobals.length > 0) {\n      QUnit.pushFailure(\"Deleted global variable(s): \" + deletedGlobals.join(\", \"));\n    }\n  }\n\n// returns a new Array with the elements that are in a but not in b\n  function diff(a, b) {\n    var i, j,\n        result = a.slice();\n\n    for (i = 0; i < result.length; i++) {\n      for (j = 0; j < b.length; j++) {\n        if (result[i] === b[j]) {\n          result.splice(i, 1);\n          i--;\n          break;\n        }\n      }\n    }\n    return result;\n  }\n\n  function extend(a, b) {\n    for (var prop in b) {\n      if (b[ prop ] === undefined) {\n        delete a[ prop ];\n\n        // Avoid \"Member not found\" error in IE8 caused by setting window.constructor\n      } else if (prop !== \"constructor\" || a !== window) {\n        a[ prop ] = b[ prop ];\n      }\n    }\n\n    return a;\n  }\n\n  function addEvent(elem, type, fn) {\n    if (elem.addEventListener) {\n      elem.addEventListener(type, fn, false);\n    } else if (elem.attachEvent) {\n      elem.attachEvent(\"on\" + type, fn);\n    } else {\n      fn();\n    }\n  }\n\n  function id(name) {\n    return !!( typeof document !== \"undefined\" && document && document.getElementById ) &&\n        document.getElementById(name);\n  }\n\n  function registerLoggingCallback(key) {\n    return function (callback) {\n      config[key].push(callback);\n    };\n  }\n\n// Supports deprecated method of completely overwriting logging callbacks\n  function runLoggingCallbacks(key, scope, args) {\n    //debugger;\n    var i, callbacks;\n    if (QUnit.hasOwnProperty(key)) {\n      QUnit[ key ].call(scope, args);\n    } else {\n      callbacks = config[ key ];\n      for (i = 0; i < callbacks.length; i++) {\n        callbacks[ i ].call(scope, args);\n      }\n    }\n  }\n\n// Test for equality any JavaScript type.\n// Author: Philippe Rathé <prathe@gmail.com>\n  QUnit.equiv = (function () {\n\n    // Call the o related callback with the given arguments.\n    function bindCallbacks(o, callbacks, args) {\n      var prop = QUnit.objectType(o);\n      if (prop) {\n        if (QUnit.objectType(callbacks[ prop ]) === \"function\") {\n          return callbacks[ prop ].apply(callbacks, args);\n        } else {\n          return callbacks[ prop ]; // or undefined\n        }\n      }\n    }\n\n    // the real equiv function\n    var innerEquiv,\n    // stack to decide between skip/abort functions\n        callers = [],\n    // stack to avoiding loops from circular referencing\n        parents = [],\n\n        getProto = Object.getPrototypeOf || function (obj) {\n          return obj.__proto__;\n        },\n        callbacks = (function () {\n\n          // for string, boolean, number and null\n          function useStrictEquality(b, a) {\n            if (b instanceof a.constructor || a instanceof b.constructor) {\n              // to catch short annotaion VS 'new' annotation of a\n              // declaration\n              // e.g. var i = 1;\n              // var j = new Number(1);\n              return a == b;\n            } else {\n              return a === b;\n            }\n          }\n\n          return {\n            \"string\": useStrictEquality,\n            \"boolean\": useStrictEquality,\n            \"number\": useStrictEquality,\n            \"null\": useStrictEquality,\n            \"undefined\": useStrictEquality,\n\n            \"nan\": function (b) {\n              return isNaN(b);\n            },\n\n            \"date\": function (b, a) {\n              return QUnit.objectType(b) === \"date\" && a.valueOf() === b.valueOf();\n            },\n\n            \"regexp\": function (b, a) {\n              return QUnit.objectType(b) === \"regexp\" &&\n                // the regex itself\n                  a.source === b.source &&\n                // and its modifers\n                  a.global === b.global &&\n                // (gmi) ...\n                  a.ignoreCase === b.ignoreCase &&\n                  a.multiline === b.multiline &&\n                  a.sticky === b.sticky;\n            },\n\n            // - skip when the property is a method of an instance (OOP)\n            // - abort otherwise,\n            // initial === would have catch identical references anyway\n            \"function\": function () {\n              var caller = callers[callers.length - 1];\n              return caller !== Object && typeof caller !== \"undefined\";\n            },\n\n            \"array\": function (b, a) {\n              var i, j, len, loop;\n\n              // b could be an object literal here\n              if (QUnit.objectType(b) !== \"array\") {\n                return false;\n              }\n\n              len = a.length;\n              if (len !== b.length) {\n                // safe and faster\n                return false;\n              }\n\n              // track reference to avoid circular references\n              parents.push(a);\n              for (i = 0; i < len; i++) {\n                loop = false;\n                for (j = 0; j < parents.length; j++) {\n                  if (parents[j] === a[i]) {\n                    loop = true;// dont rewalk array\n                  }\n                }\n                if (!loop && !innerEquiv(a[i], b[i])) {\n                  parents.pop();\n                  return false;\n                }\n              }\n              parents.pop();\n              return true;\n            },\n\n            \"object\": function (b, a) {\n              var i, j, loop,\n              // Default to true\n                  eq = true,\n                  aProperties = [],\n                  bProperties = [];\n\n              // comparing constructors is more strict than using\n              // instanceof\n              if (a.constructor !== b.constructor) {\n                // Allow objects with no prototype to be equivalent to\n                // objects with Object as their constructor.\n                if (!(( getProto(a) === null && getProto(b) === Object.prototype ) ||\n                    ( getProto(b) === null && getProto(a) === Object.prototype ) )) {\n                  return false;\n                }\n              }\n\n              // stack constructor before traversing properties\n              callers.push(a.constructor);\n              // track reference to avoid circular references\n              parents.push(a);\n\n              for (i in a) { // be strict: don't ensures hasOwnProperty\n                // and go deep\n                loop = false;\n                for (j = 0; j < parents.length; j++) {\n                  if (parents[j] === a[i]) {\n                    // don't go down the same path twice\n                    loop = true;\n                  }\n                }\n                aProperties.push(i); // collect a's properties\n\n                if (!loop && !innerEquiv(a[i], b[i])) {\n                  eq = false;\n                  break;\n                }\n              }\n\n              callers.pop(); // unstack, we are done\n              parents.pop();\n\n              for (i in b) {\n                bProperties.push(i); // collect b's properties\n              }\n\n              // Ensures identical properties name\n              return eq && innerEquiv(aProperties.sort(), bProperties.sort());\n            }\n          };\n        }());\n\n    innerEquiv = function () { // can take multiple arguments\n      var args = [].slice.apply(arguments);\n      if (args.length < 2) {\n        return true; // end transition\n      }\n\n      return (function (a, b) {\n        if (a === b) {\n          return true; // catch the most you can\n        } else if (a === null || b === null || typeof a === \"undefined\" ||\n            typeof b === \"undefined\" ||\n            QUnit.objectType(a) !== QUnit.objectType(b)) {\n          return false; // don't lose time with error prone cases\n        } else {\n          return bindCallbacks(a, callbacks, [ b, a ]);\n        }\n\n        // apply transition with (1..n) arguments\n      }(args[0], args[1]) && arguments.callee.apply(this, args.splice(1, args.length - 1)) );\n    };\n\n    return innerEquiv;\n  }());\n\n  /**\n   * jsDump Copyright (c) 2008 Ariel Flesler - aflesler(at)gmail(dot)com |\n   * http://flesler.blogspot.com Licensed under BSD\n   * (http://www.opensource.org/licenses/bsd-license.php) Date: 5/15/2008\n   *\n   * @projectDescription Advanced and extensible data dumping for Javascript.\n   * @version 1.0.0\n   * @author Ariel Flesler\n   * @link {http://flesler.blogspot.com/2008/05/jsdump-pretty-dump-of-any-javascript.html}\n   */\n  QUnit.jsDump = (function () {\n    function quote(str) {\n      return '\"' + str.toString().replace(/\"/g, '\\\\\"') + '\"';\n    }\n\n    function literal(o) {\n      return o + \"\";\n    }\n\n    function join(pre, arr, post) {\n      var s = jsDump.separator(),\n          base = jsDump.indent(),\n          inner = jsDump.indent(1);\n      if (arr.join) {\n        arr = arr.join(\",\" + s + inner);\n      }\n      if (!arr) {\n        return pre + post;\n      }\n      return [ pre, inner + arr, base + post ].join(s);\n    }\n\n    function array(arr, stack) {\n      var i = arr.length, ret = new Array(i);\n      this.up();\n      while (i--) {\n        ret[i] = this.parse(arr[i], undefined, stack);\n      }\n      this.down();\n      return join(\"[\", ret, \"]\");\n    }\n\n    var reName = /^function (\\w+)/,\n        jsDump = {\n          parse: function (obj, type, stack) { //type is used mostly internally, you can fix a (custom)type in advance\n            stack = stack || [ ];\n            var inStack, res,\n                parser = this.parsers[ type || this.typeOf(obj) ];\n\n            type = typeof parser;\n            inStack = inArray(obj, stack);\n\n            if (inStack != -1) {\n              return \"recursion(\" + (inStack - stack.length) + \")\";\n            }\n            //else\n            if (type == \"function\") {\n              stack.push(obj);\n              res = parser.call(this, obj, stack);\n              stack.pop();\n              return res;\n            }\n            // else\n            return ( type == \"string\" ) ? parser : this.parsers.error;\n          },\n          typeOf: function (obj) {\n            var type;\n            if (obj === null) {\n              type = \"null\";\n            } else if (typeof obj === \"undefined\") {\n              type = \"undefined\";\n            } else if (QUnit.is(\"regexp\", obj)) {\n              type = \"regexp\";\n            } else if (QUnit.is(\"date\", obj)) {\n              type = \"date\";\n            } else if (QUnit.is(\"function\", obj)) {\n              type = \"function\";\n            } else if (typeof obj.setInterval !== undefined && typeof obj.document !== \"undefined\" && typeof obj.nodeType === \"undefined\") {\n              type = \"window\";\n            } else if (obj.nodeType === 9) {\n              type = \"document\";\n            } else if (obj.nodeType) {\n              type = \"node\";\n            } else if (\n            // native arrays\n                toString.call(obj) === \"[object Array]\" ||\n                  // NodeList objects\n                    ( typeof obj.length === \"number\" && typeof obj.item !== \"undefined\" && ( obj.length ? obj.item(0) === obj[0] : ( obj.item(0) === null && typeof obj[0] === \"undefined\" ) ) )\n                ) {\n              type = \"array\";\n            } else {\n              type = typeof obj;\n            }\n            return type;\n          },\n          separator: function () {\n            return this.multiline ? this.HTML ? \"<br />\" : \"\\n\" : this.HTML ? \"&nbsp;\" : \" \";\n          },\n          indent: function (extra) {// extra can be a number, shortcut for increasing-calling-decreasing\n            if (!this.multiline) {\n              return \"\";\n            }\n            var chr = this.indentChar;\n            if (this.HTML) {\n              chr = chr.replace(/\\t/g, \"   \").replace(/ /g, \"&nbsp;\");\n            }\n            return new Array(this._depth_ + (extra || 0)).join(chr);\n          },\n          up: function (a) {\n            this._depth_ += a || 1;\n          },\n          down: function (a) {\n            this._depth_ -= a || 1;\n          },\n          setParser: function (name, parser) {\n            this.parsers[name] = parser;\n          },\n          // The next 3 are exposed so you can use them\n          quote: quote,\n          literal: literal,\n          join: join,\n          //\n          _depth_: 1,\n          // This is the list of parsers, to modify them, use jsDump.setParser\n          parsers: {\n            window: \"[Window]\",\n            document: \"[Document]\",\n            error: \"[ERROR]\", //when no parser is found, shouldn\"t happen\n            unknown: \"[Unknown]\",\n            \"null\": \"null\",\n            \"undefined\": \"undefined\",\n            \"function\": function (fn) {\n              var ret = \"function\",\n                  name = \"name\" in fn ? fn.name : (reName.exec(fn) || [])[1];//functions never have name in IE\n\n              if (name) {\n                ret += \" \" + name;\n              }\n              ret += \"( \";\n\n              ret = [ ret, QUnit.jsDump.parse(fn, \"functionArgs\"), \"){\" ].join(\"\");\n              return join(ret, QUnit.jsDump.parse(fn, \"functionCode\"), \"}\");\n            },\n            array: array,\n            nodelist: array,\n            \"arguments\": array,\n            object: function (map, stack) {\n              var ret = [ ], keys, key, val, i;\n              QUnit.jsDump.up();\n              if (Object.keys) {\n                keys = Object.keys(map);\n              } else {\n                keys = [];\n                for (key in map) {\n                  keys.push(key);\n                }\n              }\n              keys.sort();\n              for (i = 0; i < keys.length; i++) {\n                key = keys[ i ];\n                val = map[ key ];\n                ret.push(QUnit.jsDump.parse(key, \"key\") + \": \" + QUnit.jsDump.parse(val, undefined, stack));\n              }\n              QUnit.jsDump.down();\n              return join(\"{\", ret, \"}\");\n            },\n            node: function (node) {\n              var a, val,\n                  open = QUnit.jsDump.HTML ? \"&lt;\" : \"<\",\n                  close = QUnit.jsDump.HTML ? \"&gt;\" : \">\",\n                  tag = node.nodeName.toLowerCase(),\n                  ret = open + tag;\n\n              for (a in QUnit.jsDump.DOMAttrs) {\n                val = node[ QUnit.jsDump.DOMAttrs[a] ];\n                if (val) {\n                  ret += \" \" + a + \"=\" + QUnit.jsDump.parse(val, \"attribute\");\n                }\n              }\n              return ret + close + open + \"/\" + tag + close;\n            },\n            functionArgs: function (fn) {//function calls it internally, it's the arguments part of the function\n              var args,\n                  l = fn.length;\n\n              if (!l) {\n                return \"\";\n              }\n\n              args = new Array(l);\n              while (l--) {\n                args[l] = String.fromCharCode(97 + l);//97 is 'a'\n              }\n              return \" \" + args.join(\", \") + \" \";\n            },\n            key: quote, //object calls it internally, the key part of an item in a map\n            functionCode: \"[code]\", //function calls it internally, it's the content of the function\n            attribute: quote, //node calls it internally, it's an html attribute value\n            string: quote,\n            date: quote,\n            regexp: literal, //regex\n            number: literal,\n            \"boolean\": literal\n          },\n          DOMAttrs: {\n            //attributes to dump from nodes, name=>realName\n            id: \"id\",\n            name: \"name\",\n            \"class\": \"className\"\n          },\n          HTML: false,//if true, entities are escaped ( <, >, \\t, space and \\n )\n          indentChar: \"  \",//indentation unit\n          multiline: true //if true, items in a collection, are separated by a \\n, else just a space.\n        };\n\n    return jsDump;\n  }());\n\n// from Sizzle.js\n  function getText(elems) {\n    var i, elem,\n        ret = \"\";\n\n    for (i = 0; elems[i]; i++) {\n      elem = elems[i];\n\n      // Get the text from text nodes and CDATA nodes\n      if (elem.nodeType === 3 || elem.nodeType === 4) {\n        ret += elem.nodeValue;\n\n        // Traverse everything else, except comment nodes\n      } else if (elem.nodeType !== 8) {\n        ret += getText(elem.childNodes);\n      }\n    }\n\n    return ret;\n  }\n\n// from jquery.js\n  function inArray(elem, array) {\n    if (array.indexOf) {\n      return array.indexOf(elem);\n    }\n\n    for (var i = 0, length = array.length; i < length; i++) {\n      if (array[ i ] === elem) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  /*\n   * Javascript Diff Algorithm\n   *  By John Resig (http://ejohn.org/)\n   *  Modified by Chu Alan \"sprite\"\n   *\n   * Released under the MIT license.\n   *\n   * More Info:\n   *  http://ejohn.org/projects/javascript-diff-algorithm/\n   *\n   * Usage: QUnit.diff(expected, actual)\n   *\n   * QUnit.diff( \"the quick brown fox jumped over\", \"the quick fox jumps over\" ) == \"the  quick <del>brown </del> fox <del>jumped </del><ins>jumps </ins> over\"\n   */\n  QUnit.diff = (function () {\n    function diff(o, n) {\n      var i,\n          ns = {},\n          os = {};\n\n      for (i = 0; i < n.length; i++) {\n        if (ns[ n[i] ] == null) {\n          ns[ n[i] ] = {\n            rows: [],\n            o: null\n          };\n        }\n        ns[ n[i] ].rows.push(i);\n      }\n\n      for (i = 0; i < o.length; i++) {\n        if (os[ o[i] ] == null) {\n          os[ o[i] ] = {\n            rows: [],\n            n: null\n          };\n        }\n        os[ o[i] ].rows.push(i);\n      }\n\n      for (i in ns) {\n        if (!hasOwn.call(ns, i)) {\n          continue;\n        }\n        if (ns[i].rows.length == 1 && typeof os[i] != \"undefined\" && os[i].rows.length == 1) {\n          n[ ns[i].rows[0] ] = {\n            text: n[ ns[i].rows[0] ],\n            row: os[i].rows[0]\n          };\n          o[ os[i].rows[0] ] = {\n            text: o[ os[i].rows[0] ],\n            row: ns[i].rows[0]\n          };\n        }\n      }\n\n      for (i = 0; i < n.length - 1; i++) {\n        if (n[i].text != null && n[ i + 1 ].text == null && n[i].row + 1 < o.length && o[ n[i].row + 1 ].text == null &&\n            n[ i + 1 ] == o[ n[i].row + 1 ]) {\n\n          n[ i + 1 ] = {\n            text: n[ i + 1 ],\n            row: n[i].row + 1\n          };\n          o[ n[i].row + 1 ] = {\n            text: o[ n[i].row + 1 ],\n            row: i + 1\n          };\n        }\n      }\n\n      for (i = n.length - 1; i > 0; i--) {\n        if (n[i].text != null && n[ i - 1 ].text == null && n[i].row > 0 && o[ n[i].row - 1 ].text == null &&\n            n[ i - 1 ] == o[ n[i].row - 1 ]) {\n\n          n[ i - 1 ] = {\n            text: n[ i - 1 ],\n            row: n[i].row - 1\n          };\n          o[ n[i].row - 1 ] = {\n            text: o[ n[i].row - 1 ],\n            row: i - 1\n          };\n        }\n      }\n\n      return {\n        o: o,\n        n: n\n      };\n    }\n\n    return function (o, n) {\n      o = o.replace(/\\s+$/, \"\");\n      n = n.replace(/\\s+$/, \"\");\n\n      var i, pre,\n          str = \"\",\n          out = diff(o === \"\" ? [] : o.split(/\\s+/), n === \"\" ? [] : n.split(/\\s+/)),\n          oSpace = o.match(/\\s+/g),\n          nSpace = n.match(/\\s+/g);\n\n      if (oSpace == null) {\n        oSpace = [ \" \" ];\n      }\n      else {\n        oSpace.push(\" \");\n      }\n\n      if (nSpace == null) {\n        nSpace = [ \" \" ];\n      }\n      else {\n        nSpace.push(\" \");\n      }\n\n      if (out.n.length === 0) {\n        for (i = 0; i < out.o.length; i++) {\n          str += \"<del>\" + out.o[i] + oSpace[i] + \"</del>\";\n        }\n      }\n      else {\n        if (out.n[0].text == null) {\n          for (n = 0; n < out.o.length && out.o[n].text == null; n++) {\n            str += \"<del>\" + out.o[n] + oSpace[n] + \"</del>\";\n          }\n        }\n\n        for (i = 0; i < out.n.length; i++) {\n          if (out.n[i].text == null) {\n            str += \"<ins>\" + out.n[i] + nSpace[i] + \"</ins>\";\n          }\n          else {\n            // `pre` initialized at top of scope\n            pre = \"\";\n\n            for (n = out.n[i].row + 1; n < out.o.length && out.o[n].text == null; n++) {\n              pre += \"<del>\" + out.o[n] + oSpace[n] + \"</del>\";\n            }\n            str += \" \" + out.n[i].text + nSpace[i] + pre;\n          }\n        }\n      }\n\n      return str;\n    };\n  }());\n\n// for CommonJS enviroments, export everything\n  if (typeof exports !== \"undefined\") {\n    extend(exports, QUnit);\n  }\n\n// get at whatever the global object is, like window in browsers\n}());\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/core_plugins/console/public/tests/webpackShims/qunit-1.10.0.js\n// module id = 3147\n// module chunks = 2","// removed by extract-text-webpack-plugin\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/core_plugins/console/public/tests/webpackShims/qunit-1.10.0.css\n// module id = 3148\n// module chunks = 2","'use strict';\n\nvar _es = require('../../src/es');\n\nvar _window$QUnit = window.QUnit,\n    test = _window$QUnit.test,\n    _module = _window$QUnit.module,\n    equal = _window$QUnit.equal;\n\n\nvar APPLICATION_JSON = 'application/json';\n\n_module('Content type');\n\ntest('body', function () {\n  var contentType = (0, _es.getContentType)([JSON.stringify({\n    foo: 'baz'\n  }), JSON.stringify({\n    foo: 'bar'\n  })].join('\\n'));\n\n  equal(contentType, APPLICATION_JSON);\n});\n\ntest('no body', function () {\n  var contentType = (0, _es.getContentType)('');\n\n  equal(contentType, undefined);\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/core_plugins/console/public/tests/src/content_type.js\n// module id = 3149\n// module chunks = 2","'use strict';\n\nvar _ = require('lodash');\nvar utils = require('../../src/utils');\nvar collapsingTests = require('raw-loader!./utils_string_collapsing.txt');\nvar expandingTests = require('raw-loader!./utils_string_expanding.txt');\n\nvar _window$QUnit = window.QUnit,\n    test = _window$QUnit.test,\n    _module = _window$QUnit.module,\n    deepEqual = _window$QUnit.deepEqual;\n\n\n_module(\"Utils class\");\n\n_.each(collapsingTests.split(/^=+$/m), function (fixture) {\n  if (fixture.trim() == \"\") {\n    return;\n  }\n  fixture = fixture.split(/^-+$/m);\n  var name = fixture[0].trim(),\n      expanded = fixture[1].trim(),\n      collapsed = fixture[2].trim();\n\n  test(\"Literal collapse - \" + name, function () {\n    deepEqual(utils.collapseLiteralStrings(expanded), collapsed);\n  });\n});\n\n_.each(expandingTests.split(/^=+$/m), function (fixture) {\n  if (fixture.trim() == \"\") {\n    return;\n  }\n  fixture = fixture.split(/^-+$/m);\n  var name = fixture[0].trim(),\n      collapsed = fixture[1].trim(),\n      expanded = fixture[2].trim();\n\n  test(\"Literal expand - \" + name, function () {\n    deepEqual(utils.expandLiteralStrings(collapsed), expanded);\n  });\n\n  test(\"extract deprecation messages\", function () {\n    deepEqual(utils.extractDeprecationMessages('299 Elasticsearch-6.0.0-alpha1-SNAPSHOT-abcdef1 \"this is a warning\" \"Mon, 27 Feb 2017 14:52:14 GMT\"'), ['#! Deprecation: this is a warning']);\n    deepEqual(utils.extractDeprecationMessages('299 Elasticsearch-6.0.0-alpha1-SNAPSHOT-abcdef1 \"this is a warning\" \"Mon, 27 Feb 2017 14:52:14 GMT\", 299 Elasticsearch-6.0.0-alpha1-SNAPSHOT-abcdef1 \"this is a second warning\" \"Mon, 27 Feb 2017 14:52:14 GMT\"'), ['#! Deprecation: this is a warning', '#! Deprecation: this is a second warning']);\n    deepEqual(utils.extractDeprecationMessages('299 Elasticsearch-6.0.0-alpha1-SNAPSHOT-abcdef1 \"this is a warning, and it includes a comma\" \"Mon, 27 Feb 2017 14:52:14 GMT\"'), ['#! Deprecation: this is a warning, and it includes a comma']);\n    deepEqual(utils.extractDeprecationMessages('299 Elasticsearch-6.0.0-alpha1-SNAPSHOT-abcdef1 \"this is a warning, and it includes an escaped backslash \\\\\\\\ and a pair of \\\\\\\"escaped quotes\\\\\\\"\" \"Mon, 27 Feb 2017 14:52:14 GMT\"'), ['#! Deprecation: this is a warning, and it includes an escaped backslash \\\\ and a pair of \"escaped quotes\"']);\n  });\n\n  test(\"unescape\", function () {\n    deepEqual(utils.unescape('escaped backslash \\\\\\\\'), 'escaped backslash \\\\');\n    deepEqual(utils.unescape('a pair of \\\\\\\"escaped quotes\\\\\\\"'), 'a pair of \"escaped quotes\"');\n    deepEqual(utils.unescape('escaped quotes do not have to come in pairs: \\\\\\\"'), 'escaped quotes do not have to come in pairs: \"');\n  });\n\n  test(\"split on unquoted comma followed by space\", function () {\n    deepEqual(utils.splitOnUnquotedCommaSpace('a, b'), ['a', 'b']);\n    deepEqual(utils.splitOnUnquotedCommaSpace('a,b, c'), ['a,b', 'c']);\n    deepEqual(utils.splitOnUnquotedCommaSpace('\"a, b\"'), ['\"a, b\"']);\n    deepEqual(utils.splitOnUnquotedCommaSpace('\"a, b\", c'), ['\"a, b\"', 'c']);\n    deepEqual(utils.splitOnUnquotedCommaSpace('\"a, b\\\\\", c\"'), ['\"a, b\\\\\", c\"']);\n    deepEqual(utils.splitOnUnquotedCommaSpace(', a, b'), ['', 'a', 'b']);\n    deepEqual(utils.splitOnUnquotedCommaSpace('a, b, '), ['a', 'b', '']);\n    deepEqual(utils.splitOnUnquotedCommaSpace('\\\\\"a, b\", \"c, d\\\\\", e\", f\"'), ['\\\\\"a', 'b\", \"c', 'd\\\\\"', 'e\", f\"']);\n  });\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/core_plugins/console/public/tests/src/utils_tests.js\n// module id = 3150\n// module chunks = 2","module.exports = \"==========\\nString only 1\\n-------------------------------------\\n\\\"\\\"\\\" hello\\nto you \\\"\\\"\\\"\\n-------------------------------------\\n\\\" hello\\\\nto you \\\"\\n==========\\nString only 2\\n-------------------------------------\\n\\\"\\\"\\\" \\nstartning with new lines and ending as well\\n \\\"\\\"\\\"\\n-------------------------------------\\n\\\"startning with new lines and ending as well\\\"\\n==========\\nStrings in requests\\n-------------------------------------\\n{\\n  \\\"f\\\": { \\\"somefield\\\" : \\\"\\\"\\\"\\ntest\\ntest2\\n\\\"\\\"\\\" },\\n  \\\"g\\\": { \\\"script\\\" : \\\"\\\"\\\"second + \\\"\\\\\\\";\\\"\\\"\\\" },\\n  \\\"h\\\": 1,\\n  \\\"script\\\": \\\"a + 2\\\"\\n}\\n-------------------------------------\\n{\\n  \\\"f\\\": { \\\"somefield\\\" : \\\"test\\\\ntest2\\\" },\\n  \\\"g\\\": { \\\"script\\\" : \\\"second + \\\\\\\"\\\\\\\\\\\\\\\";\\\" },\\n  \\\"h\\\": 1,\\n  \\\"script\\\": \\\"a + 2\\\"\\n}\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/raw-loader!./src/core_plugins/console/public/tests/src/utils_string_collapsing.txt\n// module id = 3151\n// module chunks = 2","module.exports = \"==========\\nScripts in requests\\n-------------------------------------\\n{\\n  \\\"f\\\": { \\\"script\\\" : { \\\"inline\\\": \\\"test\\\\ntest\\\\\\\\2\\\" } },\\n  \\\"g\\\": { \\\"script\\\" : \\\"second + \\\\\\\"\\\\\\\\\\\\\\\";\\\" },\\n  \\\"f\\\": \\\"short with \\\\\\\\\\\",\\n  \\\"h\\\": 1,\\n  \\\"script\\\": \\\"a + 2\\\"\\n}\\n-------------------------------------\\n{\\n  \\\"f\\\": { \\\"script\\\" : { \\\"inline\\\": \\\"\\\"\\\"\\ntest\\ntest\\\\2\\n\\\"\\\"\\\" } },\\n  \\\"g\\\": { \\\"script\\\" : \\\"\\\"\\\"second + \\\"\\\\\\\";\\\"\\\"\\\" },\\n  \\\"f\\\": \\\"short with \\\\\\\\\\\",\\n  \\\"h\\\": 1,\\n  \\\"script\\\": \\\"a + 2\\\"\\n}\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/raw-loader!./src/core_plugins/console/public/tests/src/utils_string_expanding.txt\n// module id = 3152\n// module chunks = 2","'use strict';\n\nvar _ = require('lodash');\nvar url_pattern_matcher = require('../../src/autocomplete/url_pattern_matcher');\nvar autocomplete_engine = require('../../src/autocomplete/engine');\n\nvar _window$QUnit = window.QUnit,\n    test = _window$QUnit.test,\n    _module = _window$QUnit.module,\n    deepEqual = _window$QUnit.deepEqual;\n\n\n_module(\"Url autocomplete\");\n\nfunction patterns_test(name, endpoints, tokenPath, expectedContext, globalUrlComponentFactories) {\n\n  test(name, function () {\n    var patternMatcher = new url_pattern_matcher.UrlPatternMatcher(globalUrlComponentFactories);\n    _.each(endpoints, function (e, id) {\n      e.id = id;\n      _.each(e.patterns, function (p) {\n        patternMatcher.addEndpoint(p, e);\n      });\n    });\n    if (typeof tokenPath === \"string\") {\n      if (tokenPath[tokenPath.length - 1] == \"$\") {\n        tokenPath = tokenPath.substr(0, tokenPath.length - 1) + \"/\" + url_pattern_matcher.URL_PATH_END_MARKER;\n      }\n      tokenPath = _.map(tokenPath.split(\"/\"), function (p) {\n        p = p.split(\",\");\n        if (p.length === 1) {\n          return p[0];\n        }\n        return p;\n      });\n    }\n\n    if (expectedContext.autoCompleteSet) {\n      expectedContext.autoCompleteSet = _.map(expectedContext.autoCompleteSet, function (t) {\n        if (_.isString(t)) {\n          t = { name: t };\n        }\n        return t;\n      });\n      expectedContext.autoCompleteSet = _.sortBy(expectedContext.autoCompleteSet, 'name');\n    }\n\n    var context = {};\n    if (expectedContext.method) {\n      context.method = expectedContext.method;\n    }\n    autocomplete_engine.populateContext(tokenPath, context, null, expectedContext.autoCompleteSet, patternMatcher.getTopLevelComponents());\n\n    // override context to just check on id\n    if (context.endpoint) {\n      context.endpoint = context.endpoint.id;\n    }\n\n    if (context.autoCompleteSet) {\n      context.autoCompleteSet = _.sortBy(context.autoCompleteSet, 'name');\n    }\n\n    deepEqual(context, expectedContext);\n  });\n}\n\nfunction t(name, meta) {\n  if (meta) {\n    return { name: name, meta: meta };\n  }\n  return name;\n}\n\n(function () {\n  var endpoints = {\n    \"1\": {\n      patterns: [\"a/b\"]\n    }\n  };\n  patterns_test(\"simple single path - completion\", endpoints, \"a/b$\", { endpoint: \"1\" });\n\n  patterns_test(\"simple single path - completion, with auto complete\", endpoints, \"a/b\", { autoCompleteSet: [] });\n\n  patterns_test(\"simple single path - partial, without auto complete\", endpoints, \"a\", {});\n\n  patterns_test(\"simple single path - partial, with auto complete\", endpoints, \"a\", { autoCompleteSet: [\"b\"] });\n\n  patterns_test(\"simple single path - partial, with auto complete\", endpoints, [], { autoCompleteSet: [\"a/b\"] });\n\n  patterns_test(\"simple single path - different path\", endpoints, \"a/c\", {});\n})();\n\n(function () {\n  var endpoints = {\n    \"1\": {\n      patterns: [\"a/b\", \"a/b/{p}\"]\n    },\n    \"2\": {\n      patterns: [\"a/c\"]\n    }\n  };\n  patterns_test(\"shared path  - completion 1\", endpoints, \"a/b$\", { endpoint: \"1\" });\n\n  patterns_test(\"shared path  - completion 2\", endpoints, \"a/c$\", { endpoint: \"2\" });\n\n  patterns_test(\"shared path  - completion 1 with param\", endpoints, \"a/b/v$\", { endpoint: \"1\", p: \"v\" });\n\n  patterns_test(\"shared path - partial, with auto complete\", endpoints, \"a\", { autoCompleteSet: [\"b\", \"c\"] });\n\n  patterns_test(\"shared path - partial, with auto complete of param, no options\", endpoints, \"a/b\", { autoCompleteSet: [] });\n\n  patterns_test(\"shared path - partial, without auto complete\", endpoints, \"a\", {});\n\n  patterns_test(\"shared path - different path - with auto complete\", endpoints, \"a/e\", { autoCompleteSet: [] });\n\n  patterns_test(\"shared path - different path - without auto complete\", endpoints, \"a/e\", {});\n})();\n\n(function () {\n  var endpoints = {\n    \"1\": {\n      patterns: [\"a/{p}\"],\n      url_components: {\n        p: [\"a\", \"b\"]\n      }\n    },\n    \"2\": {\n      patterns: [\"a/c\"]\n    }\n  };\n  patterns_test(\"option testing - completion 1\", endpoints, \"a/a$\", { endpoint: \"1\", p: [\"a\"] });\n\n  patterns_test(\"option testing - completion 2\", endpoints, \"a/b$\", { endpoint: \"1\", p: [\"b\"] });\n\n  patterns_test(\"option testing - completion 3\", endpoints, \"a/b,a$\", { endpoint: \"1\", p: [\"b\", \"a\"] });\n\n  patterns_test(\"option testing - completion 4\", endpoints, \"a/c$\", { endpoint: \"2\" });\n\n  patterns_test(\"option testing  - completion 5\", endpoints, \"a/d$\", {});\n\n  patterns_test(\"option testing - partial, with auto complete\", endpoints, \"a\", { autoCompleteSet: [t(\"a\", \"p\"), t(\"b\", \"p\"), \"c\"] });\n\n  patterns_test(\"option testing - partial, without auto complete\", endpoints, \"a\", {});\n\n  patterns_test(\"option testing - different path - with auto complete\", endpoints, \"a/e\", { autoCompleteSet: [] });\n})();\n\n(function () {\n  var endpoints = {\n    \"1\": {\n      patterns: [\"a/{p}\"],\n      url_components: {\n        p: [\"a\", \"b\"]\n      }\n    },\n    \"2\": {\n      patterns: [\"b/{p}\"]\n    },\n    \"3\": {\n      patterns: [\"b/{l}/c\"],\n      url_components: {\n        l: {\n          type: \"list\",\n          list: [\"la\", \"lb\"],\n          allow_non_valid: true\n        }\n      }\n    }\n  };\n  var globalFactories = {\n    \"p\": function p(name, parent) {\n      return new autocomplete_engine.ListComponent(name, [\"g1\", \"g2\"], parent);\n    }\n  };\n\n  patterns_test(\"global parameters testing - completion 1\", endpoints, \"a/a$\", { endpoint: \"1\", p: [\"a\"] }, globalFactories);\n\n  patterns_test(\"global parameters testing - completion 2\", endpoints, \"b/g1$\", { endpoint: \"2\", p: [\"g1\"] }, globalFactories);\n\n  patterns_test(\"global parameters testing - partial, with auto complete\", endpoints, \"a\", { autoCompleteSet: [t(\"a\", \"p\"), t(\"b\", \"p\")] }, globalFactories);\n\n  patterns_test(\"global parameters testing - partial, with auto complete 2\", endpoints, \"b\", { autoCompleteSet: [t(\"g1\", \"p\"), t(\"g2\", \"p\"), t(\"la\", \"l\"), t(\"lb\", \"l\")] }, globalFactories);\n\n  patterns_test(\"Non valid token acceptance - partial, with auto complete 1\", endpoints, \"b/la\", { autoCompleteSet: [\"c\"], \"l\": [\"la\"] }, globalFactories);\n  patterns_test(\"Non valid token acceptance - partial, with auto complete 2\", endpoints, \"b/non_valid\", { autoCompleteSet: [\"c\"], \"l\": [\"non_valid\"] }, globalFactories);\n})();\n\n(function () {\n  var endpoints = {\n    \"1\": {\n      patterns: [\"a/b/{p}/c/e\"]\n    }\n  };\n  patterns_test(\"look ahead - autocomplete before param 1\", endpoints, \"a\", { autoCompleteSet: [\"b\"] });\n\n  patterns_test(\"look ahead - autocomplete before param 2\", endpoints, [], { autoCompleteSet: [\"a/b\"] });\n\n  patterns_test(\"look ahead - autocomplete after param 1\", endpoints, \"a/b/v\", { autoCompleteSet: [\"c/e\"], \"p\": \"v\" });\n\n  patterns_test(\"look ahead - autocomplete after param 2\", endpoints, \"a/b/v/c\", { autoCompleteSet: [\"e\"], \"p\": \"v\" });\n})();\n\n(function () {\n  var endpoints = {\n    \"1_param\": {\n      patterns: [\"a/{p}\"],\n      methods: [\"GET\"]\n    },\n    \"2_explicit\": {\n      patterns: [\"a/b\"],\n      methods: [\"GET\"]\n    }\n  };\n\n  var e = _.cloneDeep(endpoints);\n  e[\"1_param\"].priority = 1;\n  patterns_test(\"Competing endpoints - priority 1\", e, \"a/b$\", { method: \"GET\", endpoint: \"1_param\", \"p\": \"b\" });\n  e = _.cloneDeep(endpoints);\n  e[\"1_param\"].priority = 1;\n  e[\"2_explicit\"].priority = 0;\n  patterns_test(\"Competing endpoints - priority 2\", e, \"a/b$\", { method: \"GET\", endpoint: \"2_explicit\" });\n\n  e = _.cloneDeep(endpoints);\n  e[\"2_explicit\"].priority = 0;\n  patterns_test(\"Competing endpoints - priority 3\", e, \"a/b$\", { method: \"GET\", endpoint: \"2_explicit\" });\n})();\n\n(function () {\n  var endpoints = {\n    \"1_GET\": {\n      patterns: [\"a\"],\n      methods: [\"GET\"]\n    },\n    \"1_PUT\": {\n      patterns: [\"a\"],\n      methods: [\"PUT\"]\n    },\n    \"2_GET\": {\n      patterns: [\"a/b\"],\n      methods: [\"GET\"]\n    },\n    \"2_DELETE\": {\n      patterns: [\"a/b\"],\n      methods: [\"DELETE\"]\n    }\n  };\n  patterns_test(\"Competing endpoint - sub url of another - auto complete\", endpoints, \"a\", { method: \"GET\", autoCompleteSet: [\"b\"] });\n  patterns_test(\"Competing endpoint - sub url of another, complete 1\", endpoints, \"a$\", { method: \"GET\", endpoint: \"1_GET\" });\n  patterns_test(\"Competing endpoint - sub url of another, complete 2\", endpoints, \"a$\", { method: \"PUT\", endpoint: \"1_PUT\" });\n  patterns_test(\"Competing endpoint - sub url of another, complete 3\", endpoints, \"a$\", { method: \"DELETE\" });\n\n  patterns_test(\"Competing endpoint - extension of another, complete 1, auto complete\", endpoints, \"a/b$\", { method: \"PUT\", autoCompleteSet: [] });\n\n  patterns_test(\"Competing endpoint - extension of another, complete 1\", endpoints, \"a/b$\", { method: \"GET\", endpoint: \"2_GET\" });\n\n  patterns_test(\"Competing endpoint - extension of another, complete 1\", endpoints, \"a/b$\", { method: \"DELETE\", endpoint: \"2_DELETE\" });\n  patterns_test(\"Competing endpoint - extension of another, complete 1\", endpoints, \"a/b$\", { method: \"PUT\" });\n})();\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/core_plugins/console/public/tests/src/url_autocomplete_tests.js\n// module id = 3153\n// module chunks = 2","'use strict';\n\nvar _ = require('lodash');\nvar url_params = require('../../src/autocomplete/url_params');\nvar autocomplete_engine = require('../../src/autocomplete/engine');\n\nvar _window$QUnit = window.QUnit,\n    test = _window$QUnit.test,\n    _module = _window$QUnit.module,\n    deepEqual = _window$QUnit.deepEqual;\n\n\n_module(\"Url params\");\n\nfunction param_test(name, description, tokenPath, expectedContext, globalParams) {\n\n  test(name, function () {\n    var urlParams = new url_params.UrlParams(description, globalParams || {});\n    if (typeof tokenPath === \"string\") {\n      tokenPath = _.map(tokenPath.split(\"/\"), function (p) {\n        p = p.split(\",\");\n        if (p.length === 1) {\n          return p[0];\n        }\n        return p;\n      });\n    }\n\n    if (expectedContext.autoCompleteSet) {\n      expectedContext.autoCompleteSet = _.map(expectedContext.autoCompleteSet, function (t) {\n        if (_.isString(t)) {\n          t = { name: t };\n        }\n        return t;\n      });\n      expectedContext.autoCompleteSet = _.sortBy(expectedContext.autoCompleteSet, 'name');\n    }\n\n    var context = {};\n\n    autocomplete_engine.populateContext(tokenPath, context, null, expectedContext.autoCompleteSet, urlParams.getTopLevelComponents());\n\n    if (context.autoCompleteSet) {\n      context.autoCompleteSet = _.sortBy(context.autoCompleteSet, 'name');\n    }\n\n    deepEqual(context, expectedContext);\n  });\n}\n\nfunction t(name, meta, insert_value) {\n  var r = name;\n  if (meta) {\n    r = { name: name, meta: meta };\n    if (meta === \"param\" && !insert_value) {\n      insert_value = name + \"=\";\n    }\n  }\n  if (insert_value) {\n    if (_.isString(r)) {\n      r = { name: name };\n    }\n    r.insert_value = insert_value;\n  }\n  return r;\n}\n\n(function () {\n  var params = {\n    \"a\": [\"1\", \"2\"],\n    \"b\": \"__flag__\"\n  };\n  param_test(\"settings params\", params, \"a/1\", { \"a\": [\"1\"] });\n\n  param_test(\"autocomplete top level\", params, [], { autoCompleteSet: [t(\"a\", \"param\"), t(\"b\", \"flag\")] });\n\n  param_test(\"autocomplete top level, with defaults\", params, [], { autoCompleteSet: [t(\"a\", \"param\"), t(\"b\", \"flag\"), t(\"c\", \"param\")] }, {\n    \"c\": [2]\n  });\n\n  param_test(\"autocomplete values\", params, \"a\", { autoCompleteSet: [t(\"1\", \"a\"), t(\"2\", \"a\")] });\n\n  param_test(\"autocomplete values flag\", params, \"b\", { autoCompleteSet: [t(\"true\", \"b\"), t(\"false\", \"b\")] });\n})();\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/core_plugins/console/public/tests/src/url_params_tests.js\n// module id = 3154\n// module chunks = 2","'use strict';\n\nvar _ = require('lodash');\nvar curl = require('../../src/curl');\nvar curlTests = require('raw-loader!./curl_parsing_tests.txt');\n\nvar _window$QUnit = window.QUnit,\n    test = _window$QUnit.test,\n    _module = _window$QUnit.module,\n    ok = _window$QUnit.ok,\n    equal = _window$QUnit.equal;\n\n\n_module(\"CURL\");\n\nvar notCURLS = ['sldhfsljfhs', 's;kdjfsldkfj curl -XDELETE \"\"', '{ \"hello\": 1 }'];\n\n_.each(notCURLS, function (notCURL, i) {\n  test(\"cURL Detection - broken strings \" + i, function () {\n    ok(!curl.detectCURL(notCURL), \"marked as curl while it wasn't:\" + notCURL);\n  });\n});\n\n_.each(curlTests.split(/^=+$/m), function (fixture) {\n  if (fixture.trim() == \"\") {\n    return;\n  }\n  fixture = fixture.split(/^-+$/m);\n  var name = fixture[0].trim(),\n      curlText = fixture[1],\n      response = fixture[2].trim();\n\n  test(\"cURL Detection - \" + name, function () {\n    ok(curl.detectCURL(curlText), \"marked as not curl while it was:\" + curlText);\n    var r = curl.parseCURL(curlText);\n    equal(r, response);\n  });\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/core_plugins/console/public/tests/src/curl_parsing_tests.js\n// module id = 3155\n// module chunks = 2","module.exports = \"==========\\nCurl 1\\n-------------------------------------\\ncurl -XPUT 'http://localhost:9200/twitter/tweet/1' -d '{\\n  \\\"user\\\" : \\\"kimchy\\\",\\n  \\\"post_date\\\" : \\\"2009-11-15T14:12:12\\\",\\n  \\\"message\\\" : \\\"trying out Elastic Search\\\"\\n}'\\n-------------------------------------\\nPUT /twitter/tweet/1\\n{\\n  \\\"user\\\" : \\\"kimchy\\\",\\n  \\\"post_date\\\" : \\\"2009-11-15T14:12:12\\\",\\n  \\\"message\\\" : \\\"trying out Elastic Search\\\"\\n}\\n==========\\nCurl 2\\n-------------------------------------\\ncurl -XGET \\\"localhost/twitter/tweet/1?version=2\\\" -d '{\\n   \\\"message\\\" : \\\"elasticsearch now has versioning support, double cool!\\\"\\n}'\\n-------------------------------------\\nGET /twitter/tweet/1?version=2\\n{\\n   \\\"message\\\" : \\\"elasticsearch now has versioning support, double cool!\\\"\\n}\\n===========\\nCurl 3\\n-------------------------------------\\ncurl -XPOST https://localhost/twitter/tweet/1?version=2 -d '{\\n   \\\"message\\\" : \\\"elasticsearch now has versioning support, double cool!\\\"\\n}'\\n-------------------------------------\\nPOST /twitter/tweet/1?version=2\\n{\\n   \\\"message\\\" : \\\"elasticsearch now has versioning support, double cool!\\\"\\n}\\n=========\\nCurl 4\\n-------------------------------------\\ncurl -XPOST https://localhost/twitter\\n-------------------------------------\\nPOST /twitter\\n==========\\nCurl 5\\n-------------------------------------\\ncurl -X POST https://localhost/twitter/\\n-------------------------------------\\nPOST /twitter/\\n=============\\nCurl 6\\n-------------------------------------\\ncurl -s -XPOST localhost:9200/missing-test -d'\\n{\\n  \\\"mappings\\\": {\\n  }\\n}'\\n-------------------------------------\\nPOST /missing-test\\n{\\n  \\\"mappings\\\": {\\n  }\\n}\\n=========================\\nCurl 7\\n-------------------------------------\\ncurl 'localhost:9200/missing-test/doc/_search?pretty' -d'\\n{\\n  \\\"query\\\": {\\n  },\\n}'\\n-------------------------------------\\nGET /missing-test/doc/_search?pretty\\n{\\n  \\\"query\\\": {\\n  },\\n}\\n===========================\\nCurl 8\\n-------------------------------------\\ncurl localhost:9200/ -d'\\n{\\n  \\\"query\\\": {\\n  }\\n}'\\n-------------------------------------\\nGET /\\n{\\n  \\\"query\\\": {\\n  }\\n}\\n====================================\\nCurl Script\\n-------------------------------------\\n#!bin/sh\\n\\n// test something\\ncurl 'localhost:9200/missing-test/doc/_search?pretty' -d'\\n{\\n  \\\"query\\\": {\\n  },\\n}'\\n\\n\\ncurl -XPOST https://localhost/twitter\\n\\n#someother comments\\ncurl localhost:9200/ -d'\\n{\\n  \\\"query\\\": {\\n  }\\n}'\\n\\n\\n-------------------\\n# test something\\nGET /missing-test/doc/_search?pretty\\n{\\n  \\\"query\\\": {\\n  },\\n}\\n\\nPOST /twitter\\n\\n#someother comments\\nGET /\\n{\\n  \\\"query\\\": {\\n  }\\n}\\n====================================\\nCurl with some text\\n-------------------------------------\\nThis is what I meant:\\n\\ncurl 'localhost:9200/missing-test/doc/_search?'\\n\\nThis, however, does work:\\ncurl 'localhost:9200/missing/doc/_search?'\\n-------------------\\n### This is what I meant:\\n\\nGET /missing-test/doc/_search?\\n\\n### This, however, does work:\\nGET /missing/doc/_search?\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/raw-loader!./src/core_plugins/console/public/tests/src/curl_parsing_tests.txt\n// module id = 3156\n// module chunks = 2","'use strict';\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar kb = require('../../src/kb');\nvar mappings = require('../../src/mappings');\nvar autocomplete_engine = require('../../src/autocomplete/engine');\n\nvar _window$QUnit = window.QUnit,\n    test = _window$QUnit.test,\n    _module = _window$QUnit.module,\n    deepEqual = _window$QUnit.deepEqual;\n\n\n_module(\"Knowledge base\", {\n  setup: function setup() {\n    mappings.clear();\n    kb.setActiveApi(kb._test.loadApisFromJson({}));\n  },\n  teardown: function teardown() {\n    mappings.clear();\n    kb.setActiveApi(kb._test.loadApisFromJson({}));\n  }\n});\n\nvar MAPPING = {\n  \"index1\": {\n    \"type1.1\": {\n      \"properties\": {\n        \"field1.1.1\": { \"type\": \"string\" },\n        \"field1.1.2\": { \"type\": \"long\" }\n      }\n    },\n    \"type1.2\": {\n      \"properties\": {}\n    }\n  },\n  \"index2\": {\n    \"type2.1\": {\n      \"properties\": {\n        \"field2.1.1\": { \"type\": \"string\" },\n        \"field2.1.2\": { \"type\": \"string\" }\n      }\n    }\n  }\n};\n\nfunction testUrlContext(tokenPath, otherTokenValues, expectedContext) {\n\n  if (expectedContext.autoCompleteSet) {\n    expectedContext.autoCompleteSet = _lodash2.default.map(expectedContext.autoCompleteSet, function (t) {\n      if (_lodash2.default.isString(t)) {\n        t = { name: t };\n      }\n      return t;\n    });\n  }\n\n  var context = { otherTokenValues: otherTokenValues };\n  autocomplete_engine.populateContext(tokenPath, context, null, expectedContext.autoCompleteSet, kb.getTopLevelUrlCompleteComponents());\n\n  // override context to just check on id\n  if (context.endpoint) {\n    context.endpoint = context.endpoint.id;\n  }\n\n  delete context.otherTokenValues;\n\n  function norm(t) {\n    if (_lodash2.default.isString(t)) {\n      return { name: t };\n    }\n    return t;\n  }\n\n  if (context.autoCompleteSet) {\n    context.autoCompleteSet = _lodash2.default.sortBy(_lodash2.default.map(context.autoCompleteSet, norm), 'name');\n  }\n  if (expectedContext.autoCompleteSet) {\n    expectedContext.autoCompleteSet = _lodash2.default.sortBy(_lodash2.default.map(expectedContext.autoCompleteSet, norm), 'name');\n  }\n\n  deepEqual(context, expectedContext);\n}\n\nfunction t(term) {\n  return { name: term, meta: \"type\" };\n}\n\nfunction i(term) {\n  return { name: term, meta: \"index\" };\n}\n\nfunction index_test(name, tokenPath, otherTokenValues, expectedContext) {\n  test(name, function () {\n    var test_api = new kb._test.loadApisFromJson({\n      index_test: {\n        endpoints: {\n          _multi_indices: {\n            patterns: [\"{indices}/_multi_indices\"]\n          },\n          _single_index: { patterns: [\"{index}/_single_index\"] },\n          _no_index: {\n            // testing default patters\n            //  patterns: [\"_no_index\"]\n          }\n        }\n      }\n    }, kb._test.globalUrlComponentFactories);\n\n    kb.setActiveApi(test_api);\n\n    mappings.loadMappings(MAPPING);\n    testUrlContext(tokenPath, otherTokenValues, expectedContext);\n  });\n}\n\nindex_test(\"Index integration 1\", [], [], { autoCompleteSet: [\"_no_index\", i(\"index1\"), i(\"index2\")] });\n\nindex_test(\"Index integration 2\", [], [\"index1\"],\n// still return _no_index as index1 is not committed to yet.\n{ autoCompleteSet: [\"_no_index\", i(\"index2\")] });\n\nindex_test(\"Index integration 2\", [\"index1\"], [], { indices: [\"index1\"], autoCompleteSet: [\"_multi_indices\", \"_single_index\"] });\n\nindex_test(\"Index integration 2\", [[\"index1\", \"index2\"]], [], { indices: [\"index1\", \"index2\"], autoCompleteSet: [\"_multi_indices\"] });\n\nfunction type_test(name, tokenPath, otherTokenValues, expectedContext) {\n  test(name, function () {\n    var test_api = kb._test.loadApisFromJson({\n      \"type_test\": {\n        endpoints: {\n          _multi_types: { patterns: [\"{indices}/{types}/_multi_types\"] },\n          _single_type: { patterns: [\"{indices}/{type}/_single_type\"] },\n          _no_types: { patterns: [\"{indices}/_no_types\"] }\n        }\n      }\n    }, kb._test.globalUrlComponentFactories);\n    kb.setActiveApi(test_api);\n\n    mappings.loadMappings(MAPPING);\n\n    testUrlContext(tokenPath, otherTokenValues, expectedContext);\n  });\n}\n\ntype_test(\"Type integration 1\", [\"index1\"], [], { indices: [\"index1\"], autoCompleteSet: [\"_no_types\", t(\"type1.1\"), t(\"type1.2\")] });\ntype_test(\"Type integration 2\", [\"index1\"], [\"type1.2\"],\n// we are not yet comitted to type1.2, so _no_types is returned\n{ indices: [\"index1\"], autoCompleteSet: [\"_no_types\", t(\"type1.1\")] });\n\ntype_test(\"Type integration 3\", [\"index2\"], [], { indices: [\"index2\"], autoCompleteSet: [\"_no_types\", t(\"type2.1\")] });\n\ntype_test(\"Type integration 4\", [\"index1\", \"type1.2\"], [], { indices: [\"index1\"], types: [\"type1.2\"], autoCompleteSet: [\"_multi_types\", \"_single_type\"] });\n\ntype_test(\"Type integration 5\", [[\"index1\", \"index2\"], [\"type1.2\", \"type1.1\"]], [], { indices: [\"index1\", \"index2\"], types: [\"type1.2\", \"type1.1\"], autoCompleteSet: [\"_multi_types\"] });\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/core_plugins/console/public/tests/src/kb_tests.js\n// module id = 3157\n// module chunks = 2","\"use strict\";\n\nvar mappings = require('../../src/mappings');\n\nvar _window$QUnit = window.QUnit,\n    test = _window$QUnit.test,\n    _module = _window$QUnit.module,\n    deepEqual = _window$QUnit.deepEqual;\n\n\n_module(\"Mappings\", {\n  setup: function setup() {\n    mappings.clear();\n  },\n  teardown: function teardown() {\n    mappings.clear();\n  }\n});\n\nfunction fc(f1, f2) {\n  if (f1.name < f2.name) {\n    return -1;\n  }\n  if (f1.name > f2.name) {\n    return 1;\n  }\n  return 0;\n}\n\nfunction f(name, type) {\n  return { name: name, type: type || \"string\" };\n}\n\ntest(\"Multi fields\", function () {\n  mappings.loadMappings({\n    \"index\": {\n      \"tweet\": {\n        \"properties\": {\n          \"first_name\": {\n            \"type\": \"multi_field\",\n            \"path\": \"just_name\",\n            \"fields\": {\n              \"first_name\": { \"type\": \"string\", \"index\": \"analyzed\" },\n              \"any_name\": { \"type\": \"string\", \"index\": \"analyzed\" }\n            }\n          },\n          \"last_name\": {\n            \"type\": \"multi_field\",\n            \"path\": \"just_name\",\n            \"fields\": {\n              \"last_name\": { \"type\": \"string\", \"index\": \"analyzed\" },\n              \"any_name\": { \"type\": \"string\", \"index\": \"analyzed\" }\n            }\n          }\n        }\n      }\n    }\n  });\n\n  deepEqual(mappings.getFields(\"index\").sort(fc), [f(\"any_name\", \"string\"), f(\"first_name\", \"string\"), f(\"last_name\", \"string\")]);\n});\n\ntest(\"Multi fields 1.0 style\", function () {\n  mappings.loadMappings({\n    \"index\": {\n      \"tweet\": {\n        \"properties\": {\n          \"first_name\": {\n            \"type\": \"string\", \"index\": \"analyzed\",\n            \"path\": \"just_name\",\n            \"fields\": {\n              \"any_name\": { \"type\": \"string\", \"index\": \"analyzed\" }\n            }\n          },\n          \"last_name\": {\n            \"type\": \"string\", \"index\": \"no\",\n            \"fields\": {\n              \"raw\": { \"type\": \"string\", \"index\": \"analyzed\" }\n            }\n          }\n        }\n      }\n    }\n  });\n\n  deepEqual(mappings.getFields(\"index\").sort(fc), [f(\"any_name\", \"string\"), f(\"first_name\", \"string\"), f(\"last_name\", \"string\"), f(\"last_name.raw\", \"string\")]);\n});\n\ntest(\"Simple fields\", function () {\n  mappings.loadMappings({\n    \"index\": {\n      \"tweet\": {\n        \"properties\": {\n          \"str\": {\n            \"type\": \"string\"\n          },\n          \"number\": {\n            \"type\": \"int\"\n          }\n        }\n      }\n    }\n  });\n\n  deepEqual(mappings.getFields(\"index\").sort(fc), [f(\"number\", \"int\"), f(\"str\", \"string\")]);\n});\n\ntest(\"Simple fields - 1.0 style\", function () {\n  mappings.loadMappings({\n    \"index\": {\n      \"mappings\": {\n        \"tweet\": {\n          \"properties\": {\n            \"str\": {\n              \"type\": \"string\"\n            },\n            \"number\": {\n              \"type\": \"int\"\n            }\n          }\n        }\n      }\n    }\n  });\n\n  deepEqual(mappings.getFields(\"index\").sort(fc), [f(\"number\", \"int\"), f(\"str\", \"string\")]);\n});\n\ntest(\"Nested fields\", function () {\n  mappings.loadMappings({\n    \"index\": {\n      \"tweet\": {\n        \"properties\": {\n          \"person\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"name\": {\n                \"properties\": {\n                  \"first_name\": { \"type\": \"string\" },\n                  \"last_name\": { \"type\": \"string\" }\n                }\n              },\n              \"sid\": { \"type\": \"string\", \"index\": \"not_analyzed\" }\n            }\n          },\n          \"message\": { \"type\": \"string\" }\n        }\n      }\n    }\n  });\n\n  deepEqual(mappings.getFields(\"index\", [\"tweet\"]).sort(fc), [f(\"message\"), f(\"person.name.first_name\"), f(\"person.name.last_name\"), f(\"person.sid\")]);\n});\n\ntest(\"Enabled fields\", function () {\n  mappings.loadMappings({\n    \"index\": {\n      \"tweet\": {\n        \"properties\": {\n          \"person\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"name\": {\n                \"type\": \"object\",\n                \"enabled\": false\n              },\n              \"sid\": { \"type\": \"string\", \"index\": \"not_analyzed\" }\n            }\n          },\n          \"message\": { \"type\": \"string\" }\n        }\n      }\n    }\n  });\n\n  deepEqual(mappings.getFields(\"index\", [\"tweet\"]).sort(fc), [f(\"message\"), f(\"person.sid\")]);\n});\n\ntest(\"Path tests\", function () {\n  mappings.loadMappings({\n    \"index\": {\n      \"person\": {\n        \"properties\": {\n          \"name1\": {\n            \"type\": \"object\",\n            \"path\": \"just_name\",\n            \"properties\": {\n              \"first1\": { \"type\": \"string\" },\n              \"last1\": { \"type\": \"string\", \"index_name\": \"i_last_1\" }\n            }\n          },\n          \"name2\": {\n            \"type\": \"object\",\n            \"path\": \"full\",\n            \"properties\": {\n              \"first2\": { \"type\": \"string\" },\n              \"last2\": { \"type\": \"string\", \"index_name\": \"i_last_2\" }\n            }\n          }\n        }\n      }\n    }\n  });\n\n  deepEqual(mappings.getFields().sort(fc), [f(\"first1\"), f(\"i_last_1\"), f(\"name2.first2\"), f(\"name2.i_last_2\")]);\n});\n\ntest(\"Use index_name tests\", function () {\n  mappings.loadMappings({\n    \"index\": {\n      \"person\": {\n        \"properties\": {\n          \"last1\": { \"type\": \"string\", \"index_name\": \"i_last_1\" }\n        }\n      }\n    }\n  });\n\n  deepEqual(mappings.getFields().sort(fc), [f(\"i_last_1\")]);\n});\n\ntest(\"Aliases\", function () {\n  mappings.loadAliases({\n    \"test_index1\": {\n      \"aliases\": {\n        \"alias1\": {}\n      }\n    },\n    \"test_index2\": {\n      \"aliases\": {\n        \"alias2\": {\n          \"filter\": {\n            \"term\": {\n              \"FIELD\": \"VALUE\"\n            }\n          }\n        },\n        \"alias1\": {}\n      }\n    }\n  });\n  mappings.loadMappings({\n    \"test_index1\": {\n      \"type1\": {\n        \"properties\": {\n          \"last1\": { \"type\": \"string\", \"index_name\": \"i_last_1\" }\n        }\n      }\n    },\n    \"test_index2\": {\n      \"type2\": {\n        \"properties\": {\n          \"last1\": { \"type\": \"string\", \"index_name\": \"i_last_1\" }\n        }\n      }\n    }\n  });\n\n  deepEqual(mappings.getIndices().sort(), [\"_all\", \"alias1\", \"alias2\", \"test_index1\", \"test_index2\"]);\n  deepEqual(mappings.getIndices(false).sort(), [\"test_index1\", \"test_index2\"]);\n  deepEqual(mappings.expandAliases([\"alias1\", \"test_index2\"]).sort(), [\"test_index1\", \"test_index2\"]);\n  deepEqual(mappings.expandAliases(\"alias2\"), \"test_index2\");\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/core_plugins/console/public/tests/src/mapping_tests.js\n// module id = 3169\n// module chunks = 2","'use strict';\n\nvar _jquery = require('jquery');\n\nvar _jquery2 = _interopRequireDefault(_jquery);\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _input = require('../../src/input');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar ace = require('ace');\n\nvar editor_input1 = require('raw-loader!./editor_input1.txt');\nvar utils = require('../../src/utils');\n\nvar aceRange = ace.require(\"ace/range\");\nvar _window$QUnit = window.QUnit,\n    _module = _window$QUnit.module,\n    asyncTest = _window$QUnit.asyncTest,\n    deepEqual = _window$QUnit.deepEqual,\n    equal = _window$QUnit.equal,\n    start = _window$QUnit.start;\n\n\nvar input = void 0;\n\n_module(\"Editor\", {\n  setup: function setup() {\n    input = (0, _input.initializeInput)((0, _jquery2.default)('#editor'), (0, _jquery2.default)('#editor_actions'), (0, _jquery2.default)('#copy_as_curl'), null);\n    input.$el.show();\n    input.autocomplete._test.removeChangeListener();\n  },\n  teardown: function teardown() {\n    input.$el.hide();\n    input.autocomplete._test.addChangeListener();\n  }\n});\n\nvar testCount = 0;\n\nfunction utils_test(name, prefix, data, test) {\n  var id = testCount++;\n  if (typeof data == \"function\") {\n    test = data;\n    data = null;\n  }\n  if (data && typeof data != \"string\") {\n    data = JSON.stringify(data, null, 3);\n  }\n  if (data) {\n    if (prefix) {\n      data = prefix + \"\\n\" + data;\n    }\n  } else {\n    data = prefix;\n  }\n\n  asyncTest(\"Utils test \" + id + \" : \" + name, function () {\n    input.update(data, function () {\n      test();\n    });\n  });\n}\n\nfunction compareRequest(requests, expected) {\n  if (!Array.isArray(requests)) {\n    requests = [requests];\n    expected = [expected];\n  }\n\n  _lodash2.default.each(requests, function (r) {\n    delete r.range;\n  });\n  deepEqual(requests, expected);\n}\n\nvar simple_request = {\n  prefix: 'POST _search',\n  data: ['{', '   \"query\": { \"match_all\": {} }', '}'].join('\\n')\n};\n\nvar single_line_request = {\n  prefix: 'POST _search',\n  data: '{ \"query\": { \"match_all\": {} } }'\n};\n\nvar get_request_no_data = {\n  prefix: 'GET _stats'\n};\n\nvar multi_doc_request = {\n  prefix: 'POST _bulk',\n  data_as_array: ['{ \"index\": { \"_index\": \"index\", \"_type\":\"type\" } }', '{ \"field\": 1 }']\n};\nmulti_doc_request.data = multi_doc_request.data_as_array.join(\"\\n\");\n\nutils_test(\"simple request range\", simple_request.prefix, simple_request.data, function () {\n  input.getRequestRange(function (range) {\n    var expected = new aceRange.Range(0, 0, 3, 1);\n    compareRequest(range, expected);\n    start();\n  });\n});\n\nutils_test(\"simple request data\", simple_request.prefix, simple_request.data, function () {\n  input.getRequest(function (request) {\n    var expected = {\n      method: \"POST\",\n      url: \"_search\",\n      data: [simple_request.data]\n    };\n\n    compareRequest(request, expected);\n    start();\n  });\n});\n\nutils_test(\"simple request range, prefixed with spaces\", \"   \" + simple_request.prefix, simple_request.data, function () {\n  input.getRequestRange(function (range) {\n    var expected = new aceRange.Range(0, 0, 3, 1);\n    deepEqual(range, expected);\n    start();\n  });\n});\n\nutils_test(\"simple request data, prefixed with spaces\", \"    \" + simple_request.prefix, simple_request.data, function () {\n  input.getRequest(function (request) {\n    var expected = {\n      method: \"POST\",\n      url: \"_search\",\n      data: [simple_request.data]\n    };\n\n    compareRequest(request, expected);\n    start();\n  });\n});\n\nutils_test(\"simple request range, suffixed with spaces\", simple_request.prefix + \"   \", simple_request.data + \"  \", function () {\n  input.getRequestRange(function (range) {\n    var expected = new aceRange.Range(0, 0, 3, 1);\n    compareRequest(range, expected);\n    start();\n  });\n});\n\nutils_test(\"simple request data, suffixed with spaces\", simple_request.prefix + \"    \", simple_request.data + \" \", function () {\n  input.getRequest(function (request) {\n    var expected = {\n      method: \"POST\",\n      url: \"_search\",\n      data: [simple_request.data]\n    };\n\n    compareRequest(request, expected);\n    start();\n  });\n});\n\nutils_test(\"single line request range\", single_line_request.prefix, single_line_request.data, function () {\n  input.getRequestRange(function (range) {\n    var expected = new aceRange.Range(0, 0, 1, 32);\n    compareRequest(range, expected);\n    start();\n  });\n});\n\nutils_test(\"full url: single line request data\", \"POST https://somehoset/_search\", single_line_request.data, function () {\n  input.getRequest(function (request) {\n    var expected = {\n      method: \"POST\",\n      url: \"https://somehoset/_search\",\n      data: [single_line_request.data]\n    };\n\n    compareRequest(request, expected);\n    start();\n  });\n});\n\nutils_test(\"request with no data followed by a new line\", get_request_no_data.prefix, \"\\n\", function () {\n  input.getRequestRange(function (range) {\n    var expected = new aceRange.Range(0, 0, 0, 10);\n    compareRequest(range, expected);\n    start();\n  });\n});\n\nutils_test(\"request with no data followed by a new line (data)\", get_request_no_data.prefix, \"\\n\", function () {\n  input.getRequest(function (request) {\n    var expected = {\n      method: \"GET\",\n      url: \"_stats\",\n      data: []\n    };\n\n    compareRequest(request, expected);\n    start();\n  });\n});\n\nutils_test(\"request with no data\", get_request_no_data.prefix, get_request_no_data.data, function () {\n  input.getRequestRange(function (range) {\n    var expected = new aceRange.Range(0, 0, 0, 10);\n    deepEqual(range, expected);\n    start();\n  });\n});\n\nutils_test(\"request with no data (data)\", get_request_no_data.prefix, get_request_no_data.data, function () {\n  input.getRequest(function (request) {\n    var expected = {\n      method: \"GET\",\n      url: \"_stats\",\n      data: []\n    };\n\n    compareRequest(request, expected);\n    start();\n  });\n});\n\nutils_test(\"multi doc request range\", multi_doc_request.prefix, multi_doc_request.data, function () {\n  input.getRequestRange(function (range) {\n    var expected = new aceRange.Range(0, 0, 2, 14);\n    deepEqual(range, expected);\n    start();\n  });\n});\n\nutils_test(\"multi doc request data\", multi_doc_request.prefix, multi_doc_request.data, function () {\n  input.getRequest(function (request) {\n    var expected = {\n      method: \"POST\",\n      url: \"_bulk\",\n      data: multi_doc_request.data_as_array\n    };\n\n    compareRequest(request, expected);\n    start();\n  });\n});\n\nvar script_request = {\n  prefix: 'POST _search',\n  data: ['{', '   \"query\": { \"script\": \"\"\"', '   some script ', '   \"\"\"}', '}'].join('\\n')\n};\n\nutils_test(\"script request range\", script_request.prefix, script_request.data, function () {\n  input.getRequestRange(function (range) {\n    var expected = new aceRange.Range(0, 0, 5, 1);\n    compareRequest(range, expected);\n    start();\n  });\n});\n\nutils_test(\"simple request data\", simple_request.prefix, simple_request.data, function () {\n  input.getRequest(function (request) {\n    var expected = {\n      method: \"POST\",\n      url: \"_search\",\n      data: [utils.collapseLiteralStrings(simple_request.data)]\n    };\n\n    compareRequest(request, expected);\n    start();\n  });\n});\n\nfunction multi_req_test(name, editor_input, range, expected) {\n  utils_test(\"multi request select - \" + name, editor_input, function () {\n    input.getRequestsInRange(range, function (requests) {\n      // convert to format returned by request.\n      _lodash2.default.each(expected, function (req) {\n        req.data = req.data == null ? [] : [JSON.stringify(req.data, null, 2)];\n      });\n\n      compareRequest(requests, expected);\n      start();\n    });\n  });\n}\n\nmulti_req_test(\"mid body to mid body\", editor_input1, { start: { row: 12 }, end: { row: 17 } }, [{\n  method: \"PUT\",\n  url: \"index_1/type1/1\",\n  data: {\n    \"f\": 1\n  }\n}, {\n  method: \"PUT\",\n  url: \"index_1/type1/2\",\n  data: {\n    \"f\": 2\n  }\n}]);\n\nmulti_req_test(\"single request start to end\", editor_input1, { start: { row: 10 }, end: { row: 13 } }, [{\n  method: \"PUT\",\n  url: \"index_1/type1/1\",\n  data: {\n    \"f\": 1\n  }\n}]);\n\nmulti_req_test(\"start to end, with comment\", editor_input1, { start: { row: 6 }, end: { row: 13 } }, [{\n  method: \"GET\",\n  url: \"_stats?level=shards\",\n  data: null\n}, {\n  method: \"PUT\",\n  url: \"index_1/type1/1\",\n  data: {\n    \"f\": 1\n  }\n}]);\n\nmulti_req_test(\"before start to after end, with comments\", editor_input1, { start: { row: 4 }, end: { row: 14 } }, [{\n  method: \"GET\",\n  url: \"_stats?level=shards\",\n  data: null\n}, {\n  method: \"PUT\",\n  url: \"index_1/type1/1\",\n  data: {\n    \"f\": 1\n  }\n}]);\n\nmulti_req_test(\"between requests\", editor_input1, { start: { row: 21 }, end: { row: 22 } }, []);\n\nmulti_req_test(\"between requests - with comment\", editor_input1, { start: { row: 20 }, end: { row: 22 } }, []);\n\nmulti_req_test(\"between requests - before comment\", editor_input1, { start: { row: 19 }, end: { row: 22 } }, []);\n\nfunction multi_req_copy_as_curl_test(name, editor_input, range, expected) {\n  utils_test(\"multi request copy as curl - \" + name, editor_input, function () {\n    input.getRequestsAsCURL(range, function (curl) {\n      equal(curl, expected);\n      start();\n    });\n  });\n}\n\nmulti_req_copy_as_curl_test(\"start to end, with comment\", editor_input1, { start: { row: 6 }, end: { row: 13 } }, '\\ncurl -XGET \"http://localhost:9200/_stats?level=shards\"\\n\\n#in between comment\\n\\ncurl -XPUT \"http://localhost:9200/index_1/type1/1\" -H \\'Content-Type: application/json\\' -d\\'\\n{\\n  \"f\": 1\\n}\\''.trim());\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/core_plugins/console/public/tests/src/editor_tests.js\n// module id = 3170\n// module chunks = 2","module.exports = \"GET _search\\n{\\n  \\\"query\\\": { \\\"match_all\\\": {} }\\n}\\n\\n#preceeding comment\\nGET _stats?level=shards\\n\\n#in between comment\\n\\nPUT index_1/type1/1\\n{\\n  \\\"f\\\": 1\\n}\\n\\nPUT index_1/type1/2\\n{\\n  \\\"f\\\": 2\\n}\\n\\n# comment\\n\\n\\nGET index_1/type1/1/_source?_source_include=f\\n\\nDELETE index_2\\n\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/raw-loader!./src/core_plugins/console/public/tests/src/editor_input1.txt\n// module id = 3171\n// module chunks = 2","'use strict';\n\nvar _input = require('../../src/input');\n\nvar ace = require('ace');\nvar $ = require('jquery');\n\nvar input = void 0;\n\nvar token_iterator = ace.require(\"ace/token_iterator\");\nvar _window$QUnit = window.QUnit,\n    _module = _window$QUnit.module,\n    asyncTest = _window$QUnit.asyncTest,\n    deepEqual = _window$QUnit.deepEqual,\n    start = _window$QUnit.start;\n\n\n_module(\"Input Tokenization\", {\n  setup: function setup() {\n    input = (0, _input.initializeInput)($('#editor'), $('#editor_actions'), $('#copy_as_curl'), null);\n    input.$el.show();\n    input.autocomplete._test.removeChangeListener();\n  },\n  teardown: function teardown() {\n    input.$el.hide();\n    input.autocomplete._test.addChangeListener();\n  }\n});\n\nfunction tokensAsList() {\n  var iter = new token_iterator.TokenIterator(input.getSession(), 0, 0);\n  var ret = [];\n  var t = iter.getCurrentToken();\n  if (input.parser.isEmptyToken(t)) {\n    t = input.parser.nextNonEmptyToken(iter);\n  }\n  while (t) {\n    ret.push({ value: t.value, type: t.type });\n    t = input.parser.nextNonEmptyToken(iter);\n  }\n\n  return ret;\n}\n\nvar testCount = 0;\n\nfunction token_test(token_list, prefix, data) {\n  if (data && typeof data != \"string\") {\n    data = JSON.stringify(data, null, 3);\n  }\n  if (data) {\n    if (prefix) {\n      data = prefix + \"\\n\" + data;\n    }\n  } else {\n    data = prefix;\n  }\n\n  asyncTest(\"Token test \" + testCount++ + \" prefix: \" + prefix, function () {\n    input.update(data, function () {\n      var tokens = tokensAsList();\n      var normTokenList = [];\n      for (var i = 0; i < token_list.length; i++) {\n        normTokenList.push({ type: token_list[i++], value: token_list[i] });\n      }\n\n      deepEqual(tokens, normTokenList, \"Doc:\\n\" + data);\n      start();\n    });\n  });\n}\n\ntoken_test([\"method\", \"GET\", \"url.part\", \"_search\"], \"GET _search\");\n\ntoken_test([\"method\", \"GET\", \"url.slash\", \"/\", \"url.part\", \"_search\"], \"GET /_search\");\n\ntoken_test([\"method\", \"GET\", \"url.protocol_host\", \"http://somehost\", \"url.slash\", \"/\", \"url.part\", \"_search\"], \"GET http://somehost/_search\");\n\ntoken_test([\"method\", \"GET\", \"url.protocol_host\", \"http://somehost\"], \"GET http://somehost\");\n\ntoken_test([\"method\", \"GET\", \"url.protocol_host\", \"http://somehost\", \"url.slash\", \"/\"], \"GET http://somehost/\");\n\ntoken_test([\"method\", \"GET\", \"url.protocol_host\", \"http://test:user@somehost\", \"url.slash\", \"/\"], \"GET http://test:user@somehost/\");\n\ntoken_test([\"method\", \"GET\", \"url.part\", \"_cluster\", \"url.slash\", \"/\", \"url.part\", \"nodes\"], \"GET _cluster/nodes\");\n\ntoken_test([\"method\", \"GET\", \"url.slash\", \"/\", \"url.part\", \"_cluster\", \"url.slash\", \"/\", \"url.part\", \"nodes\"], \"GET /_cluster/nodes\");\n\ntoken_test([\"method\", \"GET\", \"url.part\", \"index\", \"url.slash\", \"/\", \"url.part\", \"_search\"], \"GET index/_search\");\n\ntoken_test([\"method\", \"GET\", \"url.part\", \"index\"], \"GET index\");\n\ntoken_test([\"method\", \"GET\", \"url.part\", \"index\", \"url.slash\", \"/\", \"url.part\", \"type\"], \"GET index/type\");\n\ntoken_test([\"method\", \"GET\", \"url.slash\", \"/\", \"url.part\", \"index\", \"url.slash\", \"/\", \"url.part\", \"type\", \"url.slash\", \"/\"], \"GET /index/type/\");\n\ntoken_test([\"method\", \"GET\", \"url.part\", \"index\", \"url.slash\", \"/\", \"url.part\", \"type\", \"url.slash\", \"/\", \"url.part\", \"_search\"], \"GET index/type/_search\");\n\ntoken_test([\"method\", \"GET\", \"url.part\", \"index\", \"url.slash\", \"/\", \"url.part\", \"type\", \"url.slash\", \"/\", \"url.part\", \"_search\", \"url.questionmark\", \"?\", \"url.param\", \"value\", \"url.equal\", \"=\", \"url.value\", \"1\"], \"GET index/type/_search?value=1\");\n\ntoken_test([\"method\", \"GET\", \"url.part\", \"index\", \"url.slash\", \"/\", \"url.part\", \"type\", \"url.slash\", \"/\", \"url.part\", \"1\"], \"GET index/type/1\");\n\ntoken_test([\"method\", \"GET\", \"url.slash\", \"/\", \"url.part\", \"index1\", \"url.comma\", \",\", \"url.part\", \"index2\", \"url.slash\", \"/\"], \"GET /index1,index2/\");\n\ntoken_test([\"method\", \"GET\", \"url.slash\", \"/\", \"url.part\", \"index1\", \"url.comma\", \",\", \"url.part\", \"index2\", \"url.slash\", \"/\", \"url.part\", \"_search\"], \"GET /index1,index2/_search\");\n\ntoken_test([\"method\", \"GET\", \"url.part\", \"index1\", \"url.comma\", \",\", \"url.part\", \"index2\", \"url.slash\", \"/\", \"url.part\", \"_search\"], \"GET index1,index2/_search\");\n\ntoken_test([\"method\", \"GET\", \"url.slash\", \"/\", \"url.part\", \"index1\", \"url.comma\", \",\", \"url.part\", \"index2\"], \"GET /index1,index2\");\n\ntoken_test([\"method\", \"GET\", \"url.part\", \"index1\", \"url.comma\", \",\", \"url.part\", \"index2\"], \"GET index1,index2\");\n\ntoken_test([\"method\", \"GET\", \"url.slash\", \"/\", \"url.part\", \"index1\", \"url.comma\", \",\"], \"GET /index1,\");\n\ntoken_test([\"method\", \"PUT\", \"url.slash\", \"/\", \"url.part\", \"index\", \"url.slash\", \"/\"], \"PUT /index/\");\n\ntoken_test([\"method\", \"GET\", \"url.part\", \"index\", \"url.slash\", \"/\", \"url.part\", \"_search\"], \"GET index/_search \");\n\ntoken_test([\"method\", \"PUT\", \"url.slash\", \"/\", \"url.part\", \"index\"], \"PUT /index\");\n\ntoken_test([\"method\", \"PUT\", \"url.slash\", \"/\", \"url.part\", \"index1\", \"url.comma\", \",\", \"url.part\", \"index2\", \"url.slash\", \"/\", \"url.part\", \"type1\", \"url.comma\", \",\", \"url.part\", \"type2\"], \"PUT /index1,index2/type1,type2\");\n\ntoken_test([\"method\", \"PUT\", \"url.slash\", \"/\", \"url.part\", \"index1\", \"url.slash\", \"/\", \"url.part\", \"type1\", \"url.comma\", \",\", \"url.part\", \"type2\", \"url.comma\", \",\"], \"PUT /index1/type1,type2,\");\n\ntoken_test([\"method\", \"PUT\", \"url.part\", \"index1\", \"url.comma\", \",\", \"url.part\", \"index2\", \"url.slash\", \"/\", \"url.part\", \"type1\", \"url.comma\", \",\", \"url.part\", \"type2\", \"url.slash\", \"/\", \"url.part\", \"1234\"], \"PUT index1,index2/type1,type2/1234\");\n\ntoken_test([\"method\", \"POST\", \"url.part\", \"_search\", \"paren.lparen\", \"{\", \"variable\", '\"q\"', \"punctuation.colon\", \":\", \"paren.lparen\", \"{\", \"paren.rparen\", \"}\", \"paren.rparen\", \"}\"], 'POST _search\\n' + '{\\n' + '  \"q\": {}\\n' + '  \\n' + '}');\n\ntoken_test([\"method\", \"POST\", \"url.part\", \"_search\", \"paren.lparen\", \"{\", \"variable\", '\"q\"', \"punctuation.colon\", \":\", \"paren.lparen\", \"{\", \"variable\", '\"s\"', \"punctuation.colon\", \":\", \"paren.lparen\", \"{\", \"paren.rparen\", \"}\", \"paren.rparen\", \"}\", \"paren.rparen\", \"}\"], 'POST _search\\n' + '{\\n' + '  \"q\": { \"s\": {}}\\n' + '  \\n' + '}');\n\nfunction statesAsList() {\n  var ret = [];\n  var session = input.getSession();\n  var maxLine = session.getLength();\n  for (var row = 0; row < maxLine; row++) {\n    ret.push(session.getState(row));\n  }return ret;\n}\n\nfunction states_test(states_list, prefix, data) {\n  if (data && typeof data != \"string\") {\n    data = JSON.stringify(data, null, 3);\n  }\n  if (data) {\n    if (prefix) {\n      data = prefix + \"\\n\" + data;\n    }\n  } else {\n    data = prefix;\n  }\n\n  asyncTest(\"States test \" + testCount++ + \" prefix: \" + prefix, function () {\n    input.update(data, function () {\n      var modes = statesAsList();\n      deepEqual(modes, states_list, \"Doc:\\n\" + data);\n      start();\n    });\n  });\n}\n\nstates_test([\"start\", \"json\", \"json\", \"start\"], 'POST _search\\n' + '{\\n' + '  \"query\": { \"match_all\": {} }\\n' + '}');\n\nstates_test([\"start\", \"json\", [\"json\", \"json\"], [\"json\", \"json\"], \"json\", \"start\"], 'POST _search\\n' + '{\\n' + '  \"query\": { \\n' + '  \"match_all\": {} \\n' + '  }\\n' + '}');\n\nstates_test([\"start\", \"json\", \"json\", \"start\"], 'POST _search\\n' + '{\\n' + '  \"script\": { \"inline\": \"\" }\\n' + '}');\n\nstates_test([\"start\", \"json\", \"json\", \"start\"], 'POST _search\\n' + '{\\n' + '  \"script\": \"\"\\n' + '}');\n\nstates_test([\"start\", \"json\", [\"json\", \"json\"], \"json\", \"start\"], 'POST _search\\n' + '{\\n' + '  \"script\": {\\n' + '   }\\n' + '}');\n\nstates_test([\"start\", \"json\", [\"script-start\", \"json\", \"json\", \"json\"], [\"script-start\", \"json\", \"json\", \"json\"], [\"json\", \"json\"], \"json\", \"start\"], 'POST _search\\n' + '{\\n' + '  \"test\": { \"script\": \"\"\"\\n' + '  test script\\n' + ' \"\"\"\\n' + ' }\\n' + '}');\n\nstates_test([\"start\", \"json\", [\"script-start\", \"json\"], [\"script-start\", \"json\"], \"json\", \"start\"], 'POST _search\\n' + '{\\n' + '  \"script\": \"\"\"\\n' + '  test script\\n' + ' \"\"\",\\n' + '}');\n\nstates_test([\"start\", \"json\", \"json\", \"start\"], 'POST _search\\n' + '{\\n' + '  \"script\": \"\"\"test script\"\"\",\\n' + '}');\n\nstates_test([\"start\", \"json\", [\"string_literal\", \"json\"], [\"string_literal\", \"json\"], \"json\", \"start\"], 'POST _search\\n' + '{\\n' + '  \"somthing\": \"\"\"\\n' + '  test script\\n' + ' \"\"\",\\n' + '}');\n\nstates_test([\"start\", \"json\", [\"string_literal\", \"json\", \"json\", \"json\"], [\"string_literal\", \"json\", \"json\", \"json\"], [\"json\", \"json\"], [\"json\", \"json\"], \"json\", \"start\"], 'POST _search\\n' + '{\\n' + '  \"somthing\": { \"f\" : \"\"\"\\n' + '  test script\\n' + ' \"\"\",\\n' + ' \"g\": 1\\n' + ' }\\n' + '}');\n\nstates_test([\"start\", \"json\", \"json\", \"start\"], 'POST _search\\n' + '{\\n' + '  \"something\": \"\"\"test script\"\"\",\\n' + '}');\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/core_plugins/console/public/tests/src/input_tokenization_tests.js\n// module id = 3172\n// module chunks = 2","'use strict';\n\nvar _output = require('../../src/output');\n\nvar ace = require('ace');\nvar $ = require('jquery');\nvar RowParser = require('../../src/sense_editor/row_parser');\n\nvar output = void 0;\n\nvar token_iterator = ace.require(\"ace/token_iterator\");\nvar _window$QUnit = window.QUnit,\n    _module = _window$QUnit.module,\n    asyncTest = _window$QUnit.asyncTest,\n    deepEqual = _window$QUnit.deepEqual,\n    start = _window$QUnit.start;\n\n\n_module(\"Output Tokenization\", {\n  setup: function setup() {\n    output = (0, _output.initializeOutput)($('#output'));\n    output.$el.show();\n  },\n  teardown: function teardown() {\n    output.$el.hide();\n  }\n});\n\nfunction tokensAsList() {\n  var iter = new token_iterator.TokenIterator(output.getSession(), 0, 0);\n  var ret = [];\n  var t = iter.getCurrentToken();\n  var parser = new RowParser(output);\n  if (parser.isEmptyToken(t)) {\n    t = parser.nextNonEmptyToken(iter);\n  }\n  while (t) {\n    ret.push({ value: t.value, type: t.type });\n    t = parser.nextNonEmptyToken(iter);\n  }\n\n  return ret;\n}\n\nvar testCount = 0;\n\nfunction token_test(token_list, data) {\n  if (data && typeof data != \"string\") {\n    data = JSON.stringify(data, null, 3);\n  }\n\n  asyncTest(\"Token test \" + testCount++, function () {\n    output.update(data, function () {\n      var tokens = tokensAsList();\n      var normTokenList = [];\n      for (var i = 0; i < token_list.length; i++) {\n        normTokenList.push({ type: token_list[i++], value: token_list[i] });\n      }\n\n      deepEqual(tokens, normTokenList, \"Doc:\\n\" + data);\n      start();\n    });\n  });\n}\n\ntoken_test([\"warning\", \"#! warning\", \"comment\", \"# GET url\", \"paren.lparen\", \"{\", \"paren.rparen\", \"}\"], \"#! warning\\n\" + \"# GET url\\n\" + \"{}\");\n\ntoken_test([\"comment\", \"# GET url\", \"paren.lparen\", \"{\", \"variable\", '\"f\"', \"punctuation.colon\", \":\", \"punctuation.start_triple_quote\", '\"\"\"', \"multi_string\", \"raw\", \"punctuation.end_triple_quote\", '\"\"\"', \"paren.rparen\", \"}\"], '# GET url\\n' + '{ \"f\": \"\"\"raw\"\"\" }');\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/core_plugins/console/public/tests/src/output_tokenization_tests.js\n// module id = 3173\n// module chunks = 2","'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _input = require('../../src/input');\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar input = void 0;\nvar kb = require('../../src/kb');\nvar mappings = require('../../src/mappings');\nvar $ = require('jquery');\n\nvar _window$QUnit = window.QUnit,\n    _module = _window$QUnit.module,\n    ok = _window$QUnit.ok,\n    asyncTest = _window$QUnit.asyncTest,\n    deepEqual = _window$QUnit.deepEqual,\n    equal = _window$QUnit.equal,\n    start = _window$QUnit.start;\n\n\n_module(\"Integration\", {\n  setup: function setup() {\n    input = (0, _input.initializeInput)($('#editor'), $('#editor_actions'), $('#copy_as_curl'), null);\n    input.$el.show();\n    input.autocomplete._test.removeChangeListener();\n  },\n  teardown: function teardown() {\n    input.$el.hide();\n    input.autocomplete._test.addChangeListener();\n  }\n});\n\nfunction process_context_test(data, mapping, kb_schemes, request_line, test) {\n  asyncTest(test.name, function () {\n\n    console.debug(\"starting test \" + test.name);\n\n    var rowOffset = 0; // add one for the extra method line\n    var editorValue = data;\n    if (request_line != null) {\n      if (data != null) {\n        editorValue = request_line + \"\\n\" + data;\n        rowOffset = 1;\n      } else {\n        editorValue = request_line;\n      }\n    }\n\n    test.cursor.row += rowOffset;\n\n    mappings.clear();\n    mappings.loadMappings(mapping);\n    var json = {};\n    json[test.name] = kb_schemes || {};\n    var test_api = kb._test.loadApisFromJson(json);\n    //if (kb_schemes) {\n    //  if (kb_schemes.globals) {\n    //    $.each(kb_schemes.globals, function (parent, rules) {\n    //      test_api.addGlobalAutocompleteRules(parent, rules);\n    //    });\n    //  }\n    //  if (kb_schemes.endpoints) {\n    //    $.each(kb_schemes.endpoints, function (endpoint, scheme) {\n    //      _.defaults(scheme, {methods: null}); // disable method testing unless specified in test\n    //      test_api.addEndpointDescription(endpoint, scheme);\n    //    });\n    //  }\n    //}\n    kb.setActiveApi(test_api);\n\n    input.update(editorValue, function () {\n      input.moveCursorTo(test.cursor.row, test.cursor.column);\n\n      // allow ace rendering to move cursor so it will be seen during test - handy for debugging.\n      setTimeout(function () {\n        input.completer = {\n          base: {},\n          changeListener: function changeListener() {}\n        }; // mimic auto complete\n\n        input.autocomplete._test.getCompletions(input, input.getSession(), test.cursor, \"\", function (err, terms) {\n\n          if (test.assertThrows) {\n            ok(test.assertThrows.test(\"\" + err), \"failed to throw expected exception\");\n            start();\n            return;\n          }\n\n          if (err) {\n            throw err;\n          }\n\n          if (test.no_context) {\n            ok(!terms || terms.length === 0, \"Expected no context bug got terms.\");\n          } else {\n            ok(terms && terms.length > 0, \"failed to extract terms ...\");\n          }\n\n          if (!terms || terms.length === 0) {\n            start();\n            return;\n          }\n\n          if (test[\"autoCompleteSet\"]) {\n            var expected_terms = _lodash2.default.map(test[\"autoCompleteSet\"], function (t) {\n              if ((typeof t === 'undefined' ? 'undefined' : _typeof(t)) !== \"object\") {\n                t = { \"name\": t };\n              }\n              return t;\n            });\n            if (terms.length != expected_terms.length) {\n              equal(_lodash2.default.pluck(terms, 'name'), _lodash2.default.pluck(expected_terms, 'name'), \"list of completion terms is not of equal size\");\n            } else {\n              var filtered_actual_terms = _lodash2.default.map(terms, function (actual_term, i) {\n                var expected_term = expected_terms[i];\n                var filtered_term = {};\n                _lodash2.default.each(expected_term, function (v, p) {\n                  filtered_term[p] = actual_term[p];\n                });\n                return filtered_term;\n              });\n              deepEqual(filtered_actual_terms, expected_terms);\n            }\n          }\n\n          var context = terms[0].context;\n          input.autocomplete._test.addReplacementInfoToContext(context, test.cursor, terms[0].value);\n\n          function ac(prop, prop_test) {\n            if (typeof test[prop] != \"undefined\") {\n              if (prop_test) {\n                prop_test(context[prop], test[prop], prop);\n              } else {\n                deepEqual(context[prop], test[prop], 'context.' + prop + ' should equal ' + JSON.stringify(test[prop]));\n              }\n            }\n          }\n\n          function pos_compare(actual, expected, name) {\n            equal(actual.row, expected.row + rowOffset, \"row of \" + name + \" position is not as expected\");\n            equal(actual.column, expected.column, \"column of \" + name + \" position is not as expected\");\n          }\n\n          function range_compare(actual, expected, name) {\n            pos_compare(actual.start, expected.start, name + \".start\");\n            pos_compare(actual.end, expected.end, name + \".end\");\n          }\n\n          ac(\"prefixToAdd\");\n          ac(\"suffixToAdd\");\n          ac(\"addTemplate\");\n          ac(\"textBoxPosition\", pos_compare);\n          ac(\"rangeToReplace\", range_compare);\n\n          start();\n        });\n      });\n    });\n  });\n}\n\nfunction context_tests(data, mapping, kb_schemes, request_line, tests) {\n  if (data != null && typeof data != \"string\") {\n    data = JSON.stringify(data, null, 3);\n  }\n  for (var t = 0; t < tests.length; t++) {\n    process_context_test(data, mapping, kb_schemes, request_line, tests[t]);\n  }\n}\n\nvar SEARCH_KB = {\n  endpoints: {\n    _search: {\n      methods: [\"GET\", \"POST\"],\n      patterns: [\"{indices}/{types}/_search\", \"{indices}/_search\", \"_search\"],\n      data_autocomplete_rules: {\n        query: { match_all: {}, term: { \"{field}\": { __template: { \"f\": 1 } } } },\n        size: {},\n        facets: {\n          __template: {\n            \"FIELD\": {}\n          },\n          \"*\": { terms: { field: \"{field}\" } }\n        }\n      }\n    }\n  }\n};\n\nvar MAPPING = {\n  \"index1\": {\n    \"type1.1\": {\n      \"properties\": {\n        \"field1.1.1\": { \"type\": \"string\" },\n        \"field1.1.2\": { \"type\": \"string\" }\n      }\n    }\n  },\n  \"index2\": {\n    \"type2.1\": {\n      \"properties\": {\n        \"field2.1.1\": { \"type\": \"string\" },\n        \"field2.1.2\": { \"type\": \"string\" }\n      }\n    }\n  }\n};\n\ncontext_tests({}, MAPPING, SEARCH_KB, \"POST _search\", [{\n  name: \"Empty doc\",\n  cursor: { row: 0, column: 1 },\n  initialValue: \"\",\n  addTemplate: true,\n  prefixToAdd: \"\",\n  suffixToAdd: \"\",\n  rangeToReplace: { start: { row: 0, column: 1 }, end: { row: 0, column: 1 } },\n  autoCompleteSet: [\"facets\", \"query\", \"size\"]\n}]);\n\ncontext_tests({}, MAPPING, SEARCH_KB, \"POST _no_context\", [{\n  name: \"Missing KB\",\n  cursor: { row: 0, column: 1 },\n  no_context: true\n}]);\n\ncontext_tests({\n  \"query\": {\n    \"f\": 1\n  }\n}, MAPPING, {\n  globals: {\n    query: {\n      t1: 2\n    }\n  },\n  endpoints: {}\n}, \"POST _no_context\", [{\n  name: \"Missing KB - global auto complete\",\n  cursor: { row: 2, column: 5 },\n  autoCompleteSet: [\"t1\"]\n}]);\n\ncontext_tests({\n  \"query\": {\n    \"field\": \"something\"\n  },\n  \"facets\": {},\n  \"size\": 20\n}, MAPPING, SEARCH_KB, \"POST _search\", [{\n  name: \"existing dictionary key, no template\",\n  cursor: { row: 1, column: 6 },\n  initialValue: \"query\",\n  addTemplate: false,\n  prefixToAdd: \"\",\n  suffixToAdd: \"\",\n  rangeToReplace: { start: { row: 1, column: 3 }, end: { row: 1, column: 10 } },\n  autoCompleteSet: [\"facets\", \"query\", \"size\"]\n}, {\n  name: \"existing inner dictionary key\",\n  cursor: { row: 2, column: 7 },\n  initialValue: \"field\",\n  addTemplate: false,\n  prefixToAdd: \"\",\n  suffixToAdd: \"\",\n  rangeToReplace: { start: { row: 2, column: 6 }, end: { row: 2, column: 13 } },\n  autoCompleteSet: [\"match_all\", \"term\"]\n}, {\n  name: \"existing dictionary key, yes template\",\n  cursor: { row: 4, column: 7 },\n  initialValue: \"facets\",\n  addTemplate: true,\n  prefixToAdd: \"\",\n  suffixToAdd: \"\",\n  rangeToReplace: { start: { row: 4, column: 3 }, end: { row: 4, column: 15 } },\n  autoCompleteSet: [\"facets\", \"query\", \"size\"]\n}, {\n  name: \"ignoring meta keys\",\n  cursor: { row: 4, column: 14 },\n  no_context: true\n}]);\n\ncontext_tests('{\\n' + '   \"query\": {\\n' + '    \"field\": \"something\"\\n' + '   },\\n' + '   \"facets\": {},\\n' + '   \"size\": 20 \\n' + '}', MAPPING, SEARCH_KB, \"POST _search\", [{\n  name: \"trailing comma, end of line\",\n  cursor: { row: 4, column: 16 },\n  initialValue: \"\",\n  addTemplate: true,\n  prefixToAdd: \"\",\n  suffixToAdd: \", \",\n  rangeToReplace: { start: { row: 4, column: 16 }, end: { row: 4, column: 16 } },\n  autoCompleteSet: [\"facets\", \"query\", \"size\"]\n}, {\n  name: \"trailing comma, beginning of line\",\n  cursor: { row: 5, column: 1 },\n  initialValue: \"\",\n  addTemplate: true,\n  prefixToAdd: \"\",\n  suffixToAdd: \", \",\n  rangeToReplace: { start: { row: 5, column: 1 }, end: { row: 5, column: 1 } },\n  autoCompleteSet: [\"facets\", \"query\", \"size\"]\n}, {\n  name: \"prefix comma, beginning of line\",\n  cursor: { row: 6, column: 0 },\n  initialValue: \"\",\n  addTemplate: true,\n  prefixToAdd: \", \",\n  suffixToAdd: \"\",\n  rangeToReplace: { start: { row: 6, column: 0 }, end: { row: 6, column: 0 } },\n  autoCompleteSet: [\"facets\", \"query\", \"size\"]\n}, {\n  name: \"prefix comma, end of line\",\n  cursor: { row: 5, column: 14 },\n  initialValue: \"\",\n  addTemplate: true,\n  prefixToAdd: \", \",\n  suffixToAdd: \"\",\n  rangeToReplace: { start: { row: 5, column: 14 }, end: { row: 5, column: 14 } },\n  autoCompleteSet: [\"facets\", \"query\", \"size\"]\n}]);\n\ncontext_tests({\n  \"object\": 1,\n  \"array\": 1,\n  \"value_one_of\": 1,\n  \"value\": 2,\n  \"something_else\": 5\n}, MAPPING, {\n  endpoints: {\n    _test: {\n      patterns: [\"_test\"],\n      data_autocomplete_rules: {\n        object: { bla: 1 },\n        array: [1],\n        value_one_of: { __one_of: [1, 2] },\n        value: 3,\n        \"*\": { __one_of: [4, 5] }\n      }\n    }\n  }\n}, \"GET _test\", [{\n  name: \"not matching object when { is not opened\",\n  cursor: { row: 1, column: 12 },\n  initialValue: \"\",\n  autoCompleteSet: [\"{\"]\n}, {\n  name: \"not matching array when [ is not opened\",\n  cursor: { row: 2, column: 12 },\n  initialValue: \"\",\n  autoCompleteSet: [\"[\"]\n}, {\n  name: \"matching value with one_of\",\n  cursor: { row: 3, column: 19 },\n  initialValue: \"\",\n  autoCompleteSet: [1, 2]\n}, {\n  name: \"matching value\",\n  cursor: { row: 4, column: 12 },\n  initialValue: \"\",\n  autoCompleteSet: [3]\n}, {\n  name: \"matching any value with one_of\",\n  cursor: { row: 5, column: 21 },\n  initialValue: \"\",\n  autoCompleteSet: [4, 5]\n}]);\n\ncontext_tests({\n  \"query\": {\n    \"field\": \"something\"\n  },\n  \"facets\": {\n    \"name\": {}\n  },\n  \"size\": 20\n}, MAPPING, SEARCH_KB, \"GET _search\", [{\n  name: \"* matching everything\",\n  cursor: { row: 5, column: 15 },\n  initialValue: \"\",\n  addTemplate: true,\n  prefixToAdd: \"\",\n  suffixToAdd: \"\",\n  rangeToReplace: { start: { row: 5, column: 15 }, end: { row: 5, column: 15 } },\n  autoCompleteSet: [{ name: \"terms\", meta: \"API\" }]\n}]);\n\ncontext_tests({\n  \"index\": \"123\"\n}, MAPPING, {\n  endpoints: {\n    _test: {\n      patterns: [\"_test\"],\n      data_autocomplete_rules: {\n        index: \"{index}\"\n      }\n    }\n  }\n}, \"GET _test\", [{\n  name: \"{index} matching\",\n  cursor: { row: 1, column: 15 },\n  autoCompleteSet: [{ name: \"index1\", meta: \"index\" }, { name: \"index2\", meta: \"index\" }]\n}]);\n\nfunction tt(term, template, meta) {\n  term = { name: term, template: template };\n  if (meta) {\n    term.meta = meta;\n  }\n  return term;\n}\n\ncontext_tests({\n  \"array\": [\"a\"],\n  \"oneof\": \"1\"\n}, MAPPING, {\n  endpoints: {\n    _endpoint: {\n      patterns: [\"_endpoint\"],\n      data_autocomplete_rules: {\n        array: [\"a\", \"b\"],\n        number: 1,\n        object: {},\n        fixed: { __template: { \"a\": 1 } },\n        oneof: { __one_of: [\"o1\", \"o2\"] }\n      }\n    }\n  }\n}, \"GET _endpoint\", [{\n  name: \"Templates 1\",\n  cursor: { row: 1, column: 0 },\n  autoCompleteSet: [tt(\"array\", []), tt(\"fixed\", { a: 1 }), tt(\"number\", 1), tt(\"object\", {}), tt(\"oneof\", \"o1\")]\n}, {\n  name: \"Templates - one off\",\n  cursor: { row: 4, column: 12 },\n  autoCompleteSet: [tt(\"o1\"), tt(\"o2\")]\n}]);\n\ncontext_tests({\n  \"string\": \"value\",\n  \"context\": {}\n}, MAPPING, {\n  endpoints: {\n    _endpoint: {\n      patterns: [\"_endpoint\"],\n      data_autocomplete_rules: {\n        context: {\n          __one_of: [{\n            __condition: {\n              lines_regex: \"value\"\n            },\n            \"match\": {}\n          }, {\n            __condition: {\n              lines_regex: \"other\"\n            },\n            \"no_match\": {}\n          }, { \"always\": {} }]\n        }\n      }\n    }\n  }\n}, \"GET _endpoint\", [{\n  name: \"Conditionals\",\n  cursor: { row: 2, column: 15 },\n  autoCompleteSet: [tt(\"always\", {}), tt(\"match\", {})]\n}]);\n\ncontext_tests({\n  \"any_of_numbers\": [1],\n  \"any_of_obj\": [{\n    \"a\": 1\n  }],\n  \"any_of_mixed\": [{\n    \"a\": 1\n  }, 2]\n}, MAPPING, {\n  endpoints: {\n    _endpoint: {\n      patterns: [\"_endpoint\"],\n      data_autocomplete_rules: {\n        any_of_numbers: { __template: [1, 2], __any_of: [1, 2, 3] },\n        any_of_obj: {\n          __template: [{ c: 1 }], __any_of: [{ a: 1, b: 2 }, { c: 1 }]\n        },\n        any_of_mixed: {\n          __any_of: [{ a: 1 }, 3]\n        }\n      }\n    }\n  }\n}, \"GET _endpoint\", [{\n  name: \"Any of - templates\",\n  cursor: { row: 1, column: 0 },\n  autoCompleteSet: [tt(\"any_of_mixed\", []), tt(\"any_of_numbers\", [1, 2]), tt(\"any_of_obj\", [{ c: 1 }])]\n}, {\n  name: \"Any of - numbers\",\n  cursor: { row: 2, column: 2 },\n  autoCompleteSet: [1, 2, 3]\n}, {\n  name: \"Any of - object\",\n  cursor: { row: 6, column: 2 },\n  autoCompleteSet: [tt(\"a\", 1), tt(\"b\", 2), tt(\"c\", 1)]\n}, {\n  name: \"Any of - mixed - obj\",\n  cursor: { row: 11, column: 2 },\n  autoCompleteSet: [tt(\"a\", 1)]\n}, {\n  name: \"Any of - mixed - both\",\n  cursor: { row: 13, column: 2 },\n  autoCompleteSet: [tt(\"{\"), tt(3)]\n}]);\n\ncontext_tests({}, MAPPING, {\n  endpoints: {\n    _endpoint: {\n      patterns: [\"_endpoint\"],\n      data_autocomplete_rules: {\n        \"query\": \"\"\n      }\n    }\n  }\n}, \"GET _endpoint\", [{\n  name: \"Empty string as default\",\n  cursor: { row: 0, column: 1 },\n  autoCompleteSet: [tt(\"query\", \"\")]\n}]);\n\ncontext_tests({\n  \"a\": {\n    \"b\": {},\n    \"c\": {},\n    \"d\": {\n      t1a: {}\n    },\n    \"e\": {},\n    \"f\": [{}],\n    \"g\": {},\n    \"h\": {}\n  }\n}, MAPPING, {\n  globals: {\n    gtarget: {\n      t1: 2,\n      t1a: {\n        __scope_link: \".\"\n      }\n    }\n  },\n  endpoints: {\n    _current: {\n      patterns: [\"_current\"],\n      data_autocomplete_rules: {\n        \"a\": {\n          \"b\": {\n            __scope_link: \".a\"\n          },\n          \"c\": {\n            __scope_link: \"ext.target\"\n          },\n          \"d\": {\n            __scope_link: \"GLOBAL.gtarget\"\n          },\n          \"e\": {\n            __scope_link: \"ext\"\n          },\n          \"f\": [{\n            __scope_link: \"ext.target\"\n          }],\n          \"g\": {\n            __scope_link: function __scope_link() {\n              return {\n                \"a\": 1,\n                \"b\": 2\n              };\n            }\n          },\n          \"h\": {\n            __scope_link: \"GLOBAL.broken\"\n          }\n        }\n      }\n    },\n    ext: {\n      patterns: [\"ext\"],\n      data_autocomplete_rules: {\n        target: {\n          t2: 1\n        }\n      }\n    }\n  }\n}, \"GET _current\", [{\n  name: \"Relative scope link test\",\n  cursor: { row: 2, column: 12 },\n  autoCompleteSet: [tt(\"b\", {}), tt(\"c\", {}), tt(\"d\", {}), tt(\"e\", {}), tt(\"f\", [{}]), tt(\"g\", {}), tt(\"h\", {})]\n}, {\n  name: \"External scope link test\",\n  cursor: { row: 3, column: 12 },\n  autoCompleteSet: [tt(\"t2\", 1)]\n}, {\n  name: \"Global scope link test\",\n  cursor: { row: 4, column: 12 },\n  autoCompleteSet: [tt(\"t1\", 2), tt(\"t1a\", {})]\n}, {\n  name: \"Global scope link with an internal scope link\",\n  cursor: { row: 5, column: 17 },\n  autoCompleteSet: [tt(\"t1\", 2), tt(\"t1a\", {})]\n}, {\n  name: \"Entire endpoint scope link test\",\n  cursor: { row: 7, column: 12 },\n  autoCompleteSet: [tt(\"target\", {})]\n}, {\n  name: \"A scope link within an array\",\n  cursor: { row: 9, column: 10 },\n  autoCompleteSet: [tt(\"t2\", 1)]\n}, {\n  name: \"A function based scope link\",\n  cursor: { row: 11, column: 12 },\n  autoCompleteSet: [tt(\"a\", 1), tt(\"b\", 2)]\n}, {\n  name: \"A global scope link with wrong link\",\n  cursor: { row: 12, column: 12 },\n  assertThrows: /broken/\n\n}]);\n\ncontext_tests({}, MAPPING, {\n  globals: {\n    gtarget: {\n      t1: 2\n    }\n  },\n  endpoints: {\n    _current: {\n      patterns: [\"_current\"],\n      id: \"GET _current\",\n      data_autocomplete_rules: {\n        __scope_link: \"GLOBAL.gtarget\"\n      }\n    }\n  }\n}, \"GET _current\", [{\n  name: \"Top level scope link\",\n  cursor: { row: 0, column: 1 },\n  autoCompleteSet: [tt(\"t1\", 2)]\n}]);\n\ncontext_tests({\n  \"a\": {}\n}, MAPPING, {\n  endpoints: {\n    _endpoint: {\n      patterns: [\"_endpoint\"],\n      data_autocomplete_rules: {\n        \"a\": {},\n        \"b\": {}\n      }\n    }\n  }\n}, \"GET _endpoint\", [{\n  name: \"Path after empty object\",\n  cursor: { row: 1, column: 10 },\n  autoCompleteSet: [\"a\", \"b\"]\n}]);\n\ncontext_tests({\n  \"\": {}\n}, MAPPING, SEARCH_KB, \"POST _search\", [{\n  name: \"Replace an empty string\",\n  cursor: { row: 1, column: 4 },\n  rangeToReplace: { start: { row: 1, column: 3 }, end: { row: 1, column: 9 } }\n}]);\n\ncontext_tests({\n  \"a\": [{\n    \"c\": {}\n  }]\n}, MAPPING, {\n  endpoints: {\n    _endpoint: {\n      patterns: [\"_endpoint\"],\n      data_autocomplete_rules: {\n        \"a\": [{ b: 1 }]\n      }\n    }\n  }\n}, \"GET _endpoint\", [{\n  name: \"List of objects - internal autocomplete\",\n  cursor: { row: 3, column: 10 },\n  autoCompleteSet: [\"b\"]\n}, {\n  name: \"List of objects - external template\",\n  cursor: { row: 0, column: 1 },\n  autoCompleteSet: [tt(\"a\", [{}])]\n}]);\n\ncontext_tests({\n  \"query\": {\n    \"term\": {\n      \"field\": \"something\"\n    }\n  },\n  \"facets\": {\n    \"test\": {\n      \"terms\": {\n        \"field\": \"test\"\n      }\n    }\n  },\n  \"size\": 20\n}, MAPPING, SEARCH_KB, \"POST index1/_search\", [{\n  name: \"Field completion as scope\",\n  cursor: { row: 3, column: 10 },\n  autoCompleteSet: [tt(\"field1.1.1\", { \"f\": 1 }, \"string\"), tt(\"field1.1.2\", { \"f\": 1 }, \"string\")]\n}, {\n  name: \"Field completion as value\",\n  cursor: { row: 9, column: 23 },\n  autoCompleteSet: [{ name: \"field1.1.1\", meta: \"string\" }, { name: \"field1.1.2\", meta: \"string\" }]\n}]);\n\ncontext_tests(\"POST _search\", MAPPING, SEARCH_KB, null, [{\n  name: \"initial doc start\",\n  cursor: { row: 1, column: 0 },\n  autoCompleteSet: [\"{\"],\n  prefixToAdd: \"\",\n  suffixToAdd: \"\"\n}]);\n\ncontext_tests('{\\n' + '   \"query\": {} \\n' + '}\\n' + '\\n' + '\\n', MAPPING, SEARCH_KB, \"POST _search\", [{\n  name: \"Cursor rows after request end\",\n  cursor: { row: 4, column: 0 },\n  autoCompleteSet: [\"GET\", \"PUT\", \"POST\", \"DELETE\", \"HEAD\"],\n  prefixToAdd: \"\",\n  suffixToAdd: \" \"\n}, {\n  name: \"Cursor just after request end\",\n  cursor: { row: 2, column: 1 },\n  no_context: true\n}]);\n\nvar CLUSTER_KB = {\n  endpoints: {\n    \"_search\": {\n      patterns: [\"_search\", \"{indices}/{types}/_search\", \"{indices}/_search\"],\n      url_params: {\n        \"search_type\": [\"count\", \"query_then_fetch\"],\n        \"scroll\": \"10m\"\n      },\n      data_autocomplete_rules: {}\n    },\n    \"_cluster/stats\": {\n      patterns: [\"_cluster/stats\"],\n      indices_mode: \"none\",\n      data_autocomplete_rules: {}\n    },\n    \"_cluster/nodes/stats\": {\n      patterns: [\"_cluster/nodes/stats\"],\n      data_autocomplete_rules: {}\n    }\n  }\n};\n\ncontext_tests(null, MAPPING, CLUSTER_KB, \"GET _cluster\", [{\n  name: \"Endpoints with slashes - no slash\",\n  cursor: { row: 0, column: 8 },\n  autoCompleteSet: [\"_cluster/nodes/stats\", \"_cluster/stats\", \"_search\", \"index1\", \"index2\"],\n  prefixToAdd: \"\",\n  suffixToAdd: \"\"\n}]);\n\ncontext_tests(null, MAPPING, CLUSTER_KB, \"GET _cluster/\", [{\n  name: \"Endpoints with slashes - before slash\",\n  cursor: { row: 0, column: 7 },\n  autoCompleteSet: [\"_cluster/nodes/stats\", \"_cluster/stats\", \"_search\", \"index1\", \"index2\"],\n  prefixToAdd: \"\",\n  suffixToAdd: \"\"\n}, {\n  name: \"Endpoints with slashes - on slash\",\n  cursor: { row: 0, column: 12 },\n  autoCompleteSet: [\"_cluster/nodes/stats\", \"_cluster/stats\", \"_search\", \"index1\", \"index2\"],\n  prefixToAdd: \"\",\n  suffixToAdd: \"\"\n}, {\n  name: \"Endpoints with slashes - after slash\",\n  cursor: { row: 0, column: 13 },\n  autoCompleteSet: [\"nodes/stats\", \"stats\"],\n  prefixToAdd: \"\",\n  suffixToAdd: \"\"\n}]);\n\ncontext_tests(null, MAPPING, CLUSTER_KB, \"GET _cluster/no\", [{\n  name: \"Endpoints with slashes - after slash\",\n  cursor: { row: 0, column: 14 },\n  autoCompleteSet: [{ name: \"nodes/stats\", meta: \"endpoint\" }, { name: \"stats\", meta: \"endpoint\" }],\n  prefixToAdd: \"\",\n  suffixToAdd: \"\",\n  initialValue: \"no\"\n}]);\n\ncontext_tests(null, MAPPING, CLUSTER_KB, \"GET _cluster/nodes/st\", [{\n  name: \"Endpoints with two slashes\",\n  cursor: { row: 0, column: 20 },\n  autoCompleteSet: [\"stats\"],\n  prefixToAdd: \"\",\n  suffixToAdd: \"\",\n  initialValue: \"st\"\n}]);\n\ncontext_tests(null, MAPPING, CLUSTER_KB, \"GET \", [{\n  name: \"Immediately after space + method\",\n  cursor: { row: 0, column: 4 },\n  autoCompleteSet: [{ name: \"_cluster/nodes/stats\", meta: \"endpoint\" }, { name: \"_cluster/stats\", meta: \"endpoint\" }, { name: \"_search\", meta: \"endpoint\" }, { name: \"index1\", meta: \"index\" }, { name: \"index2\", meta: \"index\" }],\n  prefixToAdd: \"\",\n  suffixToAdd: \"\",\n  initialValue: \"\"\n}]);\n\ncontext_tests(null, MAPPING, CLUSTER_KB, \"GET cl\", [{\n  name: \"Endpoints by subpart\",\n  cursor: { row: 0, column: 6 },\n  autoCompleteSet: [{ name: \"_cluster/nodes/stats\", meta: \"endpoint\" }, { name: \"_cluster/stats\", meta: \"endpoint\" }, { name: \"_search\", meta: \"endpoint\" }, { name: \"index1\", meta: \"index\" }, { name: \"index2\", meta: \"index\" }],\n  prefixToAdd: \"\",\n  suffixToAdd: \"\",\n  initialValue: \"cl\"\n}]);\n\ncontext_tests(null, MAPPING, CLUSTER_KB, \"POST cl\", [{\n  name: \"Endpoints by subpart\",\n  cursor: { row: 0, column: 7 },\n  autoCompleteSet: [{ name: \"_cluster/nodes/stats\", meta: \"endpoint\" }, { name: \"_cluster/stats\", meta: \"endpoint\" }, { name: \"_search\", meta: \"endpoint\" }, { name: \"index1\", meta: \"index\" }, { name: \"index2\", meta: \"index\" }],\n  prefixToAdd: \"\",\n  suffixToAdd: \"\",\n  initialValue: \"cl\"\n}]);\n\ncontext_tests(null, MAPPING, CLUSTER_KB, \"GET _search?\", [{\n  name: \"Params just after ?\",\n  cursor: { row: 0, column: 12 },\n  autoCompleteSet: [{ name: \"filter_path\", meta: \"param\", \"insert_value\": \"filter_path=\" }, { name: \"format\", meta: \"param\", \"insert_value\": \"format=\" }, { name: \"pretty\", meta: \"flag\" }, { name: \"scroll\", meta: \"param\", \"insert_value\": \"scroll=\" }, { name: \"search_type\", meta: \"param\", \"insert_value\": \"search_type=\" }],\n  prefixToAdd: \"\",\n  suffixToAdd: \"\"\n}]);\n\ncontext_tests(null, MAPPING, CLUSTER_KB, \"GET _search?format=\", [{\n  name: \"Params values\",\n  cursor: { row: 0, column: 19 },\n  autoCompleteSet: [{ name: \"json\", meta: \"format\" }, { name: \"yaml\", meta: \"format\" }],\n  prefixToAdd: \"\",\n  suffixToAdd: \"\"\n}]);\n\ncontext_tests(null, MAPPING, CLUSTER_KB, \"GET _search?format=yaml&\", [{\n  name: \"Params after amp\",\n  cursor: { row: 0, column: 24 },\n  autoCompleteSet: [{ name: \"filter_path\", meta: \"param\", \"insert_value\": \"filter_path=\" }, { name: \"format\", meta: \"param\", \"insert_value\": \"format=\" }, { name: \"pretty\", meta: \"flag\" }, { name: \"scroll\", meta: \"param\", \"insert_value\": \"scroll=\" }, { name: \"search_type\", meta: \"param\", \"insert_value\": \"search_type=\" }],\n  prefixToAdd: \"\",\n  suffixToAdd: \"\"\n}]);\n\ncontext_tests(null, MAPPING, CLUSTER_KB, \"GET _search?format=yaml&search\", [{\n  name: \"Params on existing param\",\n  cursor: { row: 0, column: 26 },\n  rangeToReplace: {\n    start: { row: 0, column: 24 },\n    end: { row: 0, column: 30 }\n  },\n  autoCompleteSet: [{ name: \"filter_path\", meta: \"param\", \"insert_value\": \"filter_path=\" }, { name: \"format\", meta: \"param\", \"insert_value\": \"format=\" }, { name: \"pretty\", meta: \"flag\" }, { name: \"scroll\", meta: \"param\", \"insert_value\": \"scroll=\" }, { name: \"search_type\", meta: \"param\", \"insert_value\": \"search_type=\" }],\n  prefixToAdd: \"\",\n  suffixToAdd: \"\"\n}]);\n\ncontext_tests(null, MAPPING, CLUSTER_KB, \"GET _search?format=yaml&search_type=cou\", [{\n  name: \"Params on existing value\",\n  cursor: { row: 0, column: 37 },\n  rangeToReplace: {\n    start: { row: 0, column: 36 },\n    end: { row: 0, column: 39 }\n  },\n  autoCompleteSet: [{ name: \"count\", meta: \"search_type\" }, { name: \"query_then_fetch\", meta: \"search_type\" }],\n  prefixToAdd: \"\",\n  suffixToAdd: \"\"\n}]);\ncontext_tests(null, MAPPING, CLUSTER_KB, \"GET _search?format=yaml&search_type=cou\", [{\n  name: \"Params on just after = with existing value\",\n  cursor: { row: 0, column: 36 },\n  rangeToReplace: {\n    start: { row: 0, column: 36 },\n    end: { row: 0, column: 36 }\n  },\n  autoCompleteSet: [{ name: \"count\", meta: \"search_type\" }, { name: \"query_then_fetch\", meta: \"search_type\" }],\n  prefixToAdd: \"\",\n  suffixToAdd: \"\"\n}]);\n\ncontext_tests({\n  \"query\": {\n    \"field\": \"something\"\n  },\n  \"facets\": {},\n  \"size\": 20\n}, MAPPING, SEARCH_KB, \"POST http://somehost/_search\", [{\n  name: \"fullurl - existing dictionary key, no template\",\n  cursor: { row: 1, column: 6 },\n  initialValue: \"query\",\n  addTemplate: false,\n  prefixToAdd: \"\",\n  suffixToAdd: \"\",\n  rangeToReplace: { start: { row: 1, column: 3 }, end: { row: 1, column: 10 } },\n  autoCompleteSet: [\"facets\", \"query\", \"size\"]\n}, {\n  name: \"fullurl - existing inner dictionary key\",\n  cursor: { row: 2, column: 7 },\n  initialValue: \"field\",\n  addTemplate: false,\n  prefixToAdd: \"\",\n  suffixToAdd: \"\",\n  rangeToReplace: { start: { row: 2, column: 6 }, end: { row: 2, column: 13 } },\n  autoCompleteSet: [\"match_all\", \"term\"]\n}, {\n  name: \"fullurl - existing dictionary key, yes template\",\n  cursor: { row: 4, column: 7 },\n  initialValue: \"facets\",\n  addTemplate: true,\n  prefixToAdd: \"\",\n  suffixToAdd: \"\",\n  rangeToReplace: { start: { row: 4, column: 3 }, end: { row: 4, column: 15 } },\n  autoCompleteSet: [\"facets\", \"query\", \"size\"]\n}]);\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/core_plugins/console/public/tests/src/integration_tests.js\n// module id = 3174\n// module chunks = 2"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC7CA;AACA;AACA;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AClp8DA;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACjjQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACnFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACrtpLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACnEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}