{"remainingRequest":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\node_modules\\babel-loader\\lib\\index.js??ref--6-1!C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\src\\ui\\public\\vis\\vis_update_state.js","dependencies":[{"path":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\src\\ui\\public\\vis\\vis_update_state.js","mtime":1525446431442},{"path":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1493198456000},{"path":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\node_modules\\babel-loader\\lib\\index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.updateOldState = undefined;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * This function is responsible for updating old visStates - the actual saved object\n * object - into the format, that will be required by the current Kibana version.\n * This method will be executed for each saved vis object, that will be loaded.\n * It will return the updated version as Kibana would expect it. It does not modify\n * the passed state.\n */\nvar updateOldState = exports.updateOldState = function updateOldState(visState) {\n  if (!visState) return visState;\n  var newState = _lodash2.default.cloneDeep(visState);\n\n  if (visState.type === 'gauge' && visState.fontSize) {\n    delete newState.fontSize;\n    _lodash2.default.set(newState, 'gauge.style.fontSize', visState.fontSize);\n  }\n\n  // update old metric to the new one\n  if (['gauge', 'metric'].includes(visState.type) && _lodash2.default.get(visState.params, 'gauge.gaugeType', null) === 'Metric') {\n    newState.type = 'metric';\n    newState.params.addLegend = false;\n    newState.params.type = 'metric';\n    newState.params.metric = newState.params.gauge;\n    delete newState.params.gauge;\n    delete newState.params.metric.gaugeType;\n    delete newState.params.metric.gaugeStyle;\n    delete newState.params.metric.backStyle;\n    delete newState.params.metric.scale;\n    delete newState.params.metric.type;\n    delete newState.params.metric.orientation;\n    delete newState.params.metric.verticalSplit;\n    delete newState.params.metric.autoExtend;\n    newState.params.metric.metricColorMode = newState.params.metric.gaugeColorMode;\n    delete newState.params.metric.gaugeColorMode;\n  }\n\n  return newState;\n};",null]}