{"remainingRequest":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\node_modules\\babel-loader\\lib\\index.js??ref--6-1!C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\src\\core_plugins\\vega\\public\\data_model\\time_cache.js","dependencies":[{"path":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\src\\core_plugins\\vega\\public\\data_model\\time_cache.js","mtime":1525446285345},{"path":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1493198456000},{"path":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\node_modules\\babel-loader\\lib\\index.js","mtime":1503096278000}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Optimization caching - always return the same value if queried within this time\n * @type {number}\n */\nvar AlwaysCacheMaxAge = 40;\n\n/**\n * This class caches timefilter's bounds to minimize number of server requests\n */\n\nvar TimeCache = exports.TimeCache = function () {\n  function TimeCache(timefilter, maxAge) {\n    _classCallCheck(this, TimeCache);\n\n    this._timefilter = timefilter;\n    this._maxAge = maxAge;\n    this._cachedBounds = null;\n    this._cacheTS = 0;\n  }\n\n  // Simplifies unit testing\n  // noinspection JSMethodCanBeStatic\n\n\n  _createClass(TimeCache, [{\n    key: \"_now\",\n    value: function _now() {\n      return Date.now();\n    }\n\n    /**\n     * Get cached time range values\n     * @returns {{min: number, max: number}}\n     */\n\n  }, {\n    key: \"getTimeBounds\",\n    value: function getTimeBounds() {\n      var ts = this._now();\n\n      var bounds = void 0;\n      if (this._cachedBounds) {\n        var diff = ts - this._cacheTS;\n\n        // For very rapid usage (multiple calls within a few milliseconds)\n        // Avoids expensive time parsing\n        if (diff < AlwaysCacheMaxAge) {\n          return this._cachedBounds;\n        }\n\n        // If the time is relative, mode hasn't changed, and time hasn't changed more than maxAge,\n        // return old time to avoid multiple near-identical server calls\n        if (diff < this._maxAge) {\n          bounds = this._getBounds();\n          if (Math.abs(bounds.min - this._cachedBounds.min) < this._maxAge && Math.abs(bounds.max - this._cachedBounds.max) < this._maxAge) {\n            return this._cachedBounds;\n          }\n        }\n      }\n\n      this._cacheTS = ts;\n      this._cachedBounds = bounds || this._getBounds();\n\n      return this._cachedBounds;\n    }\n\n    /**\n     * Get parsed min/max values\n     * @returns {{min: number, max: number}}\n     * @private\n     */\n\n  }, {\n    key: \"_getBounds\",\n    value: function _getBounds() {\n      var bounds = this._timefilter.getBounds();\n      return {\n        min: bounds.min.valueOf(),\n        max: bounds.max.valueOf()\n      };\n    }\n  }]);\n\n  return TimeCache;\n}();",null]}