{"remainingRequest":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\node_modules\\babel-loader\\lib\\index.js??ref--6-1!C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\src\\ui\\public\\embeddable\\container_api.js","dependencies":[{"path":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\src\\ui\\public\\embeddable\\container_api.js","mtime":1525446343707},{"path":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1493198456000},{"path":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\node_modules\\babel-loader\\lib\\index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * The ContainerAPI is an interface for embeddable objects to interact with the container they are embedded within.\n */\nvar ContainerAPI = exports.ContainerAPI = function () {\n  function ContainerAPI() {\n    _classCallCheck(this, ContainerAPI);\n  }\n\n  _createClass(ContainerAPI, [{\n    key: 'addFilter',\n\n    /**\n     * Available so the embeddable object can trigger a filter action.\n     * @param field\n     * @param value\n     * @param operator\n     * @param index\n     */\n    value: function addFilter() /*field, value, operator, index */{\n      throw new Error('Must implement addFilter.');\n    }\n\n    /**\n     * @return {AppState}\n     */\n\n  }, {\n    key: 'getAppState',\n    value: function getAppState() {\n      throw new Error('Must implement getAppState.');\n    }\n\n    /**\n     * Call this to tell the container that this panel uses a particular index pattern.\n     * @param {string} panelIndex - a unique id that identifies the panel to update.\n     * @param {string} indexPattern - an index pattern the panel uses\n     */\n\n  }, {\n    key: 'registerPanelIndexPattern',\n    value: function registerPanelIndexPattern() /* panelIndex, indexPattern */{\n      throw new Error('Must implement registerPanelIndexPattern.');\n    }\n\n    /**\n     * @param {string} panelIndex - a unique id that identifies the panel to update.\n     * @param {Object} panelAttributes - the new panel attributes that will be applied to the panel.\n     * @return {Object} - the updated panel.\n     */\n\n  }, {\n    key: 'updatePanel',\n    value: function updatePanel() /*paneIndex, panelAttributes */{\n      throw new Error('Must implement updatePanel.');\n    }\n  }, {\n    key: 'getHidePanelTitles',\n    value: function getHidePanelTitles() {\n      return this.dashboardState.getHidePanelTitles();\n    }\n  }]);\n\n  return ContainerAPI;\n}();",null]}