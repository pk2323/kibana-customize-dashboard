{"remainingRequest":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\node_modules\\babel-loader\\lib\\index.js??ref--6-1!C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\src\\ui\\public\\time_buckets\\calc_auto_interval.js","dependencies":[{"path":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\src\\ui\\public\\time_buckets\\calc_auto_interval.js","mtime":1525446426716},{"path":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1493198456000},{"path":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\node_modules\\babel-loader\\lib\\index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TimeBucketsCalcAutoIntervalProvider = TimeBucketsCalcAutoIntervalProvider;\n\nvar _moment = require('moment');\n\nvar _moment2 = _interopRequireDefault(_moment);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar d = _moment2.default.duration;\nfunction TimeBucketsCalcAutoIntervalProvider() {\n  // these are the rounding rules used by roundInterval()\n\n  var roundingRules = [[d(500, 'ms'), d(100, 'ms')], [d(5, 'second'), d(1, 'second')], [d(7.5, 'second'), d(5, 'second')], [d(15, 'second'), d(10, 'second')], [d(45, 'second'), d(30, 'second')], [d(3, 'minute'), d(1, 'minute')], [d(9, 'minute'), d(5, 'minute')], [d(20, 'minute'), d(10, 'minute')], [d(45, 'minute'), d(30, 'minute')], [d(2, 'hour'), d(1, 'hour')], [d(6, 'hour'), d(3, 'hour')], [d(24, 'hour'), d(12, 'hour')], [d(1, 'week'), d(1, 'd')], [d(3, 'week'), d(1, 'week')], [d(1, 'year'), d(1, 'month')], [Infinity, d(1, 'year')]];\n\n  var revRoundingRules = roundingRules.slice(0).reverse();\n\n  function find(rules, check, last) {\n    function pick(buckets, duration) {\n      var target = duration / buckets;\n      var lastResp = void 0;\n\n      for (var i = 0; i < rules.length; i++) {\n        var rule = rules[i];\n        var resp = check(rule[0], rule[1], target);\n\n        if (resp == null) {\n          if (!last) continue;\n          if (lastResp) return lastResp;\n          break;\n        }\n\n        if (!last) return resp;\n        lastResp = resp;\n      }\n\n      // fallback to just a number of milliseconds, ensure ms is >= 1\n      var ms = Math.max(Math.floor(target), 1);\n      return _moment2.default.duration(ms, 'ms');\n    }\n\n    return function (buckets, duration) {\n      var interval = pick(buckets, duration);\n      if (interval) return _moment2.default.duration(interval._data);\n    };\n  }\n\n  return {\n    near: find(revRoundingRules, function near(bound, interval, target) {\n      if (bound > target) return interval;\n    }, true),\n\n    lessThan: find(revRoundingRules, function (bound, interval, target) {\n      if (interval < target) return interval;\n    }),\n\n    atLeast: find(revRoundingRules, function atLeast(bound, interval, target) {\n      if (interval <= target) return interval;\n    })\n  };\n}",null]}