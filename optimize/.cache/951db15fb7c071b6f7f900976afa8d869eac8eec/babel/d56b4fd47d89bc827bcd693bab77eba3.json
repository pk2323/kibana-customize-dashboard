{"remainingRequest":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\node_modules\\babel-loader\\lib\\index.js??ref--6-1!C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\src\\core_plugins\\vega\\public\\vega_view\\vega_base_view.js","dependencies":[{"path":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\src\\core_plugins\\vega\\public\\vega_view\\vega_base_view.js","mtime":1525446285933},{"path":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1493198456000},{"path":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\node_modules\\babel-loader\\lib\\index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.VegaBaseView = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nexports.bypassExternalUrlCheck = bypassExternalUrlCheck;\n\nvar _jquery = require('jquery');\n\nvar _jquery2 = _interopRequireDefault(_jquery);\n\nvar _vegaLib = require('vega-lib');\n\nvar vega = _interopRequireWildcard(_vegaLib);\n\nvar _vegaLite = require('vega-lite');\n\nvar vegaLite = _interopRequireWildcard(_vegaLite);\n\nvar _utils = require('../data_model/utils');\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n//https://github.com/elastic/kibana/issues/13327\nvega.scheme('elastic', ['#00B3A4', '#3185FC', '#DB1374', '#490092', '#FEB6DB', '#F98510', '#E6C220', '#BFA180', '#920000', '#461A0A']);\n\nvar bypassToken = Symbol();\n\nfunction bypassExternalUrlCheck(url) {\n  // processed in the  loader.sanitize  below\n  return { url: url, bypassToken: bypassToken };\n}\n\nvar VegaBaseView = exports.VegaBaseView = function () {\n  function VegaBaseView(vegaConfig, editorMode, parentEl, vegaParser, serviceSettings) {\n    _classCallCheck(this, VegaBaseView);\n\n    this._vegaConfig = vegaConfig;\n    this._editorMode = editorMode;\n    this._$parentEl = (0, _jquery2.default)(parentEl);\n    this._parser = vegaParser;\n    this._serviceSettings = serviceSettings;\n    this._view = null;\n    this._vegaViewConfig = null;\n    this._$messages = null;\n    this._destroyHandlers = [];\n    this._initialized = false;\n  }\n\n  _createClass(VegaBaseView, [{\n    key: 'init',\n    value: function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var _this = this;\n\n        var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, warn;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!this._initialized) {\n                  _context.next = 2;\n                  break;\n                }\n\n                throw new Error();\n\n              case 2:\n                // safety\n                this._initialized = true;\n\n                _context.prev = 3;\n\n                this._$parentEl.empty().addClass('vega-main').css('flex-direction', this._parser.containerDir);\n\n                // bypass the onWarn warning checks - in some cases warnings may still need to be shown despite being disabled\n                _iteratorNormalCompletion = true;\n                _didIteratorError = false;\n                _iteratorError = undefined;\n                _context.prev = 8;\n                for (_iterator = this._parser.warnings[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                  warn = _step.value;\n\n                  this._addMessage('warn', warn);\n                }\n\n                _context.next = 16;\n                break;\n\n              case 12:\n                _context.prev = 12;\n                _context.t0 = _context['catch'](8);\n                _didIteratorError = true;\n                _iteratorError = _context.t0;\n\n              case 16:\n                _context.prev = 16;\n                _context.prev = 17;\n\n                if (!_iteratorNormalCompletion && _iterator.return) {\n                  _iterator.return();\n                }\n\n              case 19:\n                _context.prev = 19;\n\n                if (!_didIteratorError) {\n                  _context.next = 22;\n                  break;\n                }\n\n                throw _iteratorError;\n\n              case 22:\n                return _context.finish(19);\n\n              case 23:\n                return _context.finish(16);\n\n              case 24:\n                if (!this._parser.error) {\n                  _context.next = 27;\n                  break;\n                }\n\n                this._addMessage('err', this._parser.error);\n                return _context.abrupt('return');\n\n              case 27:\n\n                this._$container = (0, _jquery2.default)('<div class=\"vega-view-container\">').appendTo(this._$parentEl);\n                this._$controls = (0, _jquery2.default)('<div class=\"vega-controls-container\">').css('flex-direction', this._parser.controlsDir).appendTo(this._$parentEl);\n\n                this._addDestroyHandler(function () {\n                  _this._$container.remove();\n                  _this._$container = null;\n                  _this._$controls.remove();\n                  _this._$controls = null;\n                  if (_this._$messages) {\n                    _this._$messages.remove();\n                    _this._$messages = null;\n                  }\n                });\n\n                this._vegaViewConfig = this.createViewConfig();\n\n                // The derived class should create this method\n                _context.next = 33;\n                return this._initViewCustomizations();\n\n              case 33:\n                _context.next = 38;\n                break;\n\n              case 35:\n                _context.prev = 35;\n                _context.t1 = _context['catch'](3);\n\n                this.onError(_context.t1);\n\n              case 38:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[3, 35], [8, 12, 16, 24], [17,, 19, 23]]);\n      }));\n\n      function init() {\n        return _ref.apply(this, arguments);\n      }\n\n      return init;\n    }()\n  }, {\n    key: 'createViewConfig',\n    value: function createViewConfig() {\n      var _this2 = this;\n\n      var config = {\n        logLevel: vega.Warn,\n        renderer: this._parser.renderer\n      };\n\n      // Override URL sanitizer to prevent external data loading (if disabled)\n      var loader = vega.loader();\n      var originalSanitize = loader.sanitize.bind(loader);\n      loader.sanitize = function (uri, options) {\n        if (uri.bypassToken === bypassToken) {\n          // If uri has a bypass token, the uri was encoded by bypassExternalUrlCheck() above.\n          // because user can only supply pure JSON data structure.\n          uri = uri.url;\n        } else if (!_this2._vegaConfig.enableExternalUrls) {\n          throw new Error('External URLs are not enabled. Add   vega.enableExternalUrls: true   to kibana.yml');\n        }\n        return originalSanitize(uri, options);\n      };\n      config.loader = loader;\n\n      return config;\n    }\n  }, {\n    key: 'onError',\n    value: function onError() {\n      this._addMessage('err', _utils.Utils.formatErrorToStr.apply(_utils.Utils, arguments));\n    }\n  }, {\n    key: 'onWarn',\n    value: function onWarn() {\n      if (!this._parser || !this._parser.hideWarnings) {\n        this._addMessage('warn', _utils.Utils.formatWarningToStr.apply(_utils.Utils, arguments));\n      }\n    }\n  }, {\n    key: '_addMessage',\n    value: function _addMessage(type, text) {\n      if (!this._$messages) {\n        this._$messages = (0, _jquery2.default)('<ul class=\"vega-messages\">').appendTo(this._$parentEl);\n      }\n      this._$messages.append((0, _jquery2.default)('<li class=\"vega-message-' + type + '\">').append((0, _jquery2.default)('<pre>').text(text)));\n    }\n  }, {\n    key: 'resize',\n    value: function resize() {\n      if (this._parser.useResize && this._view && this.updateVegaSize(this._view)) {\n        return this._view.runAsync();\n      }\n    }\n  }, {\n    key: 'updateVegaSize',\n    value: function updateVegaSize(view) {\n      // For some reason the object is slightly scrollable without the extra padding.\n      // This might be due to https://github.com/jquery/jquery/issues/3808\n      // Which is being fixed as part of jQuery 3.3.0\n      var heightExtraPadding = 6;\n      var width = Math.max(0, this._$container.width() - this._parser.paddingWidth);\n      var height = Math.max(0, this._$container.height() - this._parser.paddingHeight) - heightExtraPadding;\n      if (view.width() !== width || view.height() !== height) {\n        view.width(width).height(height);\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * Set global debug variable to simplify vega debugging in console. Show info message first time\n     */\n\n  }, {\n    key: 'setDebugValues',\n    value: function setDebugValues(view, spec, vlspec) {\n      if (!this._editorMode) {\n        // VEGA_DEBUG should only be enabled in the editor mode\n        return;\n      }\n\n      if (window) {\n        if (!view) {\n          // disposing, get rid of the stale debug info\n          delete window.VEGA_DEBUG;\n        } else {\n          if (window.VEGA_DEBUG === undefined && console) {\n            console.log('%cWelcome to Kibana Vega Plugin!', 'font-size: 16px; font-weight: bold;');\n            console.log('You can access the Vega view with VEGA_DEBUG. ' + 'Learn more at https://vega.github.io/vega/docs/api/debugging/.');\n          }\n\n          window.VEGA_DEBUG = window.VEGA_DEBUG || {};\n          window.VEGA_DEBUG.VEGA_VERSION = vega.version;\n          window.VEGA_DEBUG.VEGA_LITE_VERSION = vegaLite.version;\n          window.VEGA_DEBUG.view = view;\n          window.VEGA_DEBUG.vega_spec = spec;\n          window.VEGA_DEBUG.vegalite_spec = vlspec;\n        }\n      }\n    }\n  }, {\n    key: 'destroy',\n    value: function destroy() {\n      // properly handle multiple destroy() calls by converting this._destroyHandlers\n      // into the _ongoingDestroy promise, while handlers are being disposed\n      if (this._destroyHandlers) {\n        // If no destroy is yet running, execute all handlers and wait for all of them to resolve.\n        this._ongoingDestroy = Promise.all(this._destroyHandlers.map(function (v) {\n          return v();\n        }));\n        this._destroyHandlers = null;\n      }\n      return this._ongoingDestroy;\n    }\n  }, {\n    key: '_addDestroyHandler',\n    value: function _addDestroyHandler(handler) {\n      // If disposing hasn't started yet, enqueue it, otherwise dispose right away\n      // This creates a minor issue - if disposing has started but not yet finished,\n      // and we dispose the new handler right away, the destroy() does not wait for it.\n      // This behavior is no different from the case when disposing has already completed,\n      // so it shouldn't create any issues.\n      if (this._destroyHandlers) {\n        this._destroyHandlers.push(handler);\n      } else {\n        handler();\n      }\n    }\n  }]);\n\n  return VegaBaseView;\n}();",null]}