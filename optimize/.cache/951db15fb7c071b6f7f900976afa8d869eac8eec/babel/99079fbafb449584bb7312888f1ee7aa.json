{"remainingRequest":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\node_modules\\babel-loader\\lib\\index.js??ref--6-1!C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\src\\core_plugins\\vega\\public\\vega_editor_controller.js","dependencies":[{"path":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\src\\core_plugins\\vega\\public\\vega_editor_controller.js","mtime":1525446284761},{"path":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1493198456000},{"path":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\node_modules\\babel-loader\\lib\\index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _jsonStringifyPrettyCompact = require('json-stringify-pretty-compact');\n\nvar _jsonStringifyPrettyCompact2 = _interopRequireDefault(_jsonStringifyPrettyCompact);\n\nvar _hjson = require('hjson');\n\nvar _hjson2 = _interopRequireDefault(_hjson);\n\nvar _notify = require('ui/notify');\n\nvar _modules = require('ui/modules');\n\nrequire('ui/accessibility/kbn_ui_ace_keyboard_mode');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar _module = _modules.uiModules.get('kibana/vega', ['kibana']);\n_module.controller('VegaEditorController', function ($scope /*, kbnUiAceKeyboardModeService*/) {\n\n  var notify = new _notify.Notifier({ location: 'Vega' });\n\n  return new (function () {\n    function VegaEditorController() {\n      var _this = this;\n\n      _classCallCheck(this, VegaEditorController);\n\n      $scope.aceLoaded = function (editor) {\n        editor.$blockScrolling = Infinity;\n\n        var session = editor.getSession();\n        session.setTabSize(2);\n        session.setUseSoftTabs(true);\n\n        _this.aceEditor = editor;\n      };\n\n      $scope.formatJson = function (event) {\n        _this._format(event, _jsonStringifyPrettyCompact2.default, {\n          maxLength: _this._getCodeWidth()\n        });\n      };\n\n      $scope.formatHJson = function (event) {\n        _this._format(event, _hjson2.default.stringify, {\n          condense: _this._getCodeWidth(),\n          bracesSameLine: true,\n          keepWsc: true\n        });\n      };\n    }\n\n    _createClass(VegaEditorController, [{\n      key: '_getCodeWidth',\n      value: function _getCodeWidth() {\n        return this.aceEditor.getSession().getWrapLimit();\n      }\n    }, {\n      key: '_format',\n      value: function _format(event, stringify, opts) {\n        var _this2 = this;\n\n        event.preventDefault();\n\n        var newSpec = void 0;\n        try {\n          var spec = _hjson2.default.parse(this.aceEditor.getSession().doc.getValue(), { legacyRoot: false, keepWsc: true });\n          newSpec = stringify(spec, opts);\n        } catch (err) {\n          // This is a common case - user tries to format an invalid HJSON text\n          notify.error(err);\n          return;\n        }\n\n        // ui-ace only accepts changes from the editor when they\n        // happen outside of a digest cycle\n        // Per @spalger, we used $$postDigest() instead of setTimeout(() => {}, 0)\n        // because it better described the intention.\n        $scope.$$postDigest(function () {\n          // set the new value to the session doc so that it\n          // is treated as an edit by ace: ace adds it to the\n          // undo stack and emits it as a change like all\n          // other edits\n          _this2.aceEditor.getSession().doc.setValue(newSpec);\n        });\n      }\n    }]);\n\n    return VegaEditorController;\n  }())();\n});",null]}