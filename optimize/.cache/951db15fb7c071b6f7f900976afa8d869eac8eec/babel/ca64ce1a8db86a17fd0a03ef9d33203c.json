{"remainingRequest":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\node_modules\\babel-loader\\lib\\index.js??ref--6-1!C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\src\\core_plugins\\console\\public\\tests\\src\\editor_tests.js","dependencies":[{"path":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\src\\core_plugins\\console\\public\\tests\\src\\editor_tests.js","mtime":1525446212140},{"path":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1493198456000},{"path":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\node_modules\\babel-loader\\lib\\index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nvar _jquery = require('jquery');\n\nvar _jquery2 = _interopRequireDefault(_jquery);\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _input = require('../../src/input');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar ace = require('ace');\n\nvar editor_input1 = require('raw-loader!./editor_input1.txt');\nvar utils = require('../../src/utils');\n\nvar aceRange = ace.require(\"ace/range\");\nvar _window$QUnit = window.QUnit,\n    _module = _window$QUnit.module,\n    asyncTest = _window$QUnit.asyncTest,\n    deepEqual = _window$QUnit.deepEqual,\n    equal = _window$QUnit.equal,\n    start = _window$QUnit.start;\n\n\nvar input = void 0;\n\n_module(\"Editor\", {\n  setup: function setup() {\n    input = (0, _input.initializeInput)((0, _jquery2.default)('#editor'), (0, _jquery2.default)('#editor_actions'), (0, _jquery2.default)('#copy_as_curl'), null);\n    input.$el.show();\n    input.autocomplete._test.removeChangeListener();\n  },\n  teardown: function teardown() {\n    input.$el.hide();\n    input.autocomplete._test.addChangeListener();\n  }\n});\n\nvar testCount = 0;\n\nfunction utils_test(name, prefix, data, test) {\n  var id = testCount++;\n  if (typeof data == \"function\") {\n    test = data;\n    data = null;\n  }\n  if (data && typeof data != \"string\") {\n    data = JSON.stringify(data, null, 3);\n  }\n  if (data) {\n    if (prefix) {\n      data = prefix + \"\\n\" + data;\n    }\n  } else {\n    data = prefix;\n  }\n\n  asyncTest(\"Utils test \" + id + \" : \" + name, function () {\n    input.update(data, function () {\n      test();\n    });\n  });\n}\n\nfunction compareRequest(requests, expected) {\n  if (!Array.isArray(requests)) {\n    requests = [requests];\n    expected = [expected];\n  }\n\n  _lodash2.default.each(requests, function (r) {\n    delete r.range;\n  });\n  deepEqual(requests, expected);\n}\n\nvar simple_request = {\n  prefix: 'POST _search',\n  data: ['{', '   \"query\": { \"match_all\": {} }', '}'].join('\\n')\n};\n\nvar single_line_request = {\n  prefix: 'POST _search',\n  data: '{ \"query\": { \"match_all\": {} } }'\n};\n\nvar get_request_no_data = {\n  prefix: 'GET _stats'\n};\n\nvar multi_doc_request = {\n  prefix: 'POST _bulk',\n  data_as_array: ['{ \"index\": { \"_index\": \"index\", \"_type\":\"type\" } }', '{ \"field\": 1 }']\n};\nmulti_doc_request.data = multi_doc_request.data_as_array.join(\"\\n\");\n\nutils_test(\"simple request range\", simple_request.prefix, simple_request.data, function () {\n  input.getRequestRange(function (range) {\n    var expected = new aceRange.Range(0, 0, 3, 1);\n    compareRequest(range, expected);\n    start();\n  });\n});\n\nutils_test(\"simple request data\", simple_request.prefix, simple_request.data, function () {\n  input.getRequest(function (request) {\n    var expected = {\n      method: \"POST\",\n      url: \"_search\",\n      data: [simple_request.data]\n    };\n\n    compareRequest(request, expected);\n    start();\n  });\n});\n\nutils_test(\"simple request range, prefixed with spaces\", \"   \" + simple_request.prefix, simple_request.data, function () {\n  input.getRequestRange(function (range) {\n    var expected = new aceRange.Range(0, 0, 3, 1);\n    deepEqual(range, expected);\n    start();\n  });\n});\n\nutils_test(\"simple request data, prefixed with spaces\", \"    \" + simple_request.prefix, simple_request.data, function () {\n  input.getRequest(function (request) {\n    var expected = {\n      method: \"POST\",\n      url: \"_search\",\n      data: [simple_request.data]\n    };\n\n    compareRequest(request, expected);\n    start();\n  });\n});\n\nutils_test(\"simple request range, suffixed with spaces\", simple_request.prefix + \"   \", simple_request.data + \"  \", function () {\n  input.getRequestRange(function (range) {\n    var expected = new aceRange.Range(0, 0, 3, 1);\n    compareRequest(range, expected);\n    start();\n  });\n});\n\nutils_test(\"simple request data, suffixed with spaces\", simple_request.prefix + \"    \", simple_request.data + \" \", function () {\n  input.getRequest(function (request) {\n    var expected = {\n      method: \"POST\",\n      url: \"_search\",\n      data: [simple_request.data]\n    };\n\n    compareRequest(request, expected);\n    start();\n  });\n});\n\nutils_test(\"single line request range\", single_line_request.prefix, single_line_request.data, function () {\n  input.getRequestRange(function (range) {\n    var expected = new aceRange.Range(0, 0, 1, 32);\n    compareRequest(range, expected);\n    start();\n  });\n});\n\nutils_test(\"full url: single line request data\", \"POST https://somehoset/_search\", single_line_request.data, function () {\n  input.getRequest(function (request) {\n    var expected = {\n      method: \"POST\",\n      url: \"https://somehoset/_search\",\n      data: [single_line_request.data]\n    };\n\n    compareRequest(request, expected);\n    start();\n  });\n});\n\nutils_test(\"request with no data followed by a new line\", get_request_no_data.prefix, \"\\n\", function () {\n  input.getRequestRange(function (range) {\n    var expected = new aceRange.Range(0, 0, 0, 10);\n    compareRequest(range, expected);\n    start();\n  });\n});\n\nutils_test(\"request with no data followed by a new line (data)\", get_request_no_data.prefix, \"\\n\", function () {\n  input.getRequest(function (request) {\n    var expected = {\n      method: \"GET\",\n      url: \"_stats\",\n      data: []\n    };\n\n    compareRequest(request, expected);\n    start();\n  });\n});\n\nutils_test(\"request with no data\", get_request_no_data.prefix, get_request_no_data.data, function () {\n  input.getRequestRange(function (range) {\n    var expected = new aceRange.Range(0, 0, 0, 10);\n    deepEqual(range, expected);\n    start();\n  });\n});\n\nutils_test(\"request with no data (data)\", get_request_no_data.prefix, get_request_no_data.data, function () {\n  input.getRequest(function (request) {\n    var expected = {\n      method: \"GET\",\n      url: \"_stats\",\n      data: []\n    };\n\n    compareRequest(request, expected);\n    start();\n  });\n});\n\nutils_test(\"multi doc request range\", multi_doc_request.prefix, multi_doc_request.data, function () {\n  input.getRequestRange(function (range) {\n    var expected = new aceRange.Range(0, 0, 2, 14);\n    deepEqual(range, expected);\n    start();\n  });\n});\n\nutils_test(\"multi doc request data\", multi_doc_request.prefix, multi_doc_request.data, function () {\n  input.getRequest(function (request) {\n    var expected = {\n      method: \"POST\",\n      url: \"_bulk\",\n      data: multi_doc_request.data_as_array\n    };\n\n    compareRequest(request, expected);\n    start();\n  });\n});\n\nvar script_request = {\n  prefix: 'POST _search',\n  data: ['{', '   \"query\": { \"script\": \"\"\"', '   some script ', '   \"\"\"}', '}'].join('\\n')\n};\n\nutils_test(\"script request range\", script_request.prefix, script_request.data, function () {\n  input.getRequestRange(function (range) {\n    var expected = new aceRange.Range(0, 0, 5, 1);\n    compareRequest(range, expected);\n    start();\n  });\n});\n\nutils_test(\"simple request data\", simple_request.prefix, simple_request.data, function () {\n  input.getRequest(function (request) {\n    var expected = {\n      method: \"POST\",\n      url: \"_search\",\n      data: [utils.collapseLiteralStrings(simple_request.data)]\n    };\n\n    compareRequest(request, expected);\n    start();\n  });\n});\n\nfunction multi_req_test(name, editor_input, range, expected) {\n  utils_test(\"multi request select - \" + name, editor_input, function () {\n    input.getRequestsInRange(range, function (requests) {\n      // convert to format returned by request.\n      _lodash2.default.each(expected, function (req) {\n        req.data = req.data == null ? [] : [JSON.stringify(req.data, null, 2)];\n      });\n\n      compareRequest(requests, expected);\n      start();\n    });\n  });\n}\n\nmulti_req_test(\"mid body to mid body\", editor_input1, { start: { row: 12 }, end: { row: 17 } }, [{\n  method: \"PUT\",\n  url: \"index_1/type1/1\",\n  data: {\n    \"f\": 1\n  }\n}, {\n  method: \"PUT\",\n  url: \"index_1/type1/2\",\n  data: {\n    \"f\": 2\n  }\n}]);\n\nmulti_req_test(\"single request start to end\", editor_input1, { start: { row: 10 }, end: { row: 13 } }, [{\n  method: \"PUT\",\n  url: \"index_1/type1/1\",\n  data: {\n    \"f\": 1\n  }\n}]);\n\nmulti_req_test(\"start to end, with comment\", editor_input1, { start: { row: 6 }, end: { row: 13 } }, [{\n  method: \"GET\",\n  url: \"_stats?level=shards\",\n  data: null\n}, {\n  method: \"PUT\",\n  url: \"index_1/type1/1\",\n  data: {\n    \"f\": 1\n  }\n}]);\n\nmulti_req_test(\"before start to after end, with comments\", editor_input1, { start: { row: 4 }, end: { row: 14 } }, [{\n  method: \"GET\",\n  url: \"_stats?level=shards\",\n  data: null\n}, {\n  method: \"PUT\",\n  url: \"index_1/type1/1\",\n  data: {\n    \"f\": 1\n  }\n}]);\n\nmulti_req_test(\"between requests\", editor_input1, { start: { row: 21 }, end: { row: 22 } }, []);\n\nmulti_req_test(\"between requests - with comment\", editor_input1, { start: { row: 20 }, end: { row: 22 } }, []);\n\nmulti_req_test(\"between requests - before comment\", editor_input1, { start: { row: 19 }, end: { row: 22 } }, []);\n\nfunction multi_req_copy_as_curl_test(name, editor_input, range, expected) {\n  utils_test(\"multi request copy as curl - \" + name, editor_input, function () {\n    input.getRequestsAsCURL(range, function (curl) {\n      equal(curl, expected);\n      start();\n    });\n  });\n}\n\nmulti_req_copy_as_curl_test(\"start to end, with comment\", editor_input1, { start: { row: 6 }, end: { row: 13 } }, '\\ncurl -XGET \"http://localhost:9200/_stats?level=shards\"\\n\\n#in between comment\\n\\ncurl -XPUT \"http://localhost:9200/index_1/type1/1\" -H \\'Content-Type: application/json\\' -d\\'\\n{\\n  \"f\": 1\\n}\\''.trim());",null]}