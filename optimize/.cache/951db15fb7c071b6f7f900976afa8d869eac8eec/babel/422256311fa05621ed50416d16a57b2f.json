{"remainingRequest":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\node_modules\\babel-loader\\lib\\index.js??ref--6-1!C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\src\\core_plugins\\kibana\\public\\dashboard\\lib\\save_dashboard.js","dependencies":[{"path":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\src\\core_plugins\\kibana\\public\\dashboard\\lib\\save_dashboard.js","mtime":1525446228666},{"path":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1493198456000},{"path":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\node_modules\\babel-loader\\lib\\index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.saveDashboard = saveDashboard;\n\nvar _update_saved_dashboard = require('./update_saved_dashboard');\n\n/**\n * Saves the dashboard.\n * @param toJson {function} A custom toJson function. Used because the previous code used\n * the angularized toJson version, and it was unclear whether there was a reason not to use\n * JSON.stringify\n * @param timeFilter\n * @param dashboardStateManager {DashboardStateManager}\n * @returns {Promise<string>} A promise that if resolved, will contain the id of the newly saved\n * dashboard.\n */\nfunction saveDashboard(toJson, timeFilter, dashboardStateManager) {\n  dashboardStateManager.saveState();\n\n  var savedDashboard = dashboardStateManager.savedDashboard;\n  var appState = dashboardStateManager.appState;\n\n  (0, _update_saved_dashboard.updateSavedDashboard)(savedDashboard, appState, timeFilter, toJson);\n\n  return savedDashboard.save().then(function (id) {\n    dashboardStateManager.lastSavedDashboardFilters = dashboardStateManager.getFilterState();\n    dashboardStateManager.resetState();\n    return id;\n  });\n}",null]}