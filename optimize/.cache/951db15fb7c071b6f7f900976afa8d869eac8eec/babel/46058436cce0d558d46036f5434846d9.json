{"remainingRequest":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\node_modules\\babel-loader\\lib\\index.js??ref--6-1!C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\src\\core_plugins\\kibana\\public\\management\\sections\\settings\\advanced_row.js","dependencies":[{"path":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\src\\core_plugins\\kibana\\public\\management\\sections\\settings\\advanced_row.js","mtime":1525446240730},{"path":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1493198456000},{"path":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\node_modules\\babel-loader\\lib\\index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nrequire('ui/elastic_textarea');\n\nrequire('ui/filters/markdown');\n\nvar _modules = require('ui/modules');\n\nvar _eui = require('@elastic/eui');\n\nvar _advanced_row = require('plugins/kibana/management/sections/settings/advanced_row.html');\n\nvar _advanced_row2 = _interopRequireDefault(_advanced_row);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_modules.uiModules.get('apps/management').directive('advancedRow', function (config, Notifier) {\n  return {\n    restrict: 'A',\n    replace: true,\n    template: _advanced_row2.default,\n    scope: {\n      conf: '=advancedRow',\n      configs: '='\n    },\n    link: function link($scope) {\n      var notify = new Notifier();\n\n      // To allow passing form validation state back\n      $scope.forms = {};\n\n      // setup loading flag, run async op, then clear loading and editing flag (just in case)\n      var loading = function loading(conf, fn) {\n        conf.loading = true;\n        fn().then(function () {\n          conf.loading = conf.editing = false;\n        }).catch(notify.fatal);\n      };\n\n      $scope.maybeCancel = function ($event, conf) {\n        if ($event.keyCode === _eui.keyCodes.ESCAPE) {\n          $scope.cancelEdit(conf);\n        }\n      };\n\n      $scope.edit = function (conf) {\n        conf.unsavedValue = conf.value == null ? conf.defVal : conf.value;\n        $scope.configs.forEach(function (c) {\n          c.editing = c === conf;\n        });\n      };\n\n      $scope.save = function (conf) {\n        // an empty JSON is valid as per the validateJson directive.\n        // set the value to empty JSON in this case so that its parsing upon retrieving the setting does not fail.\n        if (conf.type === 'json' && conf.unsavedValue === '') {\n          conf.unsavedValue = '{}';\n        }\n\n        loading(conf, function () {\n          if (conf.unsavedValue === conf.defVal) {\n            return config.remove(conf.name);\n          }\n\n          return config.set(conf.name, conf.unsavedValue);\n        });\n      };\n\n      $scope.cancelEdit = function (conf) {\n        conf.editing = false;\n      };\n\n      $scope.clear = function (conf) {\n        return loading(conf, function () {\n          return config.remove(conf.name);\n        });\n      };\n\n      $scope.isDefaultValue = function (conf) {\n        // conf.isCustom = custom setting, provided by user, so there is no notion of\n        // having a default or non-default value for it\n        return conf.isCustom || conf.value === undefined || conf.value === '' || String(conf.value) === String(conf.defVal);\n      };\n    }\n  };\n});",null]}