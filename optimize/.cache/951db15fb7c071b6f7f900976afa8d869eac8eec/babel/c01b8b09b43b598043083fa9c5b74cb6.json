{"remainingRequest":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\node_modules\\babel-loader\\lib\\index.js??ref--6-1!C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\src\\utils\\streams\\replace_stream.js","dependencies":[{"path":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\src\\utils\\streams\\replace_stream.js","mtime":1525446444713},{"path":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1493198456000},{"path":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\node_modules\\babel-loader\\lib\\index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createReplaceStream = createReplaceStream;\n\nvar _stream = require('stream');\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; }\n\nfunction createReplaceStream(toReplace, replacement) {\n  if (typeof toReplace !== 'string') {\n    throw new TypeError('toReplace must be a string');\n  }\n\n  var buffer = Buffer.alloc(0);\n  return new _stream.Transform({\n    objectMode: false,\n    transform: function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(value, enc, done) {\n        var index;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n\n                buffer = Buffer.concat([buffer, value], buffer.length + value.length);\n\n              case 2:\n                if (!true) {\n                  _context.next = 11;\n                  break;\n                }\n\n                // try to find the next instance of `toReplace` in buffer\n                index = buffer.indexOf(toReplace);\n\n                // if there is no next instance, break\n\n                if (!(index === -1)) {\n                  _context.next = 6;\n                  break;\n                }\n\n                return _context.abrupt('break', 11);\n\n              case 6:\n\n                // flush everything to the left of the next instance\n                // of `toReplace`\n                this.push(buffer.slice(0, index));\n\n                // then flush an instance of `replacement`\n                this.push(replacement);\n\n                // and finally update the buffer to include everything\n                // to the right of `toReplace`, dropping to replace from the buffer\n                buffer = buffer.slice(index + toReplace.length);\n                _context.next = 2;\n                break;\n\n              case 11:\n\n                // until now we have only flushed data that is to the left\n                // of a discovered instance of `toReplace`. If `toReplace` is\n                // never found this would lead to us buffering the entire stream.\n                //\n                // Instead, we only keep enough buffer to complete a potentially\n                // patial instance of `toReplace`\n                if (buffer.length > toReplace.length) {\n                  // the entire buffer except the last `toReplace.length` bytes\n                  // so that if all but one byte from `toReplace` is in the buffer,\n                  // and the next chunk delivers the necessary byte, the buffer will then\n                  // contain a complete `toReplace` token.\n                  this.push(buffer.slice(0, buffer.length - toReplace.length));\n                  buffer = buffer.slice(-toReplace.length);\n                }\n\n                done();\n                _context.next = 18;\n                break;\n\n              case 15:\n                _context.prev = 15;\n                _context.t0 = _context['catch'](0);\n\n                done(_context.t0);\n\n              case 18:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 15]]);\n      }));\n\n      function transform(_x, _x2, _x3) {\n        return _ref.apply(this, arguments);\n      }\n\n      return transform;\n    }(),\n    flush: function flush(callback) {\n      if (buffer.length) {\n        this.push(buffer);\n      }\n\n      buffer = null;\n      callback();\n    }\n  });\n}",null]}