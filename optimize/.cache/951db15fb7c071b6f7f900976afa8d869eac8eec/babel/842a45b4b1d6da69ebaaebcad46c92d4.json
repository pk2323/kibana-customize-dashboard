{"remainingRequest":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\node_modules\\babel-loader\\lib\\index.js??ref--6-1!C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\src\\core_plugins\\kibana\\public\\management\\sections\\indices\\create_index_pattern_wizard\\lib\\get_matched_indices.js","dependencies":[{"path":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\src\\core_plugins\\kibana\\public\\management\\sections\\indices\\create_index_pattern_wizard\\lib\\get_matched_indices.js","mtime":1525446237845},{"path":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1493198456000},{"path":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\node_modules\\babel-loader\\lib\\index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getMatchedIndices = getMatchedIndices;\n\nvar _constants = require('../constants');\n\nfunction filterSystemIndices(indices, isIncludingSystemIndices) {\n  if (!indices) {\n    return indices;\n  }\n\n  var acceptableIndices = isIncludingSystemIndices ? indices\n  // All system indices begin with a period.\n  : indices.filter(function (index) {\n    return !index.name.startsWith('.');\n  });\n\n  return acceptableIndices.slice(0, _constants.MAX_NUMBER_OF_MATCHING_INDICES);\n}\n\n/**\n This utility is designed to do a couple of things:\n\n 1) Take in list of indices and filter out system indices if necessary\n 2) Return a `visible` list based on a priority order.\n\n We are passing in three separate lists because they each represent\n something slightly different.\n\n - `unfilteredAllIndices`\n    This is the result of the initial `*` query and represents all known indices\n - `unfilteredPartialMatchedIndices`\n    This is the result of searching against the query with an added `*`. This is only\n    used when the query does not end in an `*` and represents potential matches in the UI\n - `unfilteredExactMatchedIndices\n    This is the result of searching against a query that already ends in `*`.\n    We call this `exact` matches because ES is telling us exactly what it matches\n */\nfunction getMatchedIndices(unfilteredAllIndices, unfilteredPartialMatchedIndices, unfilteredExactMatchedIndices, query, isIncludingSystemIndices) {\n  var allIndices = filterSystemIndices(unfilteredAllIndices, isIncludingSystemIndices);\n  var partialMatchedIndices = filterSystemIndices(unfilteredPartialMatchedIndices, isIncludingSystemIndices);\n  var exactMatchedIndices = filterSystemIndices(unfilteredExactMatchedIndices, isIncludingSystemIndices);\n\n  // We need to pick one to show in the UI and there is a priority here\n  // 1) If there are exact matches, show those as the query is good to go\n  // 2) If there are no exact matches, but there are partial matches,\n  // show the partial matches\n  // 3) If there are no exact or partial matches, just show all indices\n  var visibleIndices = void 0;\n  if (exactMatchedIndices.length) {\n    visibleIndices = exactMatchedIndices;\n  } else if (partialMatchedIndices.length) {\n    visibleIndices = partialMatchedIndices;\n  } else {\n    visibleIndices = allIndices;\n  }\n\n  return {\n    allIndices: allIndices,\n    exactMatchedIndices: exactMatchedIndices,\n    partialMatchedIndices: partialMatchedIndices,\n    visibleIndices: visibleIndices\n  };\n}",null]}