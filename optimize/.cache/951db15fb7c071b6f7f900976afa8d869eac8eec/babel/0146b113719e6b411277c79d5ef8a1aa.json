{"remainingRequest":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\node_modules\\babel-loader\\lib\\index.js??ref--6-1!C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\src\\core_plugins\\console\\public\\tests\\src\\kb_tests.js","dependencies":[{"path":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\src\\core_plugins\\console\\public\\tests\\src\\kb_tests.js","mtime":1525446212498},{"path":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1493198456000},{"path":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\node_modules\\babel-loader\\lib\\index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar kb = require('../../src/kb');\nvar mappings = require('../../src/mappings');\nvar autocomplete_engine = require('../../src/autocomplete/engine');\n\nvar _window$QUnit = window.QUnit,\n    test = _window$QUnit.test,\n    _module = _window$QUnit.module,\n    deepEqual = _window$QUnit.deepEqual;\n\n\n_module(\"Knowledge base\", {\n  setup: function setup() {\n    mappings.clear();\n    kb.setActiveApi(kb._test.loadApisFromJson({}));\n  },\n  teardown: function teardown() {\n    mappings.clear();\n    kb.setActiveApi(kb._test.loadApisFromJson({}));\n  }\n});\n\nvar MAPPING = {\n  \"index1\": {\n    \"type1.1\": {\n      \"properties\": {\n        \"field1.1.1\": { \"type\": \"string\" },\n        \"field1.1.2\": { \"type\": \"long\" }\n      }\n    },\n    \"type1.2\": {\n      \"properties\": {}\n    }\n  },\n  \"index2\": {\n    \"type2.1\": {\n      \"properties\": {\n        \"field2.1.1\": { \"type\": \"string\" },\n        \"field2.1.2\": { \"type\": \"string\" }\n      }\n    }\n  }\n};\n\nfunction testUrlContext(tokenPath, otherTokenValues, expectedContext) {\n\n  if (expectedContext.autoCompleteSet) {\n    expectedContext.autoCompleteSet = _lodash2.default.map(expectedContext.autoCompleteSet, function (t) {\n      if (_lodash2.default.isString(t)) {\n        t = { name: t };\n      }\n      return t;\n    });\n  }\n\n  var context = { otherTokenValues: otherTokenValues };\n  autocomplete_engine.populateContext(tokenPath, context, null, expectedContext.autoCompleteSet, kb.getTopLevelUrlCompleteComponents());\n\n  // override context to just check on id\n  if (context.endpoint) {\n    context.endpoint = context.endpoint.id;\n  }\n\n  delete context.otherTokenValues;\n\n  function norm(t) {\n    if (_lodash2.default.isString(t)) {\n      return { name: t };\n    }\n    return t;\n  }\n\n  if (context.autoCompleteSet) {\n    context.autoCompleteSet = _lodash2.default.sortBy(_lodash2.default.map(context.autoCompleteSet, norm), 'name');\n  }\n  if (expectedContext.autoCompleteSet) {\n    expectedContext.autoCompleteSet = _lodash2.default.sortBy(_lodash2.default.map(expectedContext.autoCompleteSet, norm), 'name');\n  }\n\n  deepEqual(context, expectedContext);\n}\n\nfunction t(term) {\n  return { name: term, meta: \"type\" };\n}\n\nfunction i(term) {\n  return { name: term, meta: \"index\" };\n}\n\nfunction index_test(name, tokenPath, otherTokenValues, expectedContext) {\n  test(name, function () {\n    var test_api = new kb._test.loadApisFromJson({\n      index_test: {\n        endpoints: {\n          _multi_indices: {\n            patterns: [\"{indices}/_multi_indices\"]\n          },\n          _single_index: { patterns: [\"{index}/_single_index\"] },\n          _no_index: {\n            // testing default patters\n            //  patterns: [\"_no_index\"]\n          }\n        }\n      }\n    }, kb._test.globalUrlComponentFactories);\n\n    kb.setActiveApi(test_api);\n\n    mappings.loadMappings(MAPPING);\n    testUrlContext(tokenPath, otherTokenValues, expectedContext);\n  });\n}\n\nindex_test(\"Index integration 1\", [], [], { autoCompleteSet: [\"_no_index\", i(\"index1\"), i(\"index2\")] });\n\nindex_test(\"Index integration 2\", [], [\"index1\"],\n// still return _no_index as index1 is not committed to yet.\n{ autoCompleteSet: [\"_no_index\", i(\"index2\")] });\n\nindex_test(\"Index integration 2\", [\"index1\"], [], { indices: [\"index1\"], autoCompleteSet: [\"_multi_indices\", \"_single_index\"] });\n\nindex_test(\"Index integration 2\", [[\"index1\", \"index2\"]], [], { indices: [\"index1\", \"index2\"], autoCompleteSet: [\"_multi_indices\"] });\n\nfunction type_test(name, tokenPath, otherTokenValues, expectedContext) {\n  test(name, function () {\n    var test_api = kb._test.loadApisFromJson({\n      \"type_test\": {\n        endpoints: {\n          _multi_types: { patterns: [\"{indices}/{types}/_multi_types\"] },\n          _single_type: { patterns: [\"{indices}/{type}/_single_type\"] },\n          _no_types: { patterns: [\"{indices}/_no_types\"] }\n        }\n      }\n    }, kb._test.globalUrlComponentFactories);\n    kb.setActiveApi(test_api);\n\n    mappings.loadMappings(MAPPING);\n\n    testUrlContext(tokenPath, otherTokenValues, expectedContext);\n  });\n}\n\ntype_test(\"Type integration 1\", [\"index1\"], [], { indices: [\"index1\"], autoCompleteSet: [\"_no_types\", t(\"type1.1\"), t(\"type1.2\")] });\ntype_test(\"Type integration 2\", [\"index1\"], [\"type1.2\"],\n// we are not yet comitted to type1.2, so _no_types is returned\n{ indices: [\"index1\"], autoCompleteSet: [\"_no_types\", t(\"type1.1\")] });\n\ntype_test(\"Type integration 3\", [\"index2\"], [], { indices: [\"index2\"], autoCompleteSet: [\"_no_types\", t(\"type2.1\")] });\n\ntype_test(\"Type integration 4\", [\"index1\", \"type1.2\"], [], { indices: [\"index1\"], types: [\"type1.2\"], autoCompleteSet: [\"_multi_types\", \"_single_type\"] });\n\ntype_test(\"Type integration 5\", [[\"index1\", \"index2\"], [\"type1.2\", \"type1.1\"]], [], { indices: [\"index1\", \"index2\"], types: [\"type1.2\", \"type1.1\"], autoCompleteSet: [\"_multi_types\"] });",null]}