{"remainingRequest":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\node_modules\\babel-loader\\lib\\index.js??ref--6-1!C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\src\\ui\\public\\visualize\\visualization.js","dependencies":[{"path":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\src\\ui\\public\\visualize\\visualization.js","mtime":1525446439377},{"path":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1493198456000},{"path":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\node_modules\\babel-loader\\lib\\index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nvar _Rx = require('rxjs/Rx');\n\nrequire('ui/visualize/spy');\n\nrequire('ui/visualize/visualize.less');\n\nrequire('ui/visualize/visualize_legend');\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _modules = require('ui/modules');\n\nvar _resize_checker = require('ui/resize_checker');\n\nvar _visualization = require('ui/visualize/visualization.html');\n\nvar _visualization2 = _interopRequireDefault(_visualization);\n\nvar _update_status = require('ui/vis/update_status');\n\nrequire('angular-sanitize');\n\nvar _render_complete = require('ui/render_complete');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; }\n\n_modules.uiModules.get('kibana/directive', ['ngSanitize']).directive('visualization', function ($timeout, Notifier, SavedVis, indexPatterns, Private, config) {\n  var ResizeChecker = Private(_resize_checker.ResizeCheckerProvider);\n\n  return {\n    restrict: 'E',\n    scope: {\n      showSpyPanel: '=?',\n      vis: '=',\n      visData: '=',\n      uiState: '=?',\n      // If set to true (default) the visualization directive will listen for\n      // several changes in the data and uiState to trigger a render. If set to\n      // false (boolean value, not a falsy value), this directive won't listen\n      // for any changes and require to be notified by the 'render' event broadcasted\n      // to its scope, that it needs to rerender this. Usually when using this as\n      // a consumer you don't want to change the default behavior.\n      listenOnChange: '<',\n      searchSource: '='\n    },\n    template: _visualization2.default,\n    link: function link($scope, $el) {\n      var _this = this;\n\n      //todo: lets make this a simple function call.\n      var getVisEl = jQueryGetter('.visualize-chart');\n      var getVisContainer = jQueryGetter('.vis-container');\n\n      $scope.addLegend = false;\n\n      // Set the passed in uiState to the vis object. uiState reference should never be changed\n      if (!$scope.uiState) $scope.uiState = $scope.vis.getUiState();else $scope.vis._setUiState($scope.uiState);\n\n      // Show no results message when isZeroHits is true and it requires search\n      $scope.showNoResultsMessage = function () {\n        var requiresSearch = _lodash2.default.get($scope, 'vis.type.requiresSearch');\n        var isZeroHits = _lodash2.default.get($scope, 'visData.hits.total') === 0;\n        var shouldShowMessage = !_lodash2.default.get($scope, 'vis.params.handleNoResults');\n\n        return Boolean(requiresSearch && isZeroHits && shouldShowMessage);\n      };\n\n      var legendPositionToVisContainerClassMap = {\n        top: 'vis-container--legend-top',\n        bottom: 'vis-container--legend-bottom',\n        left: 'vis-container--legend-left',\n        right: 'vis-container--legend-right'\n      };\n\n      $scope.getVisContainerClasses = function () {\n        return legendPositionToVisContainerClassMap[$scope.vis.params.legendPosition];\n      };\n\n      $scope.visElement = getVisContainer();\n\n      var loadingDelay = config.get('visualization:loadingDelay');\n      $scope.loadingStyle = {\n        '-webkit-transition-delay': loadingDelay,\n        'transition-delay': loadingDelay\n      };\n\n      var Visualization = $scope.vis.type.visualization;\n      var visualization = new Visualization(getVisEl()[0], $scope.vis);\n\n      $scope.vis.initialized = true;\n\n      var render$ = _Rx.Observable.create(function (observer) {\n        $scope.$on('render', function () {\n          observer.next({\n            vis: $scope.vis,\n            visData: $scope.visData,\n            container: getVisContainer()\n          });\n        });\n      }).share();\n\n      var success$ = render$.do(function () {\n        (0, _render_complete.dispatchRenderStart)($el[0]);\n      }).filter(function (_ref) {\n        var vis = _ref.vis,\n            visData = _ref.visData,\n            container = _ref.container;\n        return vis && vis.initialized && container && (!vis.type.requiresSearch || visData);\n      }).debounceTime(100).switchMap(function () {\n        var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(_ref2) {\n          var vis = _ref2.vis,\n              visData = _ref2.visData,\n              container = _ref2.container;\n          var status, renderPromise;\n          return regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  $scope.addLegend = vis.params.addLegend;\n                  vis.refreshLegend++;\n                  // We need to wait one digest cycle for the legend to render, before\n                  // we want to render the chart, so it know about the legend size.\n                  _context.next = 4;\n                  return new Promise(function (resolve) {\n                    return $timeout(resolve);\n                  });\n\n                case 4:\n                  vis.size = [container.width(), container.height()];\n                  status = (0, _update_status.getUpdateStatus)($scope);\n                  renderPromise = visualization.render(visData, status);\n\n                  $scope.$apply();\n                  return _context.abrupt('return', renderPromise);\n\n                case 9:\n                case 'end':\n                  return _context.stop();\n              }\n            }\n          }, _callee, _this);\n        }));\n\n        return function (_x) {\n          return _ref3.apply(this, arguments);\n        };\n      }());\n\n      var requestError$ = render$.filter(function (_ref4) {\n        var vis = _ref4.vis;\n        return vis.requestError;\n      });\n\n      var renderSubscription = _Rx.Observable.merge(success$, requestError$).subscribe(function () {\n        (0, _render_complete.dispatchRenderComplete)($el[0]);\n      });\n\n      $scope.$on('$destroy', function () {\n        visualization.destroy();\n        renderSubscription.unsubscribe();\n      });\n\n      // Listen on changes to trigger a render if listenOnChange is not false\n      // i.e. true or has not been used (undefined in that case)\n      if ($scope.listenOnChange !== false) {\n        var onChangeListener = function onChangeListener() {\n          $scope.$emit('render');\n        };\n\n        $scope.$watchGroup(['visData', 'vis.params'], onChangeListener);\n\n        var resizeChecker = new ResizeChecker($el);\n        resizeChecker.on('resize', function () {\n          $scope.$emit('render');\n        });\n\n        $scope.uiState.on('change', onChangeListener);\n        $scope.$on('$destroy', function () {\n          resizeChecker.destroy();\n          $scope.uiState.off('change', onChangeListener);\n        });\n      }\n\n      function jQueryGetter(selector) {\n        return function () {\n          var $sel = $el.find(selector);\n          if ($sel.length) return $sel;\n        };\n      }\n    }\n  };\n});",null]}