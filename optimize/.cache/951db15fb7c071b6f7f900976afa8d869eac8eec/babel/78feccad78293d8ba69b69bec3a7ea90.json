{"remainingRequest":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\node_modules\\babel-loader\\lib\\index.js??ref--6-1!C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\src\\core_plugins\\console\\public\\tests\\src\\mapping_tests.js","dependencies":[{"path":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\src\\core_plugins\\console\\public\\tests\\src\\mapping_tests.js","mtime":1525446212550},{"path":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1493198456000},{"path":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\node_modules\\babel-loader\\lib\\index.js","mtime":1503096278000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar mappings = require('../../src/mappings');\n\nvar _window$QUnit = window.QUnit,\n    test = _window$QUnit.test,\n    _module = _window$QUnit.module,\n    deepEqual = _window$QUnit.deepEqual;\n\n\n_module(\"Mappings\", {\n  setup: function setup() {\n    mappings.clear();\n  },\n  teardown: function teardown() {\n    mappings.clear();\n  }\n});\n\nfunction fc(f1, f2) {\n  if (f1.name < f2.name) {\n    return -1;\n  }\n  if (f1.name > f2.name) {\n    return 1;\n  }\n  return 0;\n}\n\nfunction f(name, type) {\n  return { name: name, type: type || \"string\" };\n}\n\ntest(\"Multi fields\", function () {\n  mappings.loadMappings({\n    \"index\": {\n      \"tweet\": {\n        \"properties\": {\n          \"first_name\": {\n            \"type\": \"multi_field\",\n            \"path\": \"just_name\",\n            \"fields\": {\n              \"first_name\": { \"type\": \"string\", \"index\": \"analyzed\" },\n              \"any_name\": { \"type\": \"string\", \"index\": \"analyzed\" }\n            }\n          },\n          \"last_name\": {\n            \"type\": \"multi_field\",\n            \"path\": \"just_name\",\n            \"fields\": {\n              \"last_name\": { \"type\": \"string\", \"index\": \"analyzed\" },\n              \"any_name\": { \"type\": \"string\", \"index\": \"analyzed\" }\n            }\n          }\n        }\n      }\n    }\n  });\n\n  deepEqual(mappings.getFields(\"index\").sort(fc), [f(\"any_name\", \"string\"), f(\"first_name\", \"string\"), f(\"last_name\", \"string\")]);\n});\n\ntest(\"Multi fields 1.0 style\", function () {\n  mappings.loadMappings({\n    \"index\": {\n      \"tweet\": {\n        \"properties\": {\n          \"first_name\": {\n            \"type\": \"string\", \"index\": \"analyzed\",\n            \"path\": \"just_name\",\n            \"fields\": {\n              \"any_name\": { \"type\": \"string\", \"index\": \"analyzed\" }\n            }\n          },\n          \"last_name\": {\n            \"type\": \"string\", \"index\": \"no\",\n            \"fields\": {\n              \"raw\": { \"type\": \"string\", \"index\": \"analyzed\" }\n            }\n          }\n        }\n      }\n    }\n  });\n\n  deepEqual(mappings.getFields(\"index\").sort(fc), [f(\"any_name\", \"string\"), f(\"first_name\", \"string\"), f(\"last_name\", \"string\"), f(\"last_name.raw\", \"string\")]);\n});\n\ntest(\"Simple fields\", function () {\n  mappings.loadMappings({\n    \"index\": {\n      \"tweet\": {\n        \"properties\": {\n          \"str\": {\n            \"type\": \"string\"\n          },\n          \"number\": {\n            \"type\": \"int\"\n          }\n        }\n      }\n    }\n  });\n\n  deepEqual(mappings.getFields(\"index\").sort(fc), [f(\"number\", \"int\"), f(\"str\", \"string\")]);\n});\n\ntest(\"Simple fields - 1.0 style\", function () {\n  mappings.loadMappings({\n    \"index\": {\n      \"mappings\": {\n        \"tweet\": {\n          \"properties\": {\n            \"str\": {\n              \"type\": \"string\"\n            },\n            \"number\": {\n              \"type\": \"int\"\n            }\n          }\n        }\n      }\n    }\n  });\n\n  deepEqual(mappings.getFields(\"index\").sort(fc), [f(\"number\", \"int\"), f(\"str\", \"string\")]);\n});\n\ntest(\"Nested fields\", function () {\n  mappings.loadMappings({\n    \"index\": {\n      \"tweet\": {\n        \"properties\": {\n          \"person\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"name\": {\n                \"properties\": {\n                  \"first_name\": { \"type\": \"string\" },\n                  \"last_name\": { \"type\": \"string\" }\n                }\n              },\n              \"sid\": { \"type\": \"string\", \"index\": \"not_analyzed\" }\n            }\n          },\n          \"message\": { \"type\": \"string\" }\n        }\n      }\n    }\n  });\n\n  deepEqual(mappings.getFields(\"index\", [\"tweet\"]).sort(fc), [f(\"message\"), f(\"person.name.first_name\"), f(\"person.name.last_name\"), f(\"person.sid\")]);\n});\n\ntest(\"Enabled fields\", function () {\n  mappings.loadMappings({\n    \"index\": {\n      \"tweet\": {\n        \"properties\": {\n          \"person\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"name\": {\n                \"type\": \"object\",\n                \"enabled\": false\n              },\n              \"sid\": { \"type\": \"string\", \"index\": \"not_analyzed\" }\n            }\n          },\n          \"message\": { \"type\": \"string\" }\n        }\n      }\n    }\n  });\n\n  deepEqual(mappings.getFields(\"index\", [\"tweet\"]).sort(fc), [f(\"message\"), f(\"person.sid\")]);\n});\n\ntest(\"Path tests\", function () {\n  mappings.loadMappings({\n    \"index\": {\n      \"person\": {\n        \"properties\": {\n          \"name1\": {\n            \"type\": \"object\",\n            \"path\": \"just_name\",\n            \"properties\": {\n              \"first1\": { \"type\": \"string\" },\n              \"last1\": { \"type\": \"string\", \"index_name\": \"i_last_1\" }\n            }\n          },\n          \"name2\": {\n            \"type\": \"object\",\n            \"path\": \"full\",\n            \"properties\": {\n              \"first2\": { \"type\": \"string\" },\n              \"last2\": { \"type\": \"string\", \"index_name\": \"i_last_2\" }\n            }\n          }\n        }\n      }\n    }\n  });\n\n  deepEqual(mappings.getFields().sort(fc), [f(\"first1\"), f(\"i_last_1\"), f(\"name2.first2\"), f(\"name2.i_last_2\")]);\n});\n\ntest(\"Use index_name tests\", function () {\n  mappings.loadMappings({\n    \"index\": {\n      \"person\": {\n        \"properties\": {\n          \"last1\": { \"type\": \"string\", \"index_name\": \"i_last_1\" }\n        }\n      }\n    }\n  });\n\n  deepEqual(mappings.getFields().sort(fc), [f(\"i_last_1\")]);\n});\n\ntest(\"Aliases\", function () {\n  mappings.loadAliases({\n    \"test_index1\": {\n      \"aliases\": {\n        \"alias1\": {}\n      }\n    },\n    \"test_index2\": {\n      \"aliases\": {\n        \"alias2\": {\n          \"filter\": {\n            \"term\": {\n              \"FIELD\": \"VALUE\"\n            }\n          }\n        },\n        \"alias1\": {}\n      }\n    }\n  });\n  mappings.loadMappings({\n    \"test_index1\": {\n      \"type1\": {\n        \"properties\": {\n          \"last1\": { \"type\": \"string\", \"index_name\": \"i_last_1\" }\n        }\n      }\n    },\n    \"test_index2\": {\n      \"type2\": {\n        \"properties\": {\n          \"last1\": { \"type\": \"string\", \"index_name\": \"i_last_1\" }\n        }\n      }\n    }\n  });\n\n  deepEqual(mappings.getIndices().sort(), [\"_all\", \"alias1\", \"alias2\", \"test_index1\", \"test_index2\"]);\n  deepEqual(mappings.getIndices(false).sort(), [\"test_index1\", \"test_index2\"]);\n  deepEqual(mappings.expandAliases([\"alias1\", \"test_index2\"]).sort(), [\"test_index1\", \"test_index2\"]);\n  deepEqual(mappings.expandAliases(\"alias2\"), \"test_index2\");\n});",null]}