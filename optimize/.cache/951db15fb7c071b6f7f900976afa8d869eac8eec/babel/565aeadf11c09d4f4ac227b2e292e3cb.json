{"remainingRequest":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\node_modules\\babel-loader\\lib\\index.js??ref--6-1!C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\src\\ui\\public\\visualize\\loader\\loader.js","dependencies":[{"path":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\src\\ui\\public\\visualize\\loader\\loader.js","mtime":1525446439908},{"path":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1493198456000},{"path":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\node_modules\\babel-loader\\lib\\index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.VisualizeLoaderProvider = exports.getVisualizeLoader = undefined;\n\nvar _angular = require('angular');\n\nvar _angular2 = _interopRequireDefault(_angular);\n\nvar _chrome = require('ui/chrome');\n\nvar _chrome2 = _interopRequireDefault(_chrome);\n\nrequire('ui/visualize');\n\nvar _loader_template = require('./loader_template.html');\n\nvar _loader_template2 = _interopRequireDefault(_loader_template);\n\nvar _embedded_visualize_handler = require('./embedded_visualize_handler');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; } /**\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * IMPORTANT: If you make changes to this API, please make sure to check that\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * the docs (docs/development/visualize/development-create-visualization.asciidoc)\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * are up to date.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            */\n\n\n/**\n * The parameters accepted by the embedVisualize calls.\n * @typedef {object} VisualizeLoaderParams\n * @property {AppState} appState The appState this visualization should use.\n *    If you don't spyecify it, the global AppState (that is decoded in the URL)\n *    will be used. Usually you don't need to overwrite this, unless you don't\n *    want the visualization to use the global AppState.\n * @property {UiState} uiState The current uiState of the application. If you\n *    don't pass a uiState, the visualization will creates it's own uiState to\n *    store information like whether the legend is open or closed, but you don't\n *    have access to it from the outside. Pass one in if you need that access.\n * @property {object} timeRange An object with a from/to key, that must be\n *    either a date in ISO format, or a valid datetime Elasticsearch expression,\n *    e.g.: { from: 'now-7d/d', to: 'now' }\n * @property {boolean} showSpyPanel Whether or not the spy panel should be available\n *    on this chart. If set to true, spy panels will only be shown if there are\n *    spy panels available for this specific visualization, since not every visualization\n *    supports all spy panels. (default: false)\n * @property {boolean} append If set to true, the visualization will be appended\n *    to the passed element instead of replacing all its content. (default: false)\n * @property {string} cssClass If specified this CSS class (or classes with space separated)\n *    will be set to the root visuzalize element.\n * @property {object} dataAttrs An object of key-value pairs, that will be set\n *    as data-{key}=\"{value}\" attributes on the visualization element.\n */\n\nvar VisualizeLoaderProvider = function VisualizeLoaderProvider($compile, $rootScope, savedVisualizations) {\n  var renderVis = function renderVis(el, savedObj, params) {\n    var scope = $rootScope.$new();\n    params = params || {};\n    scope.savedObj = savedObj;\n    scope.appState = params.appState;\n    scope.uiState = params.uiState;\n    scope.timeRange = params.timeRange;\n    scope.showSpyPanel = params.showSpyPanel;\n\n    var container = _angular2.default.element(el);\n\n    var visHtml = $compile(_loader_template2.default)(scope);\n\n    // If params specified cssClass, we will set this to the element.\n    if (params.cssClass) {\n      visHtml.addClass(params.cssClass);\n    }\n\n    // Apply data- attributes to the element if specified\n    if (params.dataAttrs) {\n      Object.keys(params.dataAttrs).forEach(function (key) {\n        visHtml.attr('data-' + key, params.dataAttrs[key]);\n      });\n    }\n\n    // If params.append was true append instead of replace content\n    if (params.append) {\n      container.append(visHtml);\n    } else {\n      container.html(visHtml);\n    }\n\n    return new _embedded_visualize_handler.EmbeddedVisualizeHandler(visHtml, scope);\n  };\n\n  return {\n    /**\n     * Renders a saved visualization specified by its id into a DOM element.\n     *\n     * @param {Element} element The DOM element to render the visualization into.\n     *    You can alternatively pass a jQuery element instead.\n     * @param {String} id The id of the saved visualization. This is the id of the\n     *    saved object that is stored in the .kibana index.\n     * @param {VisualizeLoaderParams} params A list of parameters that will influence rendering.\n     *\n     * @return {Promise.<EmbeddedVisualizeHandler>} A promise that resolves to the\n     *    handler for this visualization as soon as the saved object could be found.\n     */\n    embedVisualizationWithId: function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(element, savedVisualizationId, params) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt('return', new Promise(function (resolve, reject) {\n                  savedVisualizations.get(savedVisualizationId).then(function (savedObj) {\n                    var handler = renderVis(element, savedObj, params);\n                    resolve(handler);\n                  }, reject);\n                }));\n\n              case 1:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, undefined);\n      }));\n\n      function embedVisualizationWithId(_x, _x2, _x3) {\n        return _ref.apply(this, arguments);\n      }\n\n      return embedVisualizationWithId;\n    }(),\n    /**\n     * Renders a saved visualization specified by its savedObject into a DOM element.\n     * In most of the cases you will need this method, since it allows you to specify\n     * filters, handlers, queries, etc. on the savedObject before rendering.\n     *\n     * @param {Element} element The DOM element to render the visualization into.\n     *    You can alternatively pass a jQuery element instead.\n     * @param {Object} savedObj The savedObject as it could be retrieved by the\n     *    `savedVisualizations` service.\n     * @param {VisualizeLoaderParams} params A list of paramters that will influence rendering.\n     *\n     * @return {EmbeddedVisualizeHandler} The handler to the visualization.\n     */\n    embedVisualizationWithSavedObject: function embedVisualizationWithSavedObject(el, savedObj, params) {\n      return renderVis(el, savedObj, params);\n    },\n    /**\n     * Returns a promise, that resolves to a list of all saved visualizations.\n     *\n     * @return {Promise} Resolves with a list of all saved visualizations as\n     *    returned by the `savedVisualizations` service in Kibana.\n     */\n    getVisualizationList: function getVisualizationList() {\n      return savedVisualizations.find().then(function (result) {\n        return result.hits;\n      });\n    }\n  };\n};\n\n/**\n * Returns a promise, that resolves with the visualize loader, once it's ready.\n * @return {Promise} A promise, that resolves to the visualize loader.\n */\nfunction getVisualizeLoader() {\n  return _chrome2.default.dangerouslyGetActiveInjector().then(function ($injector) {\n    var Private = $injector.get('Private');\n    return Private(VisualizeLoaderProvider);\n  });\n}\n\nexports.getVisualizeLoader = getVisualizeLoader;\nexports.VisualizeLoaderProvider = VisualizeLoaderProvider;",null]}