{"remainingRequest":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\node_modules\\babel-loader\\lib\\index.js??ref--6-1!C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\src\\ui\\public\\directives\\input_base64.js","dependencies":[{"path":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\src\\ui\\public\\directives\\input_base64.js","mtime":1525446336740},{"path":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1493198456000},{"path":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\node_modules\\babel-loader\\lib\\index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _modules = require('ui/modules');\n\nvar _Rx = require('rxjs/Rx');\n\nvar _module = _modules.uiModules.get('kibana');\n\nvar multipleUsageErrorMessage = 'Cannot use input-base-sixty-four directive on input with `multiple` attribute';\n\nvar createFileContent$ = function createFileContent$(file) {\n  return _Rx.Observable.create(function (observer) {\n    var reader = new FileReader();\n    reader.onerror = function (err) {\n      observer.error(err);\n    };\n\n    reader.onload = function () {\n      observer.next(reader.result);\n      observer.complete();\n    };\n\n    reader.readAsDataURL(file);\n\n    return function () {\n      reader.abort();\n    };\n  });\n};\n\n_module.directive('inputBaseSixtyFour', function () {\n  return {\n    restrict: 'A',\n    require: 'ngModel',\n    scope: 'isolate',\n    link: function link($scope, $elem, attrs, ngModel) {\n      if ($elem.prop('multiple')) {\n        throw new Error(multipleUsageErrorMessage);\n      }\n\n      var maxSizeValidator = function maxSizeValidator(dataUrl) {\n        return {\n          errorKey: 'maxSize',\n          isValid: attrs.max === '' || dataUrl.length <= parseInt(attrs.max)\n        };\n      };\n\n      var validators = [maxSizeValidator];\n\n      // produce fileContent$ whenever the $element 'change' event is triggered.\n      var fileContent$ = _Rx.Observable.fromEvent($elem, 'change').map(function (e) {\n        return e.target.files;\n      }).switchMap(function (files) {\n        if (files.length === 0) {\n          return [];\n        }\n\n        if (files.length > 1) {\n          throw new Error(multipleUsageErrorMessage);\n        }\n\n        return createFileContent$(files[0]);\n      }).share();\n\n      // validate the content of the files after it is loaded\n      var validations$ = fileContent$.map(function (fileContent) {\n        return validators.map(function (validator) {\n          return validator(fileContent);\n        });\n      });\n\n      // push results from input/validation to the ngModel\n      var unsubscribe = _Rx.Observable.combineLatest(fileContent$, validations$).subscribe(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            fileContent = _ref2[0],\n            validations = _ref2[1];\n\n        $scope.$evalAsync(function () {\n          validations.forEach(function (validation) {\n            ngModel.$setValidity(validation.errorKey, validation.isValid);\n          });\n\n          if (validations.every(function (validation) {\n            return validation.isValid;\n          })) {\n            ngModel.$setViewValue(fileContent);\n          }\n        });\n      }, function (err) {\n        throw err;\n      });\n\n      $scope.$on('destroy', unsubscribe);\n    }\n  };\n});",null]}