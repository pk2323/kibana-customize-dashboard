{"remainingRequest":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\node_modules\\babel-loader\\lib\\index.js??ref--6-1!C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\src\\ui\\public\\kuery\\functions\\and.js","dependencies":[{"path":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\src\\ui\\public\\kuery\\functions\\and.js","mtime":1525446414769},{"path":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1493198456000},{"path":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\node_modules\\babel-loader\\lib\\index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.buildNodeParams = buildNodeParams;\nexports.toElasticsearchQuery = toElasticsearchQuery;\nexports.toKueryExpression = toKueryExpression;\n\nvar _ast = require('../ast');\n\nvar ast = _interopRequireWildcard(_ast);\n\nvar _node_types = require('../node_types');\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction buildNodeParams(children) {\n  var serializeStyle = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'operator';\n\n  return {\n    arguments: children,\n    serializeStyle: serializeStyle\n  };\n}\n\nfunction toElasticsearchQuery(node, indexPattern) {\n  var children = node.arguments || [];\n\n  return {\n    bool: {\n      filter: children.map(function (child) {\n        if (child.type === 'literal') {\n          child = _node_types.nodeTypes.function.buildNode('is', null, child.value);\n        }\n\n        return ast.toElasticsearchQuery(child, indexPattern);\n      })\n    }\n  };\n}\n\nfunction toKueryExpression(node) {\n  if (!['operator', 'implicit'].includes(node.serializeStyle)) {\n    throw new Error('Cannot serialize \"and\" function as \"' + node.serializeStyle + '\"');\n  }\n\n  var queryStrings = (node.arguments || []).map(function (arg) {\n    var query = ast.toKueryExpression(arg);\n    if (arg.type === 'function' && arg.function === 'or') {\n      return '(' + query + ')';\n    }\n    return query;\n  });\n\n  if (node.serializeStyle === 'implicit') {\n    return queryStrings.join(' ');\n  }\n  if (node.serializeStyle === 'operator') {\n    return queryStrings.join(' and ');\n  }\n}",null]}