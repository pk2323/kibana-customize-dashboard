{"remainingRequest":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\node_modules\\babel-loader\\lib\\index.js??ref--6-1!C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\src\\core_plugins\\console\\public\\tests\\src\\url_autocomplete_tests.js","dependencies":[{"path":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\src\\core_plugins\\console\\public\\tests\\src\\url_autocomplete_tests.js","mtime":1525446212637},{"path":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1493198456000},{"path":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\node_modules\\babel-loader\\lib\\index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nvar _ = require('lodash');\nvar url_pattern_matcher = require('../../src/autocomplete/url_pattern_matcher');\nvar autocomplete_engine = require('../../src/autocomplete/engine');\n\nvar _window$QUnit = window.QUnit,\n    test = _window$QUnit.test,\n    _module = _window$QUnit.module,\n    deepEqual = _window$QUnit.deepEqual;\n\n\n_module(\"Url autocomplete\");\n\nfunction patterns_test(name, endpoints, tokenPath, expectedContext, globalUrlComponentFactories) {\n\n  test(name, function () {\n    var patternMatcher = new url_pattern_matcher.UrlPatternMatcher(globalUrlComponentFactories);\n    _.each(endpoints, function (e, id) {\n      e.id = id;\n      _.each(e.patterns, function (p) {\n        patternMatcher.addEndpoint(p, e);\n      });\n    });\n    if (typeof tokenPath === \"string\") {\n      if (tokenPath[tokenPath.length - 1] == \"$\") {\n        tokenPath = tokenPath.substr(0, tokenPath.length - 1) + \"/\" + url_pattern_matcher.URL_PATH_END_MARKER;\n      }\n      tokenPath = _.map(tokenPath.split(\"/\"), function (p) {\n        p = p.split(\",\");\n        if (p.length === 1) {\n          return p[0];\n        }\n        return p;\n      });\n    }\n\n    if (expectedContext.autoCompleteSet) {\n      expectedContext.autoCompleteSet = _.map(expectedContext.autoCompleteSet, function (t) {\n        if (_.isString(t)) {\n          t = { name: t };\n        }\n        return t;\n      });\n      expectedContext.autoCompleteSet = _.sortBy(expectedContext.autoCompleteSet, 'name');\n    }\n\n    var context = {};\n    if (expectedContext.method) {\n      context.method = expectedContext.method;\n    }\n    autocomplete_engine.populateContext(tokenPath, context, null, expectedContext.autoCompleteSet, patternMatcher.getTopLevelComponents());\n\n    // override context to just check on id\n    if (context.endpoint) {\n      context.endpoint = context.endpoint.id;\n    }\n\n    if (context.autoCompleteSet) {\n      context.autoCompleteSet = _.sortBy(context.autoCompleteSet, 'name');\n    }\n\n    deepEqual(context, expectedContext);\n  });\n}\n\nfunction t(name, meta) {\n  if (meta) {\n    return { name: name, meta: meta };\n  }\n  return name;\n}\n\n(function () {\n  var endpoints = {\n    \"1\": {\n      patterns: [\"a/b\"]\n    }\n  };\n  patterns_test(\"simple single path - completion\", endpoints, \"a/b$\", { endpoint: \"1\" });\n\n  patterns_test(\"simple single path - completion, with auto complete\", endpoints, \"a/b\", { autoCompleteSet: [] });\n\n  patterns_test(\"simple single path - partial, without auto complete\", endpoints, \"a\", {});\n\n  patterns_test(\"simple single path - partial, with auto complete\", endpoints, \"a\", { autoCompleteSet: [\"b\"] });\n\n  patterns_test(\"simple single path - partial, with auto complete\", endpoints, [], { autoCompleteSet: [\"a/b\"] });\n\n  patterns_test(\"simple single path - different path\", endpoints, \"a/c\", {});\n})();\n\n(function () {\n  var endpoints = {\n    \"1\": {\n      patterns: [\"a/b\", \"a/b/{p}\"]\n    },\n    \"2\": {\n      patterns: [\"a/c\"]\n    }\n  };\n  patterns_test(\"shared path  - completion 1\", endpoints, \"a/b$\", { endpoint: \"1\" });\n\n  patterns_test(\"shared path  - completion 2\", endpoints, \"a/c$\", { endpoint: \"2\" });\n\n  patterns_test(\"shared path  - completion 1 with param\", endpoints, \"a/b/v$\", { endpoint: \"1\", p: \"v\" });\n\n  patterns_test(\"shared path - partial, with auto complete\", endpoints, \"a\", { autoCompleteSet: [\"b\", \"c\"] });\n\n  patterns_test(\"shared path - partial, with auto complete of param, no options\", endpoints, \"a/b\", { autoCompleteSet: [] });\n\n  patterns_test(\"shared path - partial, without auto complete\", endpoints, \"a\", {});\n\n  patterns_test(\"shared path - different path - with auto complete\", endpoints, \"a/e\", { autoCompleteSet: [] });\n\n  patterns_test(\"shared path - different path - without auto complete\", endpoints, \"a/e\", {});\n})();\n\n(function () {\n  var endpoints = {\n    \"1\": {\n      patterns: [\"a/{p}\"],\n      url_components: {\n        p: [\"a\", \"b\"]\n      }\n    },\n    \"2\": {\n      patterns: [\"a/c\"]\n    }\n  };\n  patterns_test(\"option testing - completion 1\", endpoints, \"a/a$\", { endpoint: \"1\", p: [\"a\"] });\n\n  patterns_test(\"option testing - completion 2\", endpoints, \"a/b$\", { endpoint: \"1\", p: [\"b\"] });\n\n  patterns_test(\"option testing - completion 3\", endpoints, \"a/b,a$\", { endpoint: \"1\", p: [\"b\", \"a\"] });\n\n  patterns_test(\"option testing - completion 4\", endpoints, \"a/c$\", { endpoint: \"2\" });\n\n  patterns_test(\"option testing  - completion 5\", endpoints, \"a/d$\", {});\n\n  patterns_test(\"option testing - partial, with auto complete\", endpoints, \"a\", { autoCompleteSet: [t(\"a\", \"p\"), t(\"b\", \"p\"), \"c\"] });\n\n  patterns_test(\"option testing - partial, without auto complete\", endpoints, \"a\", {});\n\n  patterns_test(\"option testing - different path - with auto complete\", endpoints, \"a/e\", { autoCompleteSet: [] });\n})();\n\n(function () {\n  var endpoints = {\n    \"1\": {\n      patterns: [\"a/{p}\"],\n      url_components: {\n        p: [\"a\", \"b\"]\n      }\n    },\n    \"2\": {\n      patterns: [\"b/{p}\"]\n    },\n    \"3\": {\n      patterns: [\"b/{l}/c\"],\n      url_components: {\n        l: {\n          type: \"list\",\n          list: [\"la\", \"lb\"],\n          allow_non_valid: true\n        }\n      }\n    }\n  };\n  var globalFactories = {\n    \"p\": function p(name, parent) {\n      return new autocomplete_engine.ListComponent(name, [\"g1\", \"g2\"], parent);\n    }\n  };\n\n  patterns_test(\"global parameters testing - completion 1\", endpoints, \"a/a$\", { endpoint: \"1\", p: [\"a\"] }, globalFactories);\n\n  patterns_test(\"global parameters testing - completion 2\", endpoints, \"b/g1$\", { endpoint: \"2\", p: [\"g1\"] }, globalFactories);\n\n  patterns_test(\"global parameters testing - partial, with auto complete\", endpoints, \"a\", { autoCompleteSet: [t(\"a\", \"p\"), t(\"b\", \"p\")] }, globalFactories);\n\n  patterns_test(\"global parameters testing - partial, with auto complete 2\", endpoints, \"b\", { autoCompleteSet: [t(\"g1\", \"p\"), t(\"g2\", \"p\"), t(\"la\", \"l\"), t(\"lb\", \"l\")] }, globalFactories);\n\n  patterns_test(\"Non valid token acceptance - partial, with auto complete 1\", endpoints, \"b/la\", { autoCompleteSet: [\"c\"], \"l\": [\"la\"] }, globalFactories);\n  patterns_test(\"Non valid token acceptance - partial, with auto complete 2\", endpoints, \"b/non_valid\", { autoCompleteSet: [\"c\"], \"l\": [\"non_valid\"] }, globalFactories);\n})();\n\n(function () {\n  var endpoints = {\n    \"1\": {\n      patterns: [\"a/b/{p}/c/e\"]\n    }\n  };\n  patterns_test(\"look ahead - autocomplete before param 1\", endpoints, \"a\", { autoCompleteSet: [\"b\"] });\n\n  patterns_test(\"look ahead - autocomplete before param 2\", endpoints, [], { autoCompleteSet: [\"a/b\"] });\n\n  patterns_test(\"look ahead - autocomplete after param 1\", endpoints, \"a/b/v\", { autoCompleteSet: [\"c/e\"], \"p\": \"v\" });\n\n  patterns_test(\"look ahead - autocomplete after param 2\", endpoints, \"a/b/v/c\", { autoCompleteSet: [\"e\"], \"p\": \"v\" });\n})();\n\n(function () {\n  var endpoints = {\n    \"1_param\": {\n      patterns: [\"a/{p}\"],\n      methods: [\"GET\"]\n    },\n    \"2_explicit\": {\n      patterns: [\"a/b\"],\n      methods: [\"GET\"]\n    }\n  };\n\n  var e = _.cloneDeep(endpoints);\n  e[\"1_param\"].priority = 1;\n  patterns_test(\"Competing endpoints - priority 1\", e, \"a/b$\", { method: \"GET\", endpoint: \"1_param\", \"p\": \"b\" });\n  e = _.cloneDeep(endpoints);\n  e[\"1_param\"].priority = 1;\n  e[\"2_explicit\"].priority = 0;\n  patterns_test(\"Competing endpoints - priority 2\", e, \"a/b$\", { method: \"GET\", endpoint: \"2_explicit\" });\n\n  e = _.cloneDeep(endpoints);\n  e[\"2_explicit\"].priority = 0;\n  patterns_test(\"Competing endpoints - priority 3\", e, \"a/b$\", { method: \"GET\", endpoint: \"2_explicit\" });\n})();\n\n(function () {\n  var endpoints = {\n    \"1_GET\": {\n      patterns: [\"a\"],\n      methods: [\"GET\"]\n    },\n    \"1_PUT\": {\n      patterns: [\"a\"],\n      methods: [\"PUT\"]\n    },\n    \"2_GET\": {\n      patterns: [\"a/b\"],\n      methods: [\"GET\"]\n    },\n    \"2_DELETE\": {\n      patterns: [\"a/b\"],\n      methods: [\"DELETE\"]\n    }\n  };\n  patterns_test(\"Competing endpoint - sub url of another - auto complete\", endpoints, \"a\", { method: \"GET\", autoCompleteSet: [\"b\"] });\n  patterns_test(\"Competing endpoint - sub url of another, complete 1\", endpoints, \"a$\", { method: \"GET\", endpoint: \"1_GET\" });\n  patterns_test(\"Competing endpoint - sub url of another, complete 2\", endpoints, \"a$\", { method: \"PUT\", endpoint: \"1_PUT\" });\n  patterns_test(\"Competing endpoint - sub url of another, complete 3\", endpoints, \"a$\", { method: \"DELETE\" });\n\n  patterns_test(\"Competing endpoint - extension of another, complete 1, auto complete\", endpoints, \"a/b$\", { method: \"PUT\", autoCompleteSet: [] });\n\n  patterns_test(\"Competing endpoint - extension of another, complete 1\", endpoints, \"a/b$\", { method: \"GET\", endpoint: \"2_GET\" });\n\n  patterns_test(\"Competing endpoint - extension of another, complete 1\", endpoints, \"a/b$\", { method: \"DELETE\", endpoint: \"2_DELETE\" });\n  patterns_test(\"Competing endpoint - extension of another, complete 1\", endpoints, \"a/b$\", { method: \"PUT\" });\n})();",null]}