{"remainingRequest":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\node_modules\\babel-loader\\lib\\index.js??ref--6-1!C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\src\\ui\\public\\visualize\\loader\\embedded_visualize_handler.js","dependencies":[{"path":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\src\\ui\\public\\visualize\\loader\\embedded_visualize_handler.js","mtime":1525446439845},{"path":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1493198456000},{"path":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\node_modules\\babel-loader\\lib\\index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EmbeddedVisualizeHandler = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _events = require('events');\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar RENDER_COMPLETE_EVENT = 'render_complete';\n\n/**\n * A handler to the embedded visualization. It offers several methods to interact\n * with the visualization.\n */\n\nvar EmbeddedVisualizeHandler = exports.EmbeddedVisualizeHandler = function () {\n  function EmbeddedVisualizeHandler(element, scope) {\n    var _this = this;\n\n    _classCallCheck(this, EmbeddedVisualizeHandler);\n\n    this._element = element;\n    this._scope = scope;\n    this._listeners = new _events.EventEmitter();\n    // Listen to the first RENDER_COMPLETE_EVENT to resolve this promise\n    this._firstRenderComplete = new Promise(function (resolve) {\n      _this._listeners.once(RENDER_COMPLETE_EVENT, resolve);\n    });\n    this._element.on('renderComplete', function () {\n      _this._listeners.emit(RENDER_COMPLETE_EVENT);\n    });\n  }\n\n  /**\n   * Destroy the underlying Angular scope of the visualization. This should be\n   * called whenever you remove the visualization.\n   */\n\n\n  _createClass(EmbeddedVisualizeHandler, [{\n    key: 'destroy',\n    value: function destroy() {\n      this._scope.$destroy();\n    }\n\n    /**\n     * Return the actual DOM element (wrapped in jQuery) of the rendered visualization.\n     * This is especially useful if you used `append: true` in the parameters where\n     * the visualization will be appended to the specified container.\n     */\n\n  }, {\n    key: 'getElement',\n    value: function getElement() {\n      return this._element;\n    }\n\n    /**\n     * Returns a promise, that will resolve (without a value) once the first rendering of\n     * the visualization has finished. If you want to listen to concecutive rendering\n     * events, look into the `addRenderCompleteListener` method.\n     *\n     * @returns {Promise} Promise, that resolves as soon as the visualization is done rendering\n     *    for the first time.\n     */\n\n  }, {\n    key: 'whenFirstRenderComplete',\n    value: function whenFirstRenderComplete() {\n      return this._firstRenderComplete;\n    }\n\n    /**\n     * Adds a listener to be called whenever the visualization finished rendering.\n     * This can be called multiple times, when the visualization rerenders, e.g. due\n     * to new data.\n     *\n     * @param {function} listener The listener to be notified about complete renders.\n     */\n\n  }, {\n    key: 'addRenderCompleteListener',\n    value: function addRenderCompleteListener(listener) {\n      this._listeners.addListener(RENDER_COMPLETE_EVENT, listener);\n    }\n\n    /**\n     * Removes a previously registered render complete listener from this handler.\n     * This listener will no longer be called when the visualization finished rendering.\n     *\n     * @param {function} listener The listener to remove from this handler.\n     */\n\n  }, {\n    key: 'removeRenderCompleteListener',\n    value: function removeRenderCompleteListener(listener) {\n      this._listeners.removeListener(RENDER_COMPLETE_EVENT, listener);\n    }\n  }]);\n\n  return EmbeddedVisualizeHandler;\n}();",null]}