{"remainingRequest":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\node_modules\\babel-loader\\lib\\index.js??ref--6-1!C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\src\\core_plugins\\metrics\\public\\lib\\validate_interval.js","dependencies":[{"path":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\src\\core_plugins\\metrics\\public\\lib\\validate_interval.js","mtime":1525446256468},{"path":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1493198456000},{"path":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\node_modules\\babel-loader\\lib\\index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateInterval = validateInterval;\n\nvar _parse_interval = require('ui/utils/parse_interval');\n\nvar _interval_regexp = require('../../common/interval_regexp');\n\nfunction validateInterval(bounds, panel, maxBuckets) {\n  var interval = panel.interval;\n  var min = bounds.min,\n      max = bounds.max;\n  // No need to check auto it will return around 100\n\n  if (!interval) return;\n  if (interval === 'auto') return;\n  var greaterThanMatch = interval.match(_interval_regexp.GTE_INTERVAL_RE);\n  if (greaterThanMatch) return;\n  var duration = (0, _parse_interval.parseInterval)(interval);\n  if (duration) {\n    var span = max.valueOf() - min.valueOf();\n    var buckets = Math.floor(span / duration.asMilliseconds());\n    if (buckets > maxBuckets) {\n      throw new Error('Max buckets exceeded: ' + buckets + ' is greater than ' + maxBuckets + ', try a larger time interval in the panel options.');\n    }\n  }\n}",null]}