{"remainingRequest":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\node_modules\\babel-loader\\lib\\index.js??ref--6-1!C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\src\\core_plugins\\console\\public\\tests\\src\\utils_tests.js","dependencies":[{"path":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\src\\core_plugins\\console\\public\\tests\\src\\utils_tests.js","mtime":1525446212790},{"path":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1493198456000},{"path":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\node_modules\\babel-loader\\lib\\index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nvar _ = require('lodash');\nvar utils = require('../../src/utils');\nvar collapsingTests = require('raw-loader!./utils_string_collapsing.txt');\nvar expandingTests = require('raw-loader!./utils_string_expanding.txt');\n\nvar _window$QUnit = window.QUnit,\n    test = _window$QUnit.test,\n    _module = _window$QUnit.module,\n    deepEqual = _window$QUnit.deepEqual;\n\n\n_module(\"Utils class\");\n\n_.each(collapsingTests.split(/^=+$/m), function (fixture) {\n  if (fixture.trim() == \"\") {\n    return;\n  }\n  fixture = fixture.split(/^-+$/m);\n  var name = fixture[0].trim(),\n      expanded = fixture[1].trim(),\n      collapsed = fixture[2].trim();\n\n  test(\"Literal collapse - \" + name, function () {\n    deepEqual(utils.collapseLiteralStrings(expanded), collapsed);\n  });\n});\n\n_.each(expandingTests.split(/^=+$/m), function (fixture) {\n  if (fixture.trim() == \"\") {\n    return;\n  }\n  fixture = fixture.split(/^-+$/m);\n  var name = fixture[0].trim(),\n      collapsed = fixture[1].trim(),\n      expanded = fixture[2].trim();\n\n  test(\"Literal expand - \" + name, function () {\n    deepEqual(utils.expandLiteralStrings(collapsed), expanded);\n  });\n\n  test(\"extract deprecation messages\", function () {\n    deepEqual(utils.extractDeprecationMessages('299 Elasticsearch-6.0.0-alpha1-SNAPSHOT-abcdef1 \"this is a warning\" \"Mon, 27 Feb 2017 14:52:14 GMT\"'), ['#! Deprecation: this is a warning']);\n    deepEqual(utils.extractDeprecationMessages('299 Elasticsearch-6.0.0-alpha1-SNAPSHOT-abcdef1 \"this is a warning\" \"Mon, 27 Feb 2017 14:52:14 GMT\", 299 Elasticsearch-6.0.0-alpha1-SNAPSHOT-abcdef1 \"this is a second warning\" \"Mon, 27 Feb 2017 14:52:14 GMT\"'), ['#! Deprecation: this is a warning', '#! Deprecation: this is a second warning']);\n    deepEqual(utils.extractDeprecationMessages('299 Elasticsearch-6.0.0-alpha1-SNAPSHOT-abcdef1 \"this is a warning, and it includes a comma\" \"Mon, 27 Feb 2017 14:52:14 GMT\"'), ['#! Deprecation: this is a warning, and it includes a comma']);\n    deepEqual(utils.extractDeprecationMessages('299 Elasticsearch-6.0.0-alpha1-SNAPSHOT-abcdef1 \"this is a warning, and it includes an escaped backslash \\\\\\\\ and a pair of \\\\\\\"escaped quotes\\\\\\\"\" \"Mon, 27 Feb 2017 14:52:14 GMT\"'), ['#! Deprecation: this is a warning, and it includes an escaped backslash \\\\ and a pair of \"escaped quotes\"']);\n  });\n\n  test(\"unescape\", function () {\n    deepEqual(utils.unescape('escaped backslash \\\\\\\\'), 'escaped backslash \\\\');\n    deepEqual(utils.unescape('a pair of \\\\\\\"escaped quotes\\\\\\\"'), 'a pair of \"escaped quotes\"');\n    deepEqual(utils.unescape('escaped quotes do not have to come in pairs: \\\\\\\"'), 'escaped quotes do not have to come in pairs: \"');\n  });\n\n  test(\"split on unquoted comma followed by space\", function () {\n    deepEqual(utils.splitOnUnquotedCommaSpace('a, b'), ['a', 'b']);\n    deepEqual(utils.splitOnUnquotedCommaSpace('a,b, c'), ['a,b', 'c']);\n    deepEqual(utils.splitOnUnquotedCommaSpace('\"a, b\"'), ['\"a, b\"']);\n    deepEqual(utils.splitOnUnquotedCommaSpace('\"a, b\", c'), ['\"a, b\"', 'c']);\n    deepEqual(utils.splitOnUnquotedCommaSpace('\"a, b\\\\\", c\"'), ['\"a, b\\\\\", c\"']);\n    deepEqual(utils.splitOnUnquotedCommaSpace(', a, b'), ['', 'a', 'b']);\n    deepEqual(utils.splitOnUnquotedCommaSpace('a, b, '), ['a', 'b', '']);\n    deepEqual(utils.splitOnUnquotedCommaSpace('\\\\\"a, b\", \"c, d\\\\\", e\", f\"'), ['\\\\\"a', 'b\", \"c', 'd\\\\\"', 'e\", f\"']);\n  });\n});",null]}