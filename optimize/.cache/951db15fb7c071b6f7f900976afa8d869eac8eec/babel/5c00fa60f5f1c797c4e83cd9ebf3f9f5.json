{"remainingRequest":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\node_modules\\babel-loader\\lib\\index.js??ref--6-1!C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\src\\core_plugins\\console\\public\\tests\\src\\url_params_tests.js","dependencies":[{"path":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\src\\core_plugins\\console\\public\\tests\\src\\url_params_tests.js","mtime":1525446212683},{"path":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1493198456000},{"path":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\node_modules\\babel-loader\\lib\\index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nvar _ = require('lodash');\nvar url_params = require('../../src/autocomplete/url_params');\nvar autocomplete_engine = require('../../src/autocomplete/engine');\n\nvar _window$QUnit = window.QUnit,\n    test = _window$QUnit.test,\n    _module = _window$QUnit.module,\n    deepEqual = _window$QUnit.deepEqual;\n\n\n_module(\"Url params\");\n\nfunction param_test(name, description, tokenPath, expectedContext, globalParams) {\n\n  test(name, function () {\n    var urlParams = new url_params.UrlParams(description, globalParams || {});\n    if (typeof tokenPath === \"string\") {\n      tokenPath = _.map(tokenPath.split(\"/\"), function (p) {\n        p = p.split(\",\");\n        if (p.length === 1) {\n          return p[0];\n        }\n        return p;\n      });\n    }\n\n    if (expectedContext.autoCompleteSet) {\n      expectedContext.autoCompleteSet = _.map(expectedContext.autoCompleteSet, function (t) {\n        if (_.isString(t)) {\n          t = { name: t };\n        }\n        return t;\n      });\n      expectedContext.autoCompleteSet = _.sortBy(expectedContext.autoCompleteSet, 'name');\n    }\n\n    var context = {};\n\n    autocomplete_engine.populateContext(tokenPath, context, null, expectedContext.autoCompleteSet, urlParams.getTopLevelComponents());\n\n    if (context.autoCompleteSet) {\n      context.autoCompleteSet = _.sortBy(context.autoCompleteSet, 'name');\n    }\n\n    deepEqual(context, expectedContext);\n  });\n}\n\nfunction t(name, meta, insert_value) {\n  var r = name;\n  if (meta) {\n    r = { name: name, meta: meta };\n    if (meta === \"param\" && !insert_value) {\n      insert_value = name + \"=\";\n    }\n  }\n  if (insert_value) {\n    if (_.isString(r)) {\n      r = { name: name };\n    }\n    r.insert_value = insert_value;\n  }\n  return r;\n}\n\n(function () {\n  var params = {\n    \"a\": [\"1\", \"2\"],\n    \"b\": \"__flag__\"\n  };\n  param_test(\"settings params\", params, \"a/1\", { \"a\": [\"1\"] });\n\n  param_test(\"autocomplete top level\", params, [], { autoCompleteSet: [t(\"a\", \"param\"), t(\"b\", \"flag\")] });\n\n  param_test(\"autocomplete top level, with defaults\", params, [], { autoCompleteSet: [t(\"a\", \"param\"), t(\"b\", \"flag\"), t(\"c\", \"param\")] }, {\n    \"c\": [2]\n  });\n\n  param_test(\"autocomplete values\", params, \"a\", { autoCompleteSet: [t(\"1\", \"a\"), t(\"2\", \"a\")] });\n\n  param_test(\"autocomplete values flag\", params, \"b\", { autoCompleteSet: [t(\"true\", \"b\"), t(\"false\", \"b\")] });\n})();",null]}