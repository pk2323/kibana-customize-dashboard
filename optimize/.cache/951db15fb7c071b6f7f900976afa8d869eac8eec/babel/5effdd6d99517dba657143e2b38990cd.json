{"remainingRequest":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\node_modules\\babel-loader\\lib\\index.js??ref--6-1!C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\src\\core_plugins\\vega\\public\\data_model\\es_query_parser.js","dependencies":[{"path":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\src\\core_plugins\\vega\\public\\data_model\\es_query_parser.js","mtime":1525446285280},{"path":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1493198456000},{"path":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\node_modules\\babel-loader\\lib\\index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EsQueryParser = undefined;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar TIMEFILTER = '%timefilter%';\nvar AUTOINTERVAL = '%autointerval%';\nvar MUST_CLAUSE = '%dashboard_context-must_clause%';\nvar MUST_NOT_CLAUSE = '%dashboard_context-must_not_clause%';\n\n// These values may appear in the  'url': { ... }  object\nvar LEGACY_CONTEXT = '%context_query%';\nvar CONTEXT = '%context%';\nvar TIMEFIELD = '%timefield%';\n\n/**\n * This class parses ES requests specified in the data.url objects.\n */\n\nvar EsQueryParser = exports.EsQueryParser = function () {\n  function EsQueryParser(timeCache, searchCache, dashboardContext, onWarning) {\n    _classCallCheck(this, EsQueryParser);\n\n    this._timeCache = timeCache;\n    this._searchCache = searchCache;\n    this._dashboardContext = dashboardContext;\n    this._onWarning = onWarning;\n  }\n\n  // noinspection JSMethodCanBeStatic\n  /**\n   * Update request object, expanding any context-aware keywords\n   */\n\n\n  _createClass(EsQueryParser, [{\n    key: 'parseUrl',\n    value: function parseUrl(dataObject, url) {\n      var body = url.body;\n      var context = url[CONTEXT];\n      delete url[CONTEXT];\n      var timefield = url[TIMEFIELD];\n      delete url[TIMEFIELD];\n      var usesContext = context !== undefined || timefield !== undefined;\n\n      if (body === undefined) {\n        url.body = body = {};\n      } else if (!_lodash2.default.isPlainObject(body)) {\n        throw new Error('url.body must be an object');\n      }\n\n      // Migrate legacy %context_query% into context & timefield values\n      var legacyContext = url[LEGACY_CONTEXT];\n      delete url[LEGACY_CONTEXT];\n      if (legacyContext !== undefined) {\n        if (body.query !== undefined) {\n          throw new Error('Data url must not have legacy \"' + LEGACY_CONTEXT + '\" and \"body.query\" values at the same time');\n        } else if (usesContext) {\n          throw new Error('Data url must not have \"' + LEGACY_CONTEXT + '\" together with \"' + CONTEXT + '\" or \"' + TIMEFIELD + '\"');\n        } else if (legacyContext !== true && (typeof legacyContext !== 'string' || legacyContext.length === 0)) {\n          throw new Error('Legacy \"' + LEGACY_CONTEXT + '\" can either be true (ignores time range picker), ' + 'or it can be the name of the time field, e.g. \"@timestamp\"');\n        }\n\n        usesContext = true;\n        context = true;\n        var result = '\"url\": {\"' + CONTEXT + '\": true';\n        if (typeof legacyContext === 'string') {\n          timefield = legacyContext;\n          result += ', \"' + TIMEFIELD + '\": ' + JSON.stringify(timefield);\n        }\n        result += '}';\n\n        this._onWarning('Legacy \"url\": {\"' + LEGACY_CONTEXT + '\": ' + JSON.stringify(legacyContext) + '} should change to ' + result);\n      }\n\n      if (body.query !== undefined) {\n        if (usesContext) {\n          throw new Error('url.' + CONTEXT + ' and url.' + TIMEFIELD + ' must not be used when url.body.query is set');\n        }\n        this._injectContextVars(body.query, true);\n      } else if (usesContext) {\n\n        if (timefield) {\n          // Inject range filter based on the timefilter values\n          body.query = { range: _defineProperty({}, timefield, this._createRangeFilter(_defineProperty({}, TIMEFILTER, true))) };\n        }\n\n        if (context) {\n          // Use dashboard context\n          var newQuery = this._dashboardContext();\n          if (timefield) {\n            newQuery.bool.must.push(body.query);\n          }\n          body.query = newQuery;\n        }\n      }\n\n      this._injectContextVars(body.aggs, false);\n      return { dataObject: dataObject, url: url };\n    }\n\n    /**\n     * Process items generated by parseUrl()\n     * @param {object[]} requests each object is generated by parseUrl()\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: 'populateData',\n    value: function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(requests) {\n        var esSearches, results, i;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                esSearches = requests.map(function (r) {\n                  return r.url;\n                });\n                _context.next = 3;\n                return this._searchCache.search(esSearches);\n\n              case 3:\n                results = _context.sent;\n\n\n                for (i = 0; i < requests.length; i++) {\n                  requests[i].dataObject.values = results[i];\n                }\n\n              case 5:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function populateData(_x) {\n        return _ref.apply(this, arguments);\n      }\n\n      return populateData;\n    }()\n\n    /**\n     * Modify ES request by processing magic keywords\n     * @param {*} obj\n     * @param {boolean} isQuery - if true, the `obj` belongs to the req's query portion\n     */\n\n  }, {\n    key: '_injectContextVars',\n    value: function _injectContextVars(obj, isQuery) {\n      if (obj && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object') {\n        if (Array.isArray(obj)) {\n          // For arrays, replace MUST_CLAUSE and MUST_NOT_CLAUSE string elements\n          for (var pos = 0; pos < obj.length;) {\n            var item = obj[pos];\n            if (isQuery && (item === MUST_CLAUSE || item === MUST_NOT_CLAUSE)) {\n              var ctxTag = item === MUST_CLAUSE ? 'must' : 'must_not';\n              var ctx = this._dashboardContext();\n              if (ctx && ctx.bool && ctx.bool[ctxTag]) {\n                if (Array.isArray(ctx.bool[ctxTag])) {\n                  // replace one value with an array of values\n                  obj.splice.apply(obj, [pos, 1].concat(_toConsumableArray(ctx.bool[ctxTag])));\n                  pos += ctx.bool[ctxTag].length;\n                } else {\n                  obj[pos++] = ctx.bool[ctxTag];\n                }\n              } else {\n                obj.splice(pos, 1); // remove item, keep pos at the same position\n              }\n            } else {\n              this._injectContextVars(item, isQuery);\n              pos++;\n            }\n          }\n        } else {\n          var _iteratorNormalCompletion = true;\n          var _didIteratorError = false;\n          var _iteratorError = undefined;\n\n          try {\n            for (var _iterator = Object.keys(obj)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n              var prop = _step.value;\n\n              var subObj = obj[prop];\n              if (!subObj || (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) !== 'object') continue;\n\n              // replace \"interval\": { \"%autointerval%\": true|integer } with\n              // auto-generated range based on the timepicker\n              if (prop === 'interval' && subObj[AUTOINTERVAL]) {\n                var size = subObj[AUTOINTERVAL];\n                if (size === true) {\n                  size = 50; // by default, try to get ~80 values\n                } else if (typeof size !== 'number') {\n                  throw new Error('\"' + AUTOINTERVAL + '\" must be either true or a number');\n                }\n                var bounds = this._timeCache.getTimeBounds();\n                obj.interval = EsQueryParser._roundInterval((bounds.max - bounds.min) / size);\n                continue;\n              }\n\n              // handle %timefilter%\n              switch (subObj[TIMEFILTER]) {\n                case 'min':\n                case 'max':\n                  // Replace {\"%timefilter%\": \"min|max\", ...} object with a timestamp\n                  obj[prop] = this._getTimeBound(subObj, subObj[TIMEFILTER]);\n                  continue;\n                case true:\n                  // Replace {\"%timefilter%\": true, ...} object with the \"range\" object\n                  this._createRangeFilter(subObj);\n                  continue;\n                case undefined:\n                  this._injectContextVars(subObj, isQuery);\n                  continue;\n                default:\n                  throw new Error('\"' + TIMEFILTER + '\" property must be set to true, \"min\", or \"max\"');\n              }\n            }\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion && _iterator.return) {\n                _iterator.return();\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    /**\n     * replaces given object that contains `%timefilter%` key with the timefilter bounds and optional shift & unit parameters\n     * @param {object} obj\n     * @return {object}\n     */\n\n  }, {\n    key: '_createRangeFilter',\n    value: function _createRangeFilter(obj) {\n      obj.gte = this._getTimeBound(obj, 'min');\n      obj.lte = this._getTimeBound(obj, 'max');\n      obj.format = 'epoch_millis';\n      delete obj[TIMEFILTER];\n      delete obj.shift;\n      delete obj.unit;\n      return obj;\n    }\n\n    /**\n     *\n     * @param {object} opts\n     * @param {number} [opts.shift]\n     * @param {string} [opts.unit]\n     * @param {'min'|'max'} type\n     * @returns {*}\n     */\n\n  }, {\n    key: '_getTimeBound',\n    value: function _getTimeBound(opts, type) {\n      var bounds = this._timeCache.getTimeBounds();\n      var result = bounds[type];\n\n      if (opts.shift) {\n        var shift = opts.shift;\n        if (typeof shift !== 'number') {\n          throw new Error('shift must be a numeric value');\n        }\n        var multiplier = void 0;\n        switch (opts.unit || 'd') {\n          case 'w':\n          case 'week':\n            multiplier = 1000 * 60 * 60 * 24 * 7;\n            break;\n          case 'd':\n          case 'day':\n            multiplier = 1000 * 60 * 60 * 24;\n            break;\n          case 'h':\n          case 'hour':\n            multiplier = 1000 * 60 * 60;\n            break;\n          case 'm':\n          case 'minute':\n            multiplier = 1000 * 60;\n            break;\n          case 's':\n          case 'second':\n            multiplier = 1000;\n            break;\n          default:\n            throw new Error('Unknown unit value. Must be one of: [week, day, hour, minute, second]');\n        }\n        result += shift * multiplier;\n      }\n\n      return result;\n    }\n\n    /**\n     * Adapted from src/core_plugins/timelion/common/lib/calculate_interval.js\n     * @param interval (ms)\n     * @returns {string}\n     */\n\n  }], [{\n    key: '_roundInterval',\n    value: function _roundInterval(interval) {\n      switch (true) {\n        case interval <= 500:\n          // <= 0.5s\n          return '100ms';\n        case interval <= 5000:\n          // <= 5s\n          return '1s';\n        case interval <= 7500:\n          // <= 7.5s\n          return '5s';\n        case interval <= 15000:\n          // <= 15s\n          return '10s';\n        case interval <= 45000:\n          // <= 45s\n          return '30s';\n        case interval <= 180000:\n          // <= 3m\n          return '1m';\n        case interval <= 450000:\n          // <= 9m\n          return '5m';\n        case interval <= 1200000:\n          // <= 20m\n          return '10m';\n        case interval <= 2700000:\n          // <= 45m\n          return '30m';\n        case interval <= 7200000:\n          // <= 2h\n          return '1h';\n        case interval <= 21600000:\n          // <= 6h\n          return '3h';\n        case interval <= 86400000:\n          // <= 24h\n          return '12h';\n        case interval <= 604800000:\n          // <= 1w\n          return '24h';\n        case interval <= 1814400000:\n          // <= 3w\n          return '1w';\n        case interval < 3628800000:\n          // <  2y\n          return '30d';\n        default:\n          return '1y';\n      }\n    }\n  }]);\n\n  return EsQueryParser;\n}();",null]}