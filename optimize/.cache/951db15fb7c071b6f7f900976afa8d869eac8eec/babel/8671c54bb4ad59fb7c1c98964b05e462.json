{"remainingRequest":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\node_modules\\babel-loader\\lib\\index.js??ref--6-1!C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\src\\ui\\public\\listen\\listen.js","dependencies":[{"path":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\src\\ui\\public\\listen\\listen.js","mtime":1525446415856},{"path":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1493198456000},{"path":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\node_modules\\babel-loader\\lib\\index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nvar _modules = require('ui/modules');\n\n_modules.uiModules.get('kibana').run(function ($rootScope) {\n\n  /**\n   * Helper that registers an event listener, and removes that listener when\n   * the $scope is destroyed.\n   *\n   * @param  {EventEmitter} emitter - the event emitter to listen to\n   * @param  {string} eventName - the event name\n   * @param  {Function} handler - the event handler\n   * @return {undefined}\n   */\n  $rootScope.constructor.prototype.$listen = function (emitter, eventName, handler) {\n    emitter.on(eventName, handler);\n    this.$on('$destroy', function () {\n      emitter.off(eventName, handler);\n    });\n  };\n});",null]}