{"remainingRequest":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\node_modules\\babel-loader\\lib\\index.js??ref--6-1!C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\src\\core_plugins\\console\\public\\tests\\src\\input_tokenization_tests.js","dependencies":[{"path":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\src\\core_plugins\\console\\public\\tests\\src\\input_tokenization_tests.js","mtime":1525446212179},{"path":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1493198456000},{"path":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\node_modules\\babel-loader\\lib\\index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nvar _input = require('../../src/input');\n\nvar ace = require('ace');\nvar $ = require('jquery');\n\nvar input = void 0;\n\nvar token_iterator = ace.require(\"ace/token_iterator\");\nvar _window$QUnit = window.QUnit,\n    _module = _window$QUnit.module,\n    asyncTest = _window$QUnit.asyncTest,\n    deepEqual = _window$QUnit.deepEqual,\n    start = _window$QUnit.start;\n\n\n_module(\"Input Tokenization\", {\n  setup: function setup() {\n    input = (0, _input.initializeInput)($('#editor'), $('#editor_actions'), $('#copy_as_curl'), null);\n    input.$el.show();\n    input.autocomplete._test.removeChangeListener();\n  },\n  teardown: function teardown() {\n    input.$el.hide();\n    input.autocomplete._test.addChangeListener();\n  }\n});\n\nfunction tokensAsList() {\n  var iter = new token_iterator.TokenIterator(input.getSession(), 0, 0);\n  var ret = [];\n  var t = iter.getCurrentToken();\n  if (input.parser.isEmptyToken(t)) {\n    t = input.parser.nextNonEmptyToken(iter);\n  }\n  while (t) {\n    ret.push({ value: t.value, type: t.type });\n    t = input.parser.nextNonEmptyToken(iter);\n  }\n\n  return ret;\n}\n\nvar testCount = 0;\n\nfunction token_test(token_list, prefix, data) {\n  if (data && typeof data != \"string\") {\n    data = JSON.stringify(data, null, 3);\n  }\n  if (data) {\n    if (prefix) {\n      data = prefix + \"\\n\" + data;\n    }\n  } else {\n    data = prefix;\n  }\n\n  asyncTest(\"Token test \" + testCount++ + \" prefix: \" + prefix, function () {\n    input.update(data, function () {\n      var tokens = tokensAsList();\n      var normTokenList = [];\n      for (var i = 0; i < token_list.length; i++) {\n        normTokenList.push({ type: token_list[i++], value: token_list[i] });\n      }\n\n      deepEqual(tokens, normTokenList, \"Doc:\\n\" + data);\n      start();\n    });\n  });\n}\n\ntoken_test([\"method\", \"GET\", \"url.part\", \"_search\"], \"GET _search\");\n\ntoken_test([\"method\", \"GET\", \"url.slash\", \"/\", \"url.part\", \"_search\"], \"GET /_search\");\n\ntoken_test([\"method\", \"GET\", \"url.protocol_host\", \"http://somehost\", \"url.slash\", \"/\", \"url.part\", \"_search\"], \"GET http://somehost/_search\");\n\ntoken_test([\"method\", \"GET\", \"url.protocol_host\", \"http://somehost\"], \"GET http://somehost\");\n\ntoken_test([\"method\", \"GET\", \"url.protocol_host\", \"http://somehost\", \"url.slash\", \"/\"], \"GET http://somehost/\");\n\ntoken_test([\"method\", \"GET\", \"url.protocol_host\", \"http://test:user@somehost\", \"url.slash\", \"/\"], \"GET http://test:user@somehost/\");\n\ntoken_test([\"method\", \"GET\", \"url.part\", \"_cluster\", \"url.slash\", \"/\", \"url.part\", \"nodes\"], \"GET _cluster/nodes\");\n\ntoken_test([\"method\", \"GET\", \"url.slash\", \"/\", \"url.part\", \"_cluster\", \"url.slash\", \"/\", \"url.part\", \"nodes\"], \"GET /_cluster/nodes\");\n\ntoken_test([\"method\", \"GET\", \"url.part\", \"index\", \"url.slash\", \"/\", \"url.part\", \"_search\"], \"GET index/_search\");\n\ntoken_test([\"method\", \"GET\", \"url.part\", \"index\"], \"GET index\");\n\ntoken_test([\"method\", \"GET\", \"url.part\", \"index\", \"url.slash\", \"/\", \"url.part\", \"type\"], \"GET index/type\");\n\ntoken_test([\"method\", \"GET\", \"url.slash\", \"/\", \"url.part\", \"index\", \"url.slash\", \"/\", \"url.part\", \"type\", \"url.slash\", \"/\"], \"GET /index/type/\");\n\ntoken_test([\"method\", \"GET\", \"url.part\", \"index\", \"url.slash\", \"/\", \"url.part\", \"type\", \"url.slash\", \"/\", \"url.part\", \"_search\"], \"GET index/type/_search\");\n\ntoken_test([\"method\", \"GET\", \"url.part\", \"index\", \"url.slash\", \"/\", \"url.part\", \"type\", \"url.slash\", \"/\", \"url.part\", \"_search\", \"url.questionmark\", \"?\", \"url.param\", \"value\", \"url.equal\", \"=\", \"url.value\", \"1\"], \"GET index/type/_search?value=1\");\n\ntoken_test([\"method\", \"GET\", \"url.part\", \"index\", \"url.slash\", \"/\", \"url.part\", \"type\", \"url.slash\", \"/\", \"url.part\", \"1\"], \"GET index/type/1\");\n\ntoken_test([\"method\", \"GET\", \"url.slash\", \"/\", \"url.part\", \"index1\", \"url.comma\", \",\", \"url.part\", \"index2\", \"url.slash\", \"/\"], \"GET /index1,index2/\");\n\ntoken_test([\"method\", \"GET\", \"url.slash\", \"/\", \"url.part\", \"index1\", \"url.comma\", \",\", \"url.part\", \"index2\", \"url.slash\", \"/\", \"url.part\", \"_search\"], \"GET /index1,index2/_search\");\n\ntoken_test([\"method\", \"GET\", \"url.part\", \"index1\", \"url.comma\", \",\", \"url.part\", \"index2\", \"url.slash\", \"/\", \"url.part\", \"_search\"], \"GET index1,index2/_search\");\n\ntoken_test([\"method\", \"GET\", \"url.slash\", \"/\", \"url.part\", \"index1\", \"url.comma\", \",\", \"url.part\", \"index2\"], \"GET /index1,index2\");\n\ntoken_test([\"method\", \"GET\", \"url.part\", \"index1\", \"url.comma\", \",\", \"url.part\", \"index2\"], \"GET index1,index2\");\n\ntoken_test([\"method\", \"GET\", \"url.slash\", \"/\", \"url.part\", \"index1\", \"url.comma\", \",\"], \"GET /index1,\");\n\ntoken_test([\"method\", \"PUT\", \"url.slash\", \"/\", \"url.part\", \"index\", \"url.slash\", \"/\"], \"PUT /index/\");\n\ntoken_test([\"method\", \"GET\", \"url.part\", \"index\", \"url.slash\", \"/\", \"url.part\", \"_search\"], \"GET index/_search \");\n\ntoken_test([\"method\", \"PUT\", \"url.slash\", \"/\", \"url.part\", \"index\"], \"PUT /index\");\n\ntoken_test([\"method\", \"PUT\", \"url.slash\", \"/\", \"url.part\", \"index1\", \"url.comma\", \",\", \"url.part\", \"index2\", \"url.slash\", \"/\", \"url.part\", \"type1\", \"url.comma\", \",\", \"url.part\", \"type2\"], \"PUT /index1,index2/type1,type2\");\n\ntoken_test([\"method\", \"PUT\", \"url.slash\", \"/\", \"url.part\", \"index1\", \"url.slash\", \"/\", \"url.part\", \"type1\", \"url.comma\", \",\", \"url.part\", \"type2\", \"url.comma\", \",\"], \"PUT /index1/type1,type2,\");\n\ntoken_test([\"method\", \"PUT\", \"url.part\", \"index1\", \"url.comma\", \",\", \"url.part\", \"index2\", \"url.slash\", \"/\", \"url.part\", \"type1\", \"url.comma\", \",\", \"url.part\", \"type2\", \"url.slash\", \"/\", \"url.part\", \"1234\"], \"PUT index1,index2/type1,type2/1234\");\n\ntoken_test([\"method\", \"POST\", \"url.part\", \"_search\", \"paren.lparen\", \"{\", \"variable\", '\"q\"', \"punctuation.colon\", \":\", \"paren.lparen\", \"{\", \"paren.rparen\", \"}\", \"paren.rparen\", \"}\"], 'POST _search\\n' + '{\\n' + '  \"q\": {}\\n' + '  \\n' + '}');\n\ntoken_test([\"method\", \"POST\", \"url.part\", \"_search\", \"paren.lparen\", \"{\", \"variable\", '\"q\"', \"punctuation.colon\", \":\", \"paren.lparen\", \"{\", \"variable\", '\"s\"', \"punctuation.colon\", \":\", \"paren.lparen\", \"{\", \"paren.rparen\", \"}\", \"paren.rparen\", \"}\", \"paren.rparen\", \"}\"], 'POST _search\\n' + '{\\n' + '  \"q\": { \"s\": {}}\\n' + '  \\n' + '}');\n\nfunction statesAsList() {\n  var ret = [];\n  var session = input.getSession();\n  var maxLine = session.getLength();\n  for (var row = 0; row < maxLine; row++) {\n    ret.push(session.getState(row));\n  }return ret;\n}\n\nfunction states_test(states_list, prefix, data) {\n  if (data && typeof data != \"string\") {\n    data = JSON.stringify(data, null, 3);\n  }\n  if (data) {\n    if (prefix) {\n      data = prefix + \"\\n\" + data;\n    }\n  } else {\n    data = prefix;\n  }\n\n  asyncTest(\"States test \" + testCount++ + \" prefix: \" + prefix, function () {\n    input.update(data, function () {\n      var modes = statesAsList();\n      deepEqual(modes, states_list, \"Doc:\\n\" + data);\n      start();\n    });\n  });\n}\n\nstates_test([\"start\", \"json\", \"json\", \"start\"], 'POST _search\\n' + '{\\n' + '  \"query\": { \"match_all\": {} }\\n' + '}');\n\nstates_test([\"start\", \"json\", [\"json\", \"json\"], [\"json\", \"json\"], \"json\", \"start\"], 'POST _search\\n' + '{\\n' + '  \"query\": { \\n' + '  \"match_all\": {} \\n' + '  }\\n' + '}');\n\nstates_test([\"start\", \"json\", \"json\", \"start\"], 'POST _search\\n' + '{\\n' + '  \"script\": { \"inline\": \"\" }\\n' + '}');\n\nstates_test([\"start\", \"json\", \"json\", \"start\"], 'POST _search\\n' + '{\\n' + '  \"script\": \"\"\\n' + '}');\n\nstates_test([\"start\", \"json\", [\"json\", \"json\"], \"json\", \"start\"], 'POST _search\\n' + '{\\n' + '  \"script\": {\\n' + '   }\\n' + '}');\n\nstates_test([\"start\", \"json\", [\"script-start\", \"json\", \"json\", \"json\"], [\"script-start\", \"json\", \"json\", \"json\"], [\"json\", \"json\"], \"json\", \"start\"], 'POST _search\\n' + '{\\n' + '  \"test\": { \"script\": \"\"\"\\n' + '  test script\\n' + ' \"\"\"\\n' + ' }\\n' + '}');\n\nstates_test([\"start\", \"json\", [\"script-start\", \"json\"], [\"script-start\", \"json\"], \"json\", \"start\"], 'POST _search\\n' + '{\\n' + '  \"script\": \"\"\"\\n' + '  test script\\n' + ' \"\"\",\\n' + '}');\n\nstates_test([\"start\", \"json\", \"json\", \"start\"], 'POST _search\\n' + '{\\n' + '  \"script\": \"\"\"test script\"\"\",\\n' + '}');\n\nstates_test([\"start\", \"json\", [\"string_literal\", \"json\"], [\"string_literal\", \"json\"], \"json\", \"start\"], 'POST _search\\n' + '{\\n' + '  \"somthing\": \"\"\"\\n' + '  test script\\n' + ' \"\"\",\\n' + '}');\n\nstates_test([\"start\", \"json\", [\"string_literal\", \"json\", \"json\", \"json\"], [\"string_literal\", \"json\", \"json\", \"json\"], [\"json\", \"json\"], [\"json\", \"json\"], \"json\", \"start\"], 'POST _search\\n' + '{\\n' + '  \"somthing\": { \"f\" : \"\"\"\\n' + '  test script\\n' + ' \"\"\",\\n' + ' \"g\": 1\\n' + ' }\\n' + '}');\n\nstates_test([\"start\", \"json\", \"json\", \"start\"], 'POST _search\\n' + '{\\n' + '  \"something\": \"\"\"test script\"\"\",\\n' + '}');",null]}