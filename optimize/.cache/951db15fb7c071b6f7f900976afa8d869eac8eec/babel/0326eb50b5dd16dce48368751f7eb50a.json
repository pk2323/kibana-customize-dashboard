{"remainingRequest":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\node_modules\\babel-loader\\lib\\index.js??ref--6-1!C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\src\\core_plugins\\vega\\public\\vega_visualization.js","dependencies":[{"path":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\src\\core_plugins\\vega\\public\\vega_visualization.js","mtime":1525446284899},{"path":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1493198456000},{"path":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\node_modules\\babel-loader\\lib\\index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nexports.VegaVisualizationProvider = VegaVisualizationProvider;\n\nvar _notify = require('ui/notify');\n\nvar _vega_view = require('./vega_view/vega_view');\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction VegaVisualizationProvider(vegaConfig, serviceSettings) {\n\n  var notify = new _notify.Notifier({ location: 'Vega' });\n\n  return function () {\n    function VegaVisualization(el, vis) {\n      _classCallCheck(this, VegaVisualization);\n\n      this._el = el;\n      this._vis = vis;\n    }\n\n    /**\n     *\n     * @param {VegaParser} visData\n     * @param {*} status\n     * @returns {Promise<void>}\n     */\n\n\n    _createClass(VegaVisualization, [{\n      key: 'render',\n      value: function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(visData, status) {\n          return regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  if (!(!visData && !this._vegaView)) {\n                    _context.next = 3;\n                    break;\n                  }\n\n                  notify.warning('Unable to render without data');\n                  return _context.abrupt('return');\n\n                case 3:\n                  _context.prev = 3;\n                  _context.next = 6;\n                  return this._render(visData, status);\n\n                case 6:\n                  _context.next = 11;\n                  break;\n\n                case 8:\n                  _context.prev = 8;\n                  _context.t0 = _context['catch'](3);\n\n                  if (this._vegaView) {\n                    this._vegaView.onError(_context.t0);\n                  } else {\n                    notify.error(_context.t0);\n                  }\n\n                case 11:\n                case 'end':\n                  return _context.stop();\n              }\n            }\n          }, _callee, this, [[3, 8]]);\n        }));\n\n        function render(_x, _x2) {\n          return _ref.apply(this, arguments);\n        }\n\n        return render;\n      }()\n    }, {\n      key: '_render',\n      value: function () {\n        var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(vegaParser, status) {\n          return regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  if (!(vegaParser && (status.data || !this._vegaView))) {\n                    _context2.next = 14;\n                    break;\n                  }\n\n                  if (!this._vegaView) {\n                    _context2.next = 5;\n                    break;\n                  }\n\n                  _context2.next = 4;\n                  return this._vegaView.destroy();\n\n                case 4:\n                  this._vegaView = null;\n\n                case 5:\n                  if (!vegaParser.useMap) {\n                    _context2.next = 9;\n                    break;\n                  }\n\n                  throw new Error('Map mode is not yet supported in Kibana Core. You must use Kibana Vega plugin');\n\n                case 9:\n                  this._vegaView = new _vega_view.VegaView(vegaConfig, this._vis.editorMode, this._el, vegaParser, serviceSettings);\n\n                case 10:\n                  _context2.next = 12;\n                  return this._vegaView.init();\n\n                case 12:\n                  _context2.next = 17;\n                  break;\n\n                case 14:\n                  if (!status.resize) {\n                    _context2.next = 17;\n                    break;\n                  }\n\n                  _context2.next = 17;\n                  return this._vegaView.resize();\n\n                case 17:\n                case 'end':\n                  return _context2.stop();\n              }\n            }\n          }, _callee2, this);\n        }));\n\n        function _render(_x3, _x4) {\n          return _ref2.apply(this, arguments);\n        }\n\n        return _render;\n      }()\n    }, {\n      key: 'destroy',\n      value: function destroy() {\n        return this._vegaView && this._vegaView.destroy();\n      }\n    }]);\n\n    return VegaVisualization;\n  }();\n}",null]}