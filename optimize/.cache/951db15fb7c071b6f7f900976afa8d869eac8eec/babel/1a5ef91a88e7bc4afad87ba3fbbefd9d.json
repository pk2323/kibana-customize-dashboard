{"remainingRequest":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\node_modules\\babel-loader\\lib\\index.js??ref--6-1!C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\src\\core_plugins\\tagcloud\\public\\tag_cloud_controller.js","dependencies":[{"path":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\src\\core_plugins\\tagcloud\\public\\tag_cloud_controller.js","mtime":1525446269358},{"path":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1493198456000},{"path":"C:\\Users\\Prashanth\\Desktop\\ELk\\kibana-6.2.4\\kibana-6.2.4\\node_modules\\babel-loader\\lib\\index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _modules = require('ui/modules');\n\nvar _tag_cloud = require('plugins/tagcloud/tag_cloud');\n\nvar _tag_cloud2 = _interopRequireDefault(_tag_cloud);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; }\n\nvar _module = _modules.uiModules.get('kibana/tagcloud', ['kibana']);\n_module.controller('KbnTagCloudController', function ($scope, $element) {\n\n  var containerNode = $element[0];\n  var maxTagCount = 200;\n  var truncated = false;\n  var bucketAgg = void 0;\n\n  var tagCloud = new _tag_cloud2.default(containerNode);\n  tagCloud.on('select', function (event) {\n    if (!bucketAgg) return;\n    var filter = bucketAgg.createFilter(event);\n    $scope.vis.API.queryFilter.addFilters(filter);\n  });\n\n  tagCloud.on('renderComplete', function () {\n\n    var truncatedMessage = containerNode.querySelector('.tagcloud-truncated-message');\n    var incompleteMessage = containerNode.querySelector('.tagcloud-incomplete-message');\n\n    if (!$scope.vis.aggs[0] || !$scope.vis.aggs[1]) {\n      incompleteMessage.style.display = 'none';\n      truncatedMessage.style.display = 'none';\n      $scope.renderComplete();\n      return;\n    }\n\n    var bucketName = containerNode.querySelector('.tagcloud-custom-label');\n    bucketName.textContent = $scope.vis.aggs[0].makeLabel() + ' - ' + $scope.vis.aggs[1].makeLabel();\n    truncatedMessage.style.display = truncated ? 'block' : 'none';\n\n    var status = tagCloud.getStatus();\n    if (_tag_cloud2.default.STATUS.COMPLETE === status) {\n      incompleteMessage.style.display = 'none';\n    } else if (_tag_cloud2.default.STATUS.INCOMPLETE === status) {\n      incompleteMessage.style.display = 'block';\n    }\n\n    $scope.renderComplete();\n  });\n\n  $scope.$watch('renderComplete', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n    var data, tags;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n\n            if ($scope.updateStatus.resize) {\n              tagCloud.resize();\n            }\n\n            if ($scope.updateStatus.params) {\n              tagCloud.setOptions($scope.vis.params);\n            }\n\n            if (!(!$scope.esResponse || !$scope.esResponse.tables.length)) {\n              _context.next = 5;\n              break;\n            }\n\n            tagCloud.setData([]);\n            return _context.abrupt('return');\n\n          case 5:\n            data = $scope.esResponse.tables[0];\n\n            bucketAgg = data.columns[0].aggConfig;\n\n            tags = data.rows.map(function (row) {\n              var _row = _slicedToArray(row, 2),\n                  tag = _row[0],\n                  count = _row[1];\n\n              return {\n                displayText: bucketAgg ? bucketAgg.fieldFormatter()(tag) : tag,\n                rawText: tag,\n                value: count\n              };\n            });\n\n\n            if (tags.length > maxTagCount) {\n              tags.length = maxTagCount;\n              truncated = true;\n            } else {\n              truncated = false;\n            }\n\n            tagCloud.setData(tags);\n\n          case 10:\n          case 'end':\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  })));\n});",null]}